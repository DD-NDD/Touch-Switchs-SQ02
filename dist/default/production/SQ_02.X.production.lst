

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Aug 23 12:51:43 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	inittext,global,class=CODE,delta=2
    26                           	psect	clrtext,global,class=CODE,delta=2
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	text65,local,class=CODE,merge=1,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,delta=2
   100                           	psect	text70,local,class=CODE,merge=1,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	text72,local,class=CODE,merge=1,delta=2
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	text74,local,class=CODE,merge=1,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,delta=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	psect	text81,local,class=CODE,merge=1,delta=2,group=1
   112                           	psect	text82,local,class=CODE,merge=1,delta=2
   113                           	psect	text83,local,class=CODE,merge=1,delta=2
   114                           	psect	text84,local,class=CODE,merge=1,delta=2
   115                           	psect	text85,local,class=CODE,merge=1,delta=2
   116                           	psect	text86,local,class=CODE,merge=1,delta=2
   117                           	psect	text87,local,class=CODE,merge=1,delta=2
   118                           	psect	text88,local,class=CODE,merge=1,delta=2
   119                           	psect	text89,local,class=CODE,merge=1,delta=2
   120                           	psect	text90,local,class=CODE,merge=1,delta=2
   121                           	psect	text91,local,class=CODE,merge=1,delta=2
   122                           	psect	text92,local,class=CODE,merge=1,delta=2
   123                           	psect	text93,local,class=CODE,merge=1,delta=2
   124                           	psect	intentry,global,class=CODE,delta=2
   125                           	psect	text95,local,class=CODE,merge=1,delta=2
   126                           	psect	text96,local,class=CODE,merge=1,delta=2
   127                           	psect	text97,local,class=CODE,merge=1,delta=2
   128                           	psect	text98,local,class=CODE,merge=1,delta=2
   129                           	psect	text99,local,class=CODE,merge=1,delta=2
   130                           	psect	text100,local,class=CODE,merge=1,delta=2
   131                           	dabs	1,0x7E,2
   132  0000                     
   133                           ; Version 2.05
   134                           ; Generated 20/12/2018 GMT
   135                           ; 
   136                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   137                           ; All rights reserved.
   138                           ; 
   139                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   140                           ; 
   141                           ; Redistribution and use in source and binary forms, with or without modification, are
   142                           ; permitted provided that the following conditions are met:
   143                           ; 
   144                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   145                           ;        conditions and the following disclaimer.
   146                           ; 
   147                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   148                           ;        of conditions and the following disclaimer in the documentation and/or other
   149                           ;        materials provided with the distribution.
   150                           ; 
   151                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   152                           ;        software without specific prior written permission.
   153                           ; 
   154                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   155                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   156                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   157                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   158                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   159                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   160                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   161                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   162                           ; 
   163                           ; 
   164                           ; Code-generator required, PIC16LF1559 Definitions
   165                           ; 
   166                           ; SFR Addresses
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  011D                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  018E                     	;# 
   218  0191                     	;# 
   219  0191                     	;# 
   220  0192                     	;# 
   221  0193                     	;# 
   222  0193                     	;# 
   223  0194                     	;# 
   224  0195                     	;# 
   225  0196                     	;# 
   226  0199                     	;# 
   227  019A                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019C                     	;# 
   231  019D                     	;# 
   232  019E                     	;# 
   233  019F                     	;# 
   234  020C                     	;# 
   235  020D                     	;# 
   236  0211                     	;# 
   237  0211                     	;# 
   238  0212                     	;# 
   239  0212                     	;# 
   240  0213                     	;# 
   241  0213                     	;# 
   242  0214                     	;# 
   243  0214                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0216                     	;# 
   248  0216                     	;# 
   249  0217                     	;# 
   250  0217                     	;# 
   251  0391                     	;# 
   252  0392                     	;# 
   253  0393                     	;# 
   254  0394                     	;# 
   255  0395                     	;# 
   256  0396                     	;# 
   257  0611                     	;# 
   258  0612                     	;# 
   259  0613                     	;# 
   260  0613                     	;# 
   261  0614                     	;# 
   262  0615                     	;# 
   263  0616                     	;# 
   264  0616                     	;# 
   265  0711                     	;# 
   266  0711                     	;# 
   267  0711                     	;# 
   268  0712                     	;# 
   269  0712                     	;# 
   270  0713                     	;# 
   271  0713                     	;# 
   272  0713                     	;# 
   273  0714                     	;# 
   274  0714                     	;# 
   275  0714                     	;# 
   276  0715                     	;# 
   277  0715                     	;# 
   278  0716                     	;# 
   279  0716                     	;# 
   280  0716                     	;# 
   281  0716                     	;# 
   282  0717                     	;# 
   283  0717                     	;# 
   284  0717                     	;# 
   285  0717                     	;# 
   286  0718                     	;# 
   287  0718                     	;# 
   288  0718                     	;# 
   289  0719                     	;# 
   290  0719                     	;# 
   291  0719                     	;# 
   292  0719                     	;# 
   293  071A                     	;# 
   294  071A                     	;# 
   295  071A                     	;# 
   296  071A                     	;# 
   297  071A                     	;# 
   298  071B                     	;# 
   299  071B                     	;# 
   300  071C                     	;# 
   301  071C                     	;# 
   302  071C                     	;# 
   303  071C                     	;# 
   304  071C                     	;# 
   305  071D                     	;# 
   306  071D                     	;# 
   307  071E                     	;# 
   308  071E                     	;# 
   309  0791                     	;# 
   310  0791                     	;# 
   311  0793                     	;# 
   312  0793                     	;# 
   313  0794                     	;# 
   314  0794                     	;# 
   315  0796                     	;# 
   316  0796                     	;# 
   317  0796                     	;# 
   318  0797                     	;# 
   319  0797                     	;# 
   320  0797                     	;# 
   321  0798                     	;# 
   322  0798                     	;# 
   323  0799                     	;# 
   324  0799                     	;# 
   325  0799                     	;# 
   326  079A                     	;# 
   327  079A                     	;# 
   328  079A                     	;# 
   329  079B                     	;# 
   330  079C                     	;# 
   331  079C                     	;# 
   332  079C                     	;# 
   333  079D                     	;# 
   334  079E                     	;# 
   335  079E                     	;# 
   336  0F8C                     	;# 
   337  0F8D                     	;# 
   338  0F91                     	;# 
   339  0F96                     	;# 
   340  0F97                     	;# 
   341  0F9C                     	;# 
   342  0F9D                     	;# 
   343  0F9E                     	;# 
   344  0FE3                     	;# 
   345  0FE4                     	;# 
   346  0FE5                     	;# 
   347  0FE6                     	;# 
   348  0FE7                     	;# 
   349  0FE8                     	;# 
   350  0FE9                     	;# 
   351  0FEA                     	;# 
   352  0FEB                     	;# 
   353  0FED                     	;# 
   354  0FEE                     	;# 
   355  0FEF                     	;# 
   356  0000                     	;# 
   357  0001                     	;# 
   358  0002                     	;# 
   359  0003                     	;# 
   360  0004                     	;# 
   361  0005                     	;# 
   362  0006                     	;# 
   363  0007                     	;# 
   364  0008                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  0011                     	;# 
   372  0012                     	;# 
   373  0015                     	;# 
   374  0016                     	;# 
   375  0016                     	;# 
   376  0017                     	;# 
   377  0018                     	;# 
   378  0019                     	;# 
   379  001A                     	;# 
   380  001B                     	;# 
   381  001C                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  0091                     	;# 
   386  0092                     	;# 
   387  0095                     	;# 
   388  0096                     	;# 
   389  0097                     	;# 
   390  0099                     	;# 
   391  009A                     	;# 
   392  009B                     	;# 
   393  009B                     	;# 
   394  009C                     	;# 
   395  009D                     	;# 
   396  009E                     	;# 
   397  009F                     	;# 
   398  010C                     	;# 
   399  010D                     	;# 
   400  010E                     	;# 
   401  0116                     	;# 
   402  0117                     	;# 
   403  011D                     	;# 
   404  018C                     	;# 
   405  018D                     	;# 
   406  018E                     	;# 
   407  0191                     	;# 
   408  0191                     	;# 
   409  0192                     	;# 
   410  0193                     	;# 
   411  0193                     	;# 
   412  0194                     	;# 
   413  0195                     	;# 
   414  0196                     	;# 
   415  0199                     	;# 
   416  019A                     	;# 
   417  019B                     	;# 
   418  019B                     	;# 
   419  019C                     	;# 
   420  019D                     	;# 
   421  019E                     	;# 
   422  019F                     	;# 
   423  020C                     	;# 
   424  020D                     	;# 
   425  0211                     	;# 
   426  0211                     	;# 
   427  0212                     	;# 
   428  0212                     	;# 
   429  0213                     	;# 
   430  0213                     	;# 
   431  0214                     	;# 
   432  0214                     	;# 
   433  0215                     	;# 
   434  0215                     	;# 
   435  0215                     	;# 
   436  0216                     	;# 
   437  0216                     	;# 
   438  0217                     	;# 
   439  0217                     	;# 
   440  0391                     	;# 
   441  0392                     	;# 
   442  0393                     	;# 
   443  0394                     	;# 
   444  0395                     	;# 
   445  0396                     	;# 
   446  0611                     	;# 
   447  0612                     	;# 
   448  0613                     	;# 
   449  0613                     	;# 
   450  0614                     	;# 
   451  0615                     	;# 
   452  0616                     	;# 
   453  0616                     	;# 
   454  0711                     	;# 
   455  0711                     	;# 
   456  0711                     	;# 
   457  0712                     	;# 
   458  0712                     	;# 
   459  0713                     	;# 
   460  0713                     	;# 
   461  0713                     	;# 
   462  0714                     	;# 
   463  0714                     	;# 
   464  0714                     	;# 
   465  0715                     	;# 
   466  0715                     	;# 
   467  0716                     	;# 
   468  0716                     	;# 
   469  0716                     	;# 
   470  0716                     	;# 
   471  0717                     	;# 
   472  0717                     	;# 
   473  0717                     	;# 
   474  0717                     	;# 
   475  0718                     	;# 
   476  0718                     	;# 
   477  0718                     	;# 
   478  0719                     	;# 
   479  0719                     	;# 
   480  0719                     	;# 
   481  0719                     	;# 
   482  071A                     	;# 
   483  071A                     	;# 
   484  071A                     	;# 
   485  071A                     	;# 
   486  071A                     	;# 
   487  071B                     	;# 
   488  071B                     	;# 
   489  071C                     	;# 
   490  071C                     	;# 
   491  071C                     	;# 
   492  071C                     	;# 
   493  071C                     	;# 
   494  071D                     	;# 
   495  071D                     	;# 
   496  071E                     	;# 
   497  071E                     	;# 
   498  0791                     	;# 
   499  0791                     	;# 
   500  0793                     	;# 
   501  0793                     	;# 
   502  0794                     	;# 
   503  0794                     	;# 
   504  0796                     	;# 
   505  0796                     	;# 
   506  0796                     	;# 
   507  0797                     	;# 
   508  0797                     	;# 
   509  0797                     	;# 
   510  0798                     	;# 
   511  0798                     	;# 
   512  0799                     	;# 
   513  0799                     	;# 
   514  0799                     	;# 
   515  079A                     	;# 
   516  079A                     	;# 
   517  079A                     	;# 
   518  079B                     	;# 
   519  079C                     	;# 
   520  079C                     	;# 
   521  079C                     	;# 
   522  079D                     	;# 
   523  079E                     	;# 
   524  079E                     	;# 
   525  0F8C                     	;# 
   526  0F8D                     	;# 
   527  0F91                     	;# 
   528  0F96                     	;# 
   529  0F97                     	;# 
   530  0F9C                     	;# 
   531  0F9D                     	;# 
   532  0F9E                     	;# 
   533  0FE3                     	;# 
   534  0FE4                     	;# 
   535  0FE5                     	;# 
   536  0FE6                     	;# 
   537  0FE7                     	;# 
   538  0FE8                     	;# 
   539  0FE9                     	;# 
   540  0FEA                     	;# 
   541  0FEB                     	;# 
   542  0FED                     	;# 
   543  0FEE                     	;# 
   544  0FEF                     	;# 
   545  0000                     	;# 
   546  0001                     	;# 
   547  0002                     	;# 
   548  0003                     	;# 
   549  0004                     	;# 
   550  0005                     	;# 
   551  0006                     	;# 
   552  0007                     	;# 
   553  0008                     	;# 
   554  0009                     	;# 
   555  000A                     	;# 
   556  000B                     	;# 
   557  000C                     	;# 
   558  000D                     	;# 
   559  000E                     	;# 
   560  0011                     	;# 
   561  0012                     	;# 
   562  0015                     	;# 
   563  0016                     	;# 
   564  0016                     	;# 
   565  0017                     	;# 
   566  0018                     	;# 
   567  0019                     	;# 
   568  001A                     	;# 
   569  001B                     	;# 
   570  001C                     	;# 
   571  008C                     	;# 
   572  008D                     	;# 
   573  008E                     	;# 
   574  0091                     	;# 
   575  0092                     	;# 
   576  0095                     	;# 
   577  0096                     	;# 
   578  0097                     	;# 
   579  0099                     	;# 
   580  009A                     	;# 
   581  009B                     	;# 
   582  009B                     	;# 
   583  009C                     	;# 
   584  009D                     	;# 
   585  009E                     	;# 
   586  009F                     	;# 
   587  010C                     	;# 
   588  010D                     	;# 
   589  010E                     	;# 
   590  0116                     	;# 
   591  0117                     	;# 
   592  011D                     	;# 
   593  018C                     	;# 
   594  018D                     	;# 
   595  018E                     	;# 
   596  0191                     	;# 
   597  0191                     	;# 
   598  0192                     	;# 
   599  0193                     	;# 
   600  0193                     	;# 
   601  0194                     	;# 
   602  0195                     	;# 
   603  0196                     	;# 
   604  0199                     	;# 
   605  019A                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019C                     	;# 
   609  019D                     	;# 
   610  019E                     	;# 
   611  019F                     	;# 
   612  020C                     	;# 
   613  020D                     	;# 
   614  0211                     	;# 
   615  0211                     	;# 
   616  0212                     	;# 
   617  0212                     	;# 
   618  0213                     	;# 
   619  0213                     	;# 
   620  0214                     	;# 
   621  0214                     	;# 
   622  0215                     	;# 
   623  0215                     	;# 
   624  0215                     	;# 
   625  0216                     	;# 
   626  0216                     	;# 
   627  0217                     	;# 
   628  0217                     	;# 
   629  0391                     	;# 
   630  0392                     	;# 
   631  0393                     	;# 
   632  0394                     	;# 
   633  0395                     	;# 
   634  0396                     	;# 
   635  0611                     	;# 
   636  0612                     	;# 
   637  0613                     	;# 
   638  0613                     	;# 
   639  0614                     	;# 
   640  0615                     	;# 
   641  0616                     	;# 
   642  0616                     	;# 
   643  0711                     	;# 
   644  0711                     	;# 
   645  0711                     	;# 
   646  0712                     	;# 
   647  0712                     	;# 
   648  0713                     	;# 
   649  0713                     	;# 
   650  0713                     	;# 
   651  0714                     	;# 
   652  0714                     	;# 
   653  0714                     	;# 
   654  0715                     	;# 
   655  0715                     	;# 
   656  0716                     	;# 
   657  0716                     	;# 
   658  0716                     	;# 
   659  0716                     	;# 
   660  0717                     	;# 
   661  0717                     	;# 
   662  0717                     	;# 
   663  0717                     	;# 
   664  0718                     	;# 
   665  0718                     	;# 
   666  0718                     	;# 
   667  0719                     	;# 
   668  0719                     	;# 
   669  0719                     	;# 
   670  0719                     	;# 
   671  071A                     	;# 
   672  071A                     	;# 
   673  071A                     	;# 
   674  071A                     	;# 
   675  071A                     	;# 
   676  071B                     	;# 
   677  071B                     	;# 
   678  071C                     	;# 
   679  071C                     	;# 
   680  071C                     	;# 
   681  071C                     	;# 
   682  071C                     	;# 
   683  071D                     	;# 
   684  071D                     	;# 
   685  071E                     	;# 
   686  071E                     	;# 
   687  0791                     	;# 
   688  0791                     	;# 
   689  0793                     	;# 
   690  0793                     	;# 
   691  0794                     	;# 
   692  0794                     	;# 
   693  0796                     	;# 
   694  0796                     	;# 
   695  0796                     	;# 
   696  0797                     	;# 
   697  0797                     	;# 
   698  0797                     	;# 
   699  0798                     	;# 
   700  0798                     	;# 
   701  0799                     	;# 
   702  0799                     	;# 
   703  0799                     	;# 
   704  079A                     	;# 
   705  079A                     	;# 
   706  079A                     	;# 
   707  079B                     	;# 
   708  079C                     	;# 
   709  079C                     	;# 
   710  079C                     	;# 
   711  079D                     	;# 
   712  079E                     	;# 
   713  079E                     	;# 
   714  0F8C                     	;# 
   715  0F8D                     	;# 
   716  0F91                     	;# 
   717  0F96                     	;# 
   718  0F97                     	;# 
   719  0F9C                     	;# 
   720  0F9D                     	;# 
   721  0F9E                     	;# 
   722  0FE3                     	;# 
   723  0FE4                     	;# 
   724  0FE5                     	;# 
   725  0FE6                     	;# 
   726  0FE7                     	;# 
   727  0FE8                     	;# 
   728  0FE9                     	;# 
   729  0FEA                     	;# 
   730  0FEB                     	;# 
   731  0FED                     	;# 
   732  0FEE                     	;# 
   733  0FEF                     	;# 
   734  0000                     	;# 
   735  0001                     	;# 
   736  0002                     	;# 
   737  0003                     	;# 
   738  0004                     	;# 
   739  0005                     	;# 
   740  0006                     	;# 
   741  0007                     	;# 
   742  0008                     	;# 
   743  0009                     	;# 
   744  000A                     	;# 
   745  000B                     	;# 
   746  000C                     	;# 
   747  000D                     	;# 
   748  000E                     	;# 
   749  0011                     	;# 
   750  0012                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  008C                     	;# 
   761  008D                     	;# 
   762  008E                     	;# 
   763  0091                     	;# 
   764  0092                     	;# 
   765  0095                     	;# 
   766  0096                     	;# 
   767  0097                     	;# 
   768  0099                     	;# 
   769  009A                     	;# 
   770  009B                     	;# 
   771  009B                     	;# 
   772  009C                     	;# 
   773  009D                     	;# 
   774  009E                     	;# 
   775  009F                     	;# 
   776  010C                     	;# 
   777  010D                     	;# 
   778  010E                     	;# 
   779  0116                     	;# 
   780  0117                     	;# 
   781  011D                     	;# 
   782  018C                     	;# 
   783  018D                     	;# 
   784  018E                     	;# 
   785  0191                     	;# 
   786  0191                     	;# 
   787  0192                     	;# 
   788  0193                     	;# 
   789  0193                     	;# 
   790  0194                     	;# 
   791  0195                     	;# 
   792  0196                     	;# 
   793  0199                     	;# 
   794  019A                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019C                     	;# 
   798  019D                     	;# 
   799  019E                     	;# 
   800  019F                     	;# 
   801  020C                     	;# 
   802  020D                     	;# 
   803  0211                     	;# 
   804  0211                     	;# 
   805  0212                     	;# 
   806  0212                     	;# 
   807  0213                     	;# 
   808  0213                     	;# 
   809  0214                     	;# 
   810  0214                     	;# 
   811  0215                     	;# 
   812  0215                     	;# 
   813  0215                     	;# 
   814  0216                     	;# 
   815  0216                     	;# 
   816  0217                     	;# 
   817  0217                     	;# 
   818  0391                     	;# 
   819  0392                     	;# 
   820  0393                     	;# 
   821  0394                     	;# 
   822  0395                     	;# 
   823  0396                     	;# 
   824  0611                     	;# 
   825  0612                     	;# 
   826  0613                     	;# 
   827  0613                     	;# 
   828  0614                     	;# 
   829  0615                     	;# 
   830  0616                     	;# 
   831  0616                     	;# 
   832  0711                     	;# 
   833  0711                     	;# 
   834  0711                     	;# 
   835  0712                     	;# 
   836  0712                     	;# 
   837  0713                     	;# 
   838  0713                     	;# 
   839  0713                     	;# 
   840  0714                     	;# 
   841  0714                     	;# 
   842  0714                     	;# 
   843  0715                     	;# 
   844  0715                     	;# 
   845  0716                     	;# 
   846  0716                     	;# 
   847  0716                     	;# 
   848  0716                     	;# 
   849  0717                     	;# 
   850  0717                     	;# 
   851  0717                     	;# 
   852  0717                     	;# 
   853  0718                     	;# 
   854  0718                     	;# 
   855  0718                     	;# 
   856  0719                     	;# 
   857  0719                     	;# 
   858  0719                     	;# 
   859  0719                     	;# 
   860  071A                     	;# 
   861  071A                     	;# 
   862  071A                     	;# 
   863  071A                     	;# 
   864  071A                     	;# 
   865  071B                     	;# 
   866  071B                     	;# 
   867  071C                     	;# 
   868  071C                     	;# 
   869  071C                     	;# 
   870  071C                     	;# 
   871  071C                     	;# 
   872  071D                     	;# 
   873  071D                     	;# 
   874  071E                     	;# 
   875  071E                     	;# 
   876  0791                     	;# 
   877  0791                     	;# 
   878  0793                     	;# 
   879  0793                     	;# 
   880  0794                     	;# 
   881  0794                     	;# 
   882  0796                     	;# 
   883  0796                     	;# 
   884  0796                     	;# 
   885  0797                     	;# 
   886  0797                     	;# 
   887  0797                     	;# 
   888  0798                     	;# 
   889  0798                     	;# 
   890  0799                     	;# 
   891  0799                     	;# 
   892  0799                     	;# 
   893  079A                     	;# 
   894  079A                     	;# 
   895  079A                     	;# 
   896  079B                     	;# 
   897  079C                     	;# 
   898  079C                     	;# 
   899  079C                     	;# 
   900  079D                     	;# 
   901  079E                     	;# 
   902  079E                     	;# 
   903  0F8C                     	;# 
   904  0F8D                     	;# 
   905  0F91                     	;# 
   906  0F96                     	;# 
   907  0F97                     	;# 
   908  0F9C                     	;# 
   909  0F9D                     	;# 
   910  0F9E                     	;# 
   911  0FE3                     	;# 
   912  0FE4                     	;# 
   913  0FE5                     	;# 
   914  0FE6                     	;# 
   915  0FE7                     	;# 
   916  0FE8                     	;# 
   917  0FE9                     	;# 
   918  0FEA                     	;# 
   919  0FEB                     	;# 
   920  0FED                     	;# 
   921  0FEE                     	;# 
   922  0FEF                     	;# 
   923  0000                     	;# 
   924  0001                     	;# 
   925  0002                     	;# 
   926  0003                     	;# 
   927  0004                     	;# 
   928  0005                     	;# 
   929  0006                     	;# 
   930  0007                     	;# 
   931  0008                     	;# 
   932  0009                     	;# 
   933  000A                     	;# 
   934  000B                     	;# 
   935  000C                     	;# 
   936  000D                     	;# 
   937  000E                     	;# 
   938  0011                     	;# 
   939  0012                     	;# 
   940  0015                     	;# 
   941  0016                     	;# 
   942  0016                     	;# 
   943  0017                     	;# 
   944  0018                     	;# 
   945  0019                     	;# 
   946  001A                     	;# 
   947  001B                     	;# 
   948  001C                     	;# 
   949  008C                     	;# 
   950  008D                     	;# 
   951  008E                     	;# 
   952  0091                     	;# 
   953  0092                     	;# 
   954  0095                     	;# 
   955  0096                     	;# 
   956  0097                     	;# 
   957  0099                     	;# 
   958  009A                     	;# 
   959  009B                     	;# 
   960  009B                     	;# 
   961  009C                     	;# 
   962  009D                     	;# 
   963  009E                     	;# 
   964  009F                     	;# 
   965  010C                     	;# 
   966  010D                     	;# 
   967  010E                     	;# 
   968  0116                     	;# 
   969  0117                     	;# 
   970  011D                     	;# 
   971  018C                     	;# 
   972  018D                     	;# 
   973  018E                     	;# 
   974  0191                     	;# 
   975  0191                     	;# 
   976  0192                     	;# 
   977  0193                     	;# 
   978  0193                     	;# 
   979  0194                     	;# 
   980  0195                     	;# 
   981  0196                     	;# 
   982  0199                     	;# 
   983  019A                     	;# 
   984  019B                     	;# 
   985  019B                     	;# 
   986  019C                     	;# 
   987  019D                     	;# 
   988  019E                     	;# 
   989  019F                     	;# 
   990  020C                     	;# 
   991  020D                     	;# 
   992  0211                     	;# 
   993  0211                     	;# 
   994  0212                     	;# 
   995  0212                     	;# 
   996  0213                     	;# 
   997  0213                     	;# 
   998  0214                     	;# 
   999  0214                     	;# 
  1000  0215                     	;# 
  1001  0215                     	;# 
  1002  0215                     	;# 
  1003  0216                     	;# 
  1004  0216                     	;# 
  1005  0217                     	;# 
  1006  0217                     	;# 
  1007  0391                     	;# 
  1008  0392                     	;# 
  1009  0393                     	;# 
  1010  0394                     	;# 
  1011  0395                     	;# 
  1012  0396                     	;# 
  1013  0611                     	;# 
  1014  0612                     	;# 
  1015  0613                     	;# 
  1016  0613                     	;# 
  1017  0614                     	;# 
  1018  0615                     	;# 
  1019  0616                     	;# 
  1020  0616                     	;# 
  1021  0711                     	;# 
  1022  0711                     	;# 
  1023  0711                     	;# 
  1024  0712                     	;# 
  1025  0712                     	;# 
  1026  0713                     	;# 
  1027  0713                     	;# 
  1028  0713                     	;# 
  1029  0714                     	;# 
  1030  0714                     	;# 
  1031  0714                     	;# 
  1032  0715                     	;# 
  1033  0715                     	;# 
  1034  0716                     	;# 
  1035  0716                     	;# 
  1036  0716                     	;# 
  1037  0716                     	;# 
  1038  0717                     	;# 
  1039  0717                     	;# 
  1040  0717                     	;# 
  1041  0717                     	;# 
  1042  0718                     	;# 
  1043  0718                     	;# 
  1044  0718                     	;# 
  1045  0719                     	;# 
  1046  0719                     	;# 
  1047  0719                     	;# 
  1048  0719                     	;# 
  1049  071A                     	;# 
  1050  071A                     	;# 
  1051  071A                     	;# 
  1052  071A                     	;# 
  1053  071A                     	;# 
  1054  071B                     	;# 
  1055  071B                     	;# 
  1056  071C                     	;# 
  1057  071C                     	;# 
  1058  071C                     	;# 
  1059  071C                     	;# 
  1060  071C                     	;# 
  1061  071D                     	;# 
  1062  071D                     	;# 
  1063  071E                     	;# 
  1064  071E                     	;# 
  1065  0791                     	;# 
  1066  0791                     	;# 
  1067  0793                     	;# 
  1068  0793                     	;# 
  1069  0794                     	;# 
  1070  0794                     	;# 
  1071  0796                     	;# 
  1072  0796                     	;# 
  1073  0796                     	;# 
  1074  0797                     	;# 
  1075  0797                     	;# 
  1076  0797                     	;# 
  1077  0798                     	;# 
  1078  0798                     	;# 
  1079  0799                     	;# 
  1080  0799                     	;# 
  1081  0799                     	;# 
  1082  079A                     	;# 
  1083  079A                     	;# 
  1084  079A                     	;# 
  1085  079B                     	;# 
  1086  079C                     	;# 
  1087  079C                     	;# 
  1088  079C                     	;# 
  1089  079D                     	;# 
  1090  079E                     	;# 
  1091  079E                     	;# 
  1092  0F8C                     	;# 
  1093  0F8D                     	;# 
  1094  0F91                     	;# 
  1095  0F96                     	;# 
  1096  0F97                     	;# 
  1097  0F9C                     	;# 
  1098  0F9D                     	;# 
  1099  0F9E                     	;# 
  1100  0FE3                     	;# 
  1101  0FE4                     	;# 
  1102  0FE5                     	;# 
  1103  0FE6                     	;# 
  1104  0FE7                     	;# 
  1105  0FE8                     	;# 
  1106  0FE9                     	;# 
  1107  0FEA                     	;# 
  1108  0FEB                     	;# 
  1109  0FED                     	;# 
  1110  0FEE                     	;# 
  1111  0FEF                     	;# 
  1112  0000                     	;# 
  1113  0001                     	;# 
  1114  0002                     	;# 
  1115  0003                     	;# 
  1116  0004                     	;# 
  1117  0005                     	;# 
  1118  0006                     	;# 
  1119  0007                     	;# 
  1120  0008                     	;# 
  1121  0009                     	;# 
  1122  000A                     	;# 
  1123  000B                     	;# 
  1124  000C                     	;# 
  1125  000D                     	;# 
  1126  000E                     	;# 
  1127  0011                     	;# 
  1128  0012                     	;# 
  1129  0015                     	;# 
  1130  0016                     	;# 
  1131  0016                     	;# 
  1132  0017                     	;# 
  1133  0018                     	;# 
  1134  0019                     	;# 
  1135  001A                     	;# 
  1136  001B                     	;# 
  1137  001C                     	;# 
  1138  008C                     	;# 
  1139  008D                     	;# 
  1140  008E                     	;# 
  1141  0091                     	;# 
  1142  0092                     	;# 
  1143  0095                     	;# 
  1144  0096                     	;# 
  1145  0097                     	;# 
  1146  0099                     	;# 
  1147  009A                     	;# 
  1148  009B                     	;# 
  1149  009B                     	;# 
  1150  009C                     	;# 
  1151  009D                     	;# 
  1152  009E                     	;# 
  1153  009F                     	;# 
  1154  010C                     	;# 
  1155  010D                     	;# 
  1156  010E                     	;# 
  1157  0116                     	;# 
  1158  0117                     	;# 
  1159  011D                     	;# 
  1160  018C                     	;# 
  1161  018D                     	;# 
  1162  018E                     	;# 
  1163  0191                     	;# 
  1164  0191                     	;# 
  1165  0192                     	;# 
  1166  0193                     	;# 
  1167  0193                     	;# 
  1168  0194                     	;# 
  1169  0195                     	;# 
  1170  0196                     	;# 
  1171  0199                     	;# 
  1172  019A                     	;# 
  1173  019B                     	;# 
  1174  019B                     	;# 
  1175  019C                     	;# 
  1176  019D                     	;# 
  1177  019E                     	;# 
  1178  019F                     	;# 
  1179  020C                     	;# 
  1180  020D                     	;# 
  1181  0211                     	;# 
  1182  0211                     	;# 
  1183  0212                     	;# 
  1184  0212                     	;# 
  1185  0213                     	;# 
  1186  0213                     	;# 
  1187  0214                     	;# 
  1188  0214                     	;# 
  1189  0215                     	;# 
  1190  0215                     	;# 
  1191  0215                     	;# 
  1192  0216                     	;# 
  1193  0216                     	;# 
  1194  0217                     	;# 
  1195  0217                     	;# 
  1196  0391                     	;# 
  1197  0392                     	;# 
  1198  0393                     	;# 
  1199  0394                     	;# 
  1200  0395                     	;# 
  1201  0396                     	;# 
  1202  0611                     	;# 
  1203  0612                     	;# 
  1204  0613                     	;# 
  1205  0613                     	;# 
  1206  0614                     	;# 
  1207  0615                     	;# 
  1208  0616                     	;# 
  1209  0616                     	;# 
  1210  0711                     	;# 
  1211  0711                     	;# 
  1212  0711                     	;# 
  1213  0712                     	;# 
  1214  0712                     	;# 
  1215  0713                     	;# 
  1216  0713                     	;# 
  1217  0713                     	;# 
  1218  0714                     	;# 
  1219  0714                     	;# 
  1220  0714                     	;# 
  1221  0715                     	;# 
  1222  0715                     	;# 
  1223  0716                     	;# 
  1224  0716                     	;# 
  1225  0716                     	;# 
  1226  0716                     	;# 
  1227  0717                     	;# 
  1228  0717                     	;# 
  1229  0717                     	;# 
  1230  0717                     	;# 
  1231  0718                     	;# 
  1232  0718                     	;# 
  1233  0718                     	;# 
  1234  0719                     	;# 
  1235  0719                     	;# 
  1236  0719                     	;# 
  1237  0719                     	;# 
  1238  071A                     	;# 
  1239  071A                     	;# 
  1240  071A                     	;# 
  1241  071A                     	;# 
  1242  071A                     	;# 
  1243  071B                     	;# 
  1244  071B                     	;# 
  1245  071C                     	;# 
  1246  071C                     	;# 
  1247  071C                     	;# 
  1248  071C                     	;# 
  1249  071C                     	;# 
  1250  071D                     	;# 
  1251  071D                     	;# 
  1252  071E                     	;# 
  1253  071E                     	;# 
  1254  0791                     	;# 
  1255  0791                     	;# 
  1256  0793                     	;# 
  1257  0793                     	;# 
  1258  0794                     	;# 
  1259  0794                     	;# 
  1260  0796                     	;# 
  1261  0796                     	;# 
  1262  0796                     	;# 
  1263  0797                     	;# 
  1264  0797                     	;# 
  1265  0797                     	;# 
  1266  0798                     	;# 
  1267  0798                     	;# 
  1268  0799                     	;# 
  1269  0799                     	;# 
  1270  0799                     	;# 
  1271  079A                     	;# 
  1272  079A                     	;# 
  1273  079A                     	;# 
  1274  079B                     	;# 
  1275  079C                     	;# 
  1276  079C                     	;# 
  1277  079C                     	;# 
  1278  079D                     	;# 
  1279  079E                     	;# 
  1280  079E                     	;# 
  1281  0F8C                     	;# 
  1282  0F8D                     	;# 
  1283  0F91                     	;# 
  1284  0F96                     	;# 
  1285  0F97                     	;# 
  1286  0F9C                     	;# 
  1287  0F9D                     	;# 
  1288  0F9E                     	;# 
  1289  0FE3                     	;# 
  1290  0FE4                     	;# 
  1291  0FE5                     	;# 
  1292  0FE6                     	;# 
  1293  0FE7                     	;# 
  1294  0FE8                     	;# 
  1295  0FE9                     	;# 
  1296  0FEA                     	;# 
  1297  0FEB                     	;# 
  1298  0FED                     	;# 
  1299  0FEE                     	;# 
  1300  0FEF                     	;# 
  1301  0000                     	;# 
  1302  0001                     	;# 
  1303  0002                     	;# 
  1304  0003                     	;# 
  1305  0004                     	;# 
  1306  0005                     	;# 
  1307  0006                     	;# 
  1308  0007                     	;# 
  1309  0008                     	;# 
  1310  0009                     	;# 
  1311  000A                     	;# 
  1312  000B                     	;# 
  1313  000C                     	;# 
  1314  000D                     	;# 
  1315  000E                     	;# 
  1316  0011                     	;# 
  1317  0012                     	;# 
  1318  0015                     	;# 
  1319  0016                     	;# 
  1320  0016                     	;# 
  1321  0017                     	;# 
  1322  0018                     	;# 
  1323  0019                     	;# 
  1324  001A                     	;# 
  1325  001B                     	;# 
  1326  001C                     	;# 
  1327  008C                     	;# 
  1328  008D                     	;# 
  1329  008E                     	;# 
  1330  0091                     	;# 
  1331  0092                     	;# 
  1332  0095                     	;# 
  1333  0096                     	;# 
  1334  0097                     	;# 
  1335  0099                     	;# 
  1336  009A                     	;# 
  1337  009B                     	;# 
  1338  009B                     	;# 
  1339  009C                     	;# 
  1340  009D                     	;# 
  1341  009E                     	;# 
  1342  009F                     	;# 
  1343  010C                     	;# 
  1344  010D                     	;# 
  1345  010E                     	;# 
  1346  0116                     	;# 
  1347  0117                     	;# 
  1348  011D                     	;# 
  1349  018C                     	;# 
  1350  018D                     	;# 
  1351  018E                     	;# 
  1352  0191                     	;# 
  1353  0191                     	;# 
  1354  0192                     	;# 
  1355  0193                     	;# 
  1356  0193                     	;# 
  1357  0194                     	;# 
  1358  0195                     	;# 
  1359  0196                     	;# 
  1360  0199                     	;# 
  1361  019A                     	;# 
  1362  019B                     	;# 
  1363  019B                     	;# 
  1364  019C                     	;# 
  1365  019D                     	;# 
  1366  019E                     	;# 
  1367  019F                     	;# 
  1368  020C                     	;# 
  1369  020D                     	;# 
  1370  0211                     	;# 
  1371  0211                     	;# 
  1372  0212                     	;# 
  1373  0212                     	;# 
  1374  0213                     	;# 
  1375  0213                     	;# 
  1376  0214                     	;# 
  1377  0214                     	;# 
  1378  0215                     	;# 
  1379  0215                     	;# 
  1380  0215                     	;# 
  1381  0216                     	;# 
  1382  0216                     	;# 
  1383  0217                     	;# 
  1384  0217                     	;# 
  1385  0391                     	;# 
  1386  0392                     	;# 
  1387  0393                     	;# 
  1388  0394                     	;# 
  1389  0395                     	;# 
  1390  0396                     	;# 
  1391  0611                     	;# 
  1392  0612                     	;# 
  1393  0613                     	;# 
  1394  0613                     	;# 
  1395  0614                     	;# 
  1396  0615                     	;# 
  1397  0616                     	;# 
  1398  0616                     	;# 
  1399  0711                     	;# 
  1400  0711                     	;# 
  1401  0711                     	;# 
  1402  0712                     	;# 
  1403  0712                     	;# 
  1404  0713                     	;# 
  1405  0713                     	;# 
  1406  0713                     	;# 
  1407  0714                     	;# 
  1408  0714                     	;# 
  1409  0714                     	;# 
  1410  0715                     	;# 
  1411  0715                     	;# 
  1412  0716                     	;# 
  1413  0716                     	;# 
  1414  0716                     	;# 
  1415  0716                     	;# 
  1416  0717                     	;# 
  1417  0717                     	;# 
  1418  0717                     	;# 
  1419  0717                     	;# 
  1420  0718                     	;# 
  1421  0718                     	;# 
  1422  0718                     	;# 
  1423  0719                     	;# 
  1424  0719                     	;# 
  1425  0719                     	;# 
  1426  0719                     	;# 
  1427  071A                     	;# 
  1428  071A                     	;# 
  1429  071A                     	;# 
  1430  071A                     	;# 
  1431  071A                     	;# 
  1432  071B                     	;# 
  1433  071B                     	;# 
  1434  071C                     	;# 
  1435  071C                     	;# 
  1436  071C                     	;# 
  1437  071C                     	;# 
  1438  071C                     	;# 
  1439  071D                     	;# 
  1440  071D                     	;# 
  1441  071E                     	;# 
  1442  071E                     	;# 
  1443  0791                     	;# 
  1444  0791                     	;# 
  1445  0793                     	;# 
  1446  0793                     	;# 
  1447  0794                     	;# 
  1448  0794                     	;# 
  1449  0796                     	;# 
  1450  0796                     	;# 
  1451  0796                     	;# 
  1452  0797                     	;# 
  1453  0797                     	;# 
  1454  0797                     	;# 
  1455  0798                     	;# 
  1456  0798                     	;# 
  1457  0799                     	;# 
  1458  0799                     	;# 
  1459  0799                     	;# 
  1460  079A                     	;# 
  1461  079A                     	;# 
  1462  079A                     	;# 
  1463  079B                     	;# 
  1464  079C                     	;# 
  1465  079C                     	;# 
  1466  079C                     	;# 
  1467  079D                     	;# 
  1468  079E                     	;# 
  1469  079E                     	;# 
  1470  0F8C                     	;# 
  1471  0F8D                     	;# 
  1472  0F91                     	;# 
  1473  0F96                     	;# 
  1474  0F97                     	;# 
  1475  0F9C                     	;# 
  1476  0F9D                     	;# 
  1477  0F9E                     	;# 
  1478  0FE3                     	;# 
  1479  0FE4                     	;# 
  1480  0FE5                     	;# 
  1481  0FE6                     	;# 
  1482  0FE7                     	;# 
  1483  0FE8                     	;# 
  1484  0FE9                     	;# 
  1485  0FEA                     	;# 
  1486  0FEB                     	;# 
  1487  0FED                     	;# 
  1488  0FEE                     	;# 
  1489  0FEF                     	;# 
  1490  0000                     	;# 
  1491  0001                     	;# 
  1492  0002                     	;# 
  1493  0003                     	;# 
  1494  0004                     	;# 
  1495  0005                     	;# 
  1496  0006                     	;# 
  1497  0007                     	;# 
  1498  0008                     	;# 
  1499  0009                     	;# 
  1500  000A                     	;# 
  1501  000B                     	;# 
  1502  000C                     	;# 
  1503  000D                     	;# 
  1504  000E                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0015                     	;# 
  1508  0016                     	;# 
  1509  0016                     	;# 
  1510  0017                     	;# 
  1511  0018                     	;# 
  1512  0019                     	;# 
  1513  001A                     	;# 
  1514  001B                     	;# 
  1515  001C                     	;# 
  1516  008C                     	;# 
  1517  008D                     	;# 
  1518  008E                     	;# 
  1519  0091                     	;# 
  1520  0092                     	;# 
  1521  0095                     	;# 
  1522  0096                     	;# 
  1523  0097                     	;# 
  1524  0099                     	;# 
  1525  009A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  009F                     	;# 
  1532  010C                     	;# 
  1533  010D                     	;# 
  1534  010E                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  011D                     	;# 
  1538  018C                     	;# 
  1539  018D                     	;# 
  1540  018E                     	;# 
  1541  0191                     	;# 
  1542  0191                     	;# 
  1543  0192                     	;# 
  1544  0193                     	;# 
  1545  0193                     	;# 
  1546  0194                     	;# 
  1547  0195                     	;# 
  1548  0196                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019C                     	;# 
  1554  019D                     	;# 
  1555  019E                     	;# 
  1556  019F                     	;# 
  1557  020C                     	;# 
  1558  020D                     	;# 
  1559  0211                     	;# 
  1560  0211                     	;# 
  1561  0212                     	;# 
  1562  0212                     	;# 
  1563  0213                     	;# 
  1564  0213                     	;# 
  1565  0214                     	;# 
  1566  0214                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0216                     	;# 
  1571  0216                     	;# 
  1572  0217                     	;# 
  1573  0217                     	;# 
  1574  0391                     	;# 
  1575  0392                     	;# 
  1576  0393                     	;# 
  1577  0394                     	;# 
  1578  0395                     	;# 
  1579  0396                     	;# 
  1580  0611                     	;# 
  1581  0612                     	;# 
  1582  0613                     	;# 
  1583  0613                     	;# 
  1584  0614                     	;# 
  1585  0615                     	;# 
  1586  0616                     	;# 
  1587  0616                     	;# 
  1588  0711                     	;# 
  1589  0711                     	;# 
  1590  0711                     	;# 
  1591  0712                     	;# 
  1592  0712                     	;# 
  1593  0713                     	;# 
  1594  0713                     	;# 
  1595  0713                     	;# 
  1596  0714                     	;# 
  1597  0714                     	;# 
  1598  0714                     	;# 
  1599  0715                     	;# 
  1600  0715                     	;# 
  1601  0716                     	;# 
  1602  0716                     	;# 
  1603  0716                     	;# 
  1604  0716                     	;# 
  1605  0717                     	;# 
  1606  0717                     	;# 
  1607  0717                     	;# 
  1608  0717                     	;# 
  1609  0718                     	;# 
  1610  0718                     	;# 
  1611  0718                     	;# 
  1612  0719                     	;# 
  1613  0719                     	;# 
  1614  0719                     	;# 
  1615  0719                     	;# 
  1616  071A                     	;# 
  1617  071A                     	;# 
  1618  071A                     	;# 
  1619  071A                     	;# 
  1620  071A                     	;# 
  1621  071B                     	;# 
  1622  071B                     	;# 
  1623  071C                     	;# 
  1624  071C                     	;# 
  1625  071C                     	;# 
  1626  071C                     	;# 
  1627  071C                     	;# 
  1628  071D                     	;# 
  1629  071D                     	;# 
  1630  071E                     	;# 
  1631  071E                     	;# 
  1632  0791                     	;# 
  1633  0791                     	;# 
  1634  0793                     	;# 
  1635  0793                     	;# 
  1636  0794                     	;# 
  1637  0794                     	;# 
  1638  0796                     	;# 
  1639  0796                     	;# 
  1640  0796                     	;# 
  1641  0797                     	;# 
  1642  0797                     	;# 
  1643  0797                     	;# 
  1644  0798                     	;# 
  1645  0798                     	;# 
  1646  0799                     	;# 
  1647  0799                     	;# 
  1648  0799                     	;# 
  1649  079A                     	;# 
  1650  079A                     	;# 
  1651  079A                     	;# 
  1652  079B                     	;# 
  1653  079C                     	;# 
  1654  079C                     	;# 
  1655  079C                     	;# 
  1656  079D                     	;# 
  1657  079E                     	;# 
  1658  079E                     	;# 
  1659  0F8C                     	;# 
  1660  0F8D                     	;# 
  1661  0F91                     	;# 
  1662  0F96                     	;# 
  1663  0F97                     	;# 
  1664  0F9C                     	;# 
  1665  0F9D                     	;# 
  1666  0F9E                     	;# 
  1667  0FE3                     	;# 
  1668  0FE4                     	;# 
  1669  0FE5                     	;# 
  1670  0FE6                     	;# 
  1671  0FE7                     	;# 
  1672  0FE8                     	;# 
  1673  0FE9                     	;# 
  1674  0FEA                     	;# 
  1675  0FEB                     	;# 
  1676  0FED                     	;# 
  1677  0FEE                     	;# 
  1678  0FEF                     	;# 
  1679  0000                     	;# 
  1680  0001                     	;# 
  1681  0002                     	;# 
  1682  0003                     	;# 
  1683  0004                     	;# 
  1684  0005                     	;# 
  1685  0006                     	;# 
  1686  0007                     	;# 
  1687  0008                     	;# 
  1688  0009                     	;# 
  1689  000A                     	;# 
  1690  000B                     	;# 
  1691  000C                     	;# 
  1692  000D                     	;# 
  1693  000E                     	;# 
  1694  0011                     	;# 
  1695  0012                     	;# 
  1696  0015                     	;# 
  1697  0016                     	;# 
  1698  0016                     	;# 
  1699  0017                     	;# 
  1700  0018                     	;# 
  1701  0019                     	;# 
  1702  001A                     	;# 
  1703  001B                     	;# 
  1704  001C                     	;# 
  1705  008C                     	;# 
  1706  008D                     	;# 
  1707  008E                     	;# 
  1708  0091                     	;# 
  1709  0092                     	;# 
  1710  0095                     	;# 
  1711  0096                     	;# 
  1712  0097                     	;# 
  1713  0099                     	;# 
  1714  009A                     	;# 
  1715  009B                     	;# 
  1716  009B                     	;# 
  1717  009C                     	;# 
  1718  009D                     	;# 
  1719  009E                     	;# 
  1720  009F                     	;# 
  1721  010C                     	;# 
  1722  010D                     	;# 
  1723  010E                     	;# 
  1724  0116                     	;# 
  1725  0117                     	;# 
  1726  011D                     	;# 
  1727  018C                     	;# 
  1728  018D                     	;# 
  1729  018E                     	;# 
  1730  0191                     	;# 
  1731  0191                     	;# 
  1732  0192                     	;# 
  1733  0193                     	;# 
  1734  0193                     	;# 
  1735  0194                     	;# 
  1736  0195                     	;# 
  1737  0196                     	;# 
  1738  0199                     	;# 
  1739  019A                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019C                     	;# 
  1743  019D                     	;# 
  1744  019E                     	;# 
  1745  019F                     	;# 
  1746  020C                     	;# 
  1747  020D                     	;# 
  1748  0211                     	;# 
  1749  0211                     	;# 
  1750  0212                     	;# 
  1751  0212                     	;# 
  1752  0213                     	;# 
  1753  0213                     	;# 
  1754  0214                     	;# 
  1755  0214                     	;# 
  1756  0215                     	;# 
  1757  0215                     	;# 
  1758  0215                     	;# 
  1759  0216                     	;# 
  1760  0216                     	;# 
  1761  0217                     	;# 
  1762  0217                     	;# 
  1763  0391                     	;# 
  1764  0392                     	;# 
  1765  0393                     	;# 
  1766  0394                     	;# 
  1767  0395                     	;# 
  1768  0396                     	;# 
  1769  0611                     	;# 
  1770  0612                     	;# 
  1771  0613                     	;# 
  1772  0613                     	;# 
  1773  0614                     	;# 
  1774  0615                     	;# 
  1775  0616                     	;# 
  1776  0616                     	;# 
  1777  0711                     	;# 
  1778  0711                     	;# 
  1779  0711                     	;# 
  1780  0712                     	;# 
  1781  0712                     	;# 
  1782  0713                     	;# 
  1783  0713                     	;# 
  1784  0713                     	;# 
  1785  0714                     	;# 
  1786  0714                     	;# 
  1787  0714                     	;# 
  1788  0715                     	;# 
  1789  0715                     	;# 
  1790  0716                     	;# 
  1791  0716                     	;# 
  1792  0716                     	;# 
  1793  0716                     	;# 
  1794  0717                     	;# 
  1795  0717                     	;# 
  1796  0717                     	;# 
  1797  0717                     	;# 
  1798  0718                     	;# 
  1799  0718                     	;# 
  1800  0718                     	;# 
  1801  0719                     	;# 
  1802  0719                     	;# 
  1803  0719                     	;# 
  1804  0719                     	;# 
  1805  071A                     	;# 
  1806  071A                     	;# 
  1807  071A                     	;# 
  1808  071A                     	;# 
  1809  071A                     	;# 
  1810  071B                     	;# 
  1811  071B                     	;# 
  1812  071C                     	;# 
  1813  071C                     	;# 
  1814  071C                     	;# 
  1815  071C                     	;# 
  1816  071C                     	;# 
  1817  071D                     	;# 
  1818  071D                     	;# 
  1819  071E                     	;# 
  1820  071E                     	;# 
  1821  0791                     	;# 
  1822  0791                     	;# 
  1823  0793                     	;# 
  1824  0793                     	;# 
  1825  0794                     	;# 
  1826  0794                     	;# 
  1827  0796                     	;# 
  1828  0796                     	;# 
  1829  0796                     	;# 
  1830  0797                     	;# 
  1831  0797                     	;# 
  1832  0797                     	;# 
  1833  0798                     	;# 
  1834  0798                     	;# 
  1835  0799                     	;# 
  1836  0799                     	;# 
  1837  0799                     	;# 
  1838  079A                     	;# 
  1839  079A                     	;# 
  1840  079A                     	;# 
  1841  079B                     	;# 
  1842  079C                     	;# 
  1843  079C                     	;# 
  1844  079C                     	;# 
  1845  079D                     	;# 
  1846  079E                     	;# 
  1847  079E                     	;# 
  1848  0F8C                     	;# 
  1849  0F8D                     	;# 
  1850  0F91                     	;# 
  1851  0F96                     	;# 
  1852  0F97                     	;# 
  1853  0F9C                     	;# 
  1854  0F9D                     	;# 
  1855  0F9E                     	;# 
  1856  0FE3                     	;# 
  1857  0FE4                     	;# 
  1858  0FE5                     	;# 
  1859  0FE6                     	;# 
  1860  0FE7                     	;# 
  1861  0FE8                     	;# 
  1862  0FE9                     	;# 
  1863  0FEA                     	;# 
  1864  0FEB                     	;# 
  1865  0FED                     	;# 
  1866  0FEE                     	;# 
  1867  0FEF                     	;# 
  1868  0000                     	;# 
  1869  0001                     	;# 
  1870  0002                     	;# 
  1871  0003                     	;# 
  1872  0004                     	;# 
  1873  0005                     	;# 
  1874  0006                     	;# 
  1875  0007                     	;# 
  1876  0008                     	;# 
  1877  0009                     	;# 
  1878  000A                     	;# 
  1879  000B                     	;# 
  1880  000C                     	;# 
  1881  000D                     	;# 
  1882  000E                     	;# 
  1883  0011                     	;# 
  1884  0012                     	;# 
  1885  0015                     	;# 
  1886  0016                     	;# 
  1887  0016                     	;# 
  1888  0017                     	;# 
  1889  0018                     	;# 
  1890  0019                     	;# 
  1891  001A                     	;# 
  1892  001B                     	;# 
  1893  001C                     	;# 
  1894  008C                     	;# 
  1895  008D                     	;# 
  1896  008E                     	;# 
  1897  0091                     	;# 
  1898  0092                     	;# 
  1899  0095                     	;# 
  1900  0096                     	;# 
  1901  0097                     	;# 
  1902  0099                     	;# 
  1903  009A                     	;# 
  1904  009B                     	;# 
  1905  009B                     	;# 
  1906  009C                     	;# 
  1907  009D                     	;# 
  1908  009E                     	;# 
  1909  009F                     	;# 
  1910  010C                     	;# 
  1911  010D                     	;# 
  1912  010E                     	;# 
  1913  0116                     	;# 
  1914  0117                     	;# 
  1915  011D                     	;# 
  1916  018C                     	;# 
  1917  018D                     	;# 
  1918  018E                     	;# 
  1919  0191                     	;# 
  1920  0191                     	;# 
  1921  0192                     	;# 
  1922  0193                     	;# 
  1923  0193                     	;# 
  1924  0194                     	;# 
  1925  0195                     	;# 
  1926  0196                     	;# 
  1927  0199                     	;# 
  1928  019A                     	;# 
  1929  019B                     	;# 
  1930  019B                     	;# 
  1931  019C                     	;# 
  1932  019D                     	;# 
  1933  019E                     	;# 
  1934  019F                     	;# 
  1935  020C                     	;# 
  1936  020D                     	;# 
  1937  0211                     	;# 
  1938  0211                     	;# 
  1939  0212                     	;# 
  1940  0212                     	;# 
  1941  0213                     	;# 
  1942  0213                     	;# 
  1943  0214                     	;# 
  1944  0214                     	;# 
  1945  0215                     	;# 
  1946  0215                     	;# 
  1947  0215                     	;# 
  1948  0216                     	;# 
  1949  0216                     	;# 
  1950  0217                     	;# 
  1951  0217                     	;# 
  1952  0391                     	;# 
  1953  0392                     	;# 
  1954  0393                     	;# 
  1955  0394                     	;# 
  1956  0395                     	;# 
  1957  0396                     	;# 
  1958  0611                     	;# 
  1959  0612                     	;# 
  1960  0613                     	;# 
  1961  0613                     	;# 
  1962  0614                     	;# 
  1963  0615                     	;# 
  1964  0616                     	;# 
  1965  0616                     	;# 
  1966  0711                     	;# 
  1967  0711                     	;# 
  1968  0711                     	;# 
  1969  0712                     	;# 
  1970  0712                     	;# 
  1971  0713                     	;# 
  1972  0713                     	;# 
  1973  0713                     	;# 
  1974  0714                     	;# 
  1975  0714                     	;# 
  1976  0714                     	;# 
  1977  0715                     	;# 
  1978  0715                     	;# 
  1979  0716                     	;# 
  1980  0716                     	;# 
  1981  0716                     	;# 
  1982  0716                     	;# 
  1983  0717                     	;# 
  1984  0717                     	;# 
  1985  0717                     	;# 
  1986  0717                     	;# 
  1987  0718                     	;# 
  1988  0718                     	;# 
  1989  0718                     	;# 
  1990  0719                     	;# 
  1991  0719                     	;# 
  1992  0719                     	;# 
  1993  0719                     	;# 
  1994  071A                     	;# 
  1995  071A                     	;# 
  1996  071A                     	;# 
  1997  071A                     	;# 
  1998  071A                     	;# 
  1999  071B                     	;# 
  2000  071B                     	;# 
  2001  071C                     	;# 
  2002  071C                     	;# 
  2003  071C                     	;# 
  2004  071C                     	;# 
  2005  071C                     	;# 
  2006  071D                     	;# 
  2007  071D                     	;# 
  2008  071E                     	;# 
  2009  071E                     	;# 
  2010  0791                     	;# 
  2011  0791                     	;# 
  2012  0793                     	;# 
  2013  0793                     	;# 
  2014  0794                     	;# 
  2015  0794                     	;# 
  2016  0796                     	;# 
  2017  0796                     	;# 
  2018  0796                     	;# 
  2019  0797                     	;# 
  2020  0797                     	;# 
  2021  0797                     	;# 
  2022  0798                     	;# 
  2023  0798                     	;# 
  2024  0799                     	;# 
  2025  0799                     	;# 
  2026  0799                     	;# 
  2027  079A                     	;# 
  2028  079A                     	;# 
  2029  079A                     	;# 
  2030  079B                     	;# 
  2031  079C                     	;# 
  2032  079C                     	;# 
  2033  079C                     	;# 
  2034  079D                     	;# 
  2035  079E                     	;# 
  2036  079E                     	;# 
  2037  0F8C                     	;# 
  2038  0F8D                     	;# 
  2039  0F91                     	;# 
  2040  0F96                     	;# 
  2041  0F97                     	;# 
  2042  0F9C                     	;# 
  2043  0F9D                     	;# 
  2044  0F9E                     	;# 
  2045  0FE3                     	;# 
  2046  0FE4                     	;# 
  2047  0FE5                     	;# 
  2048  0FE6                     	;# 
  2049  0FE7                     	;# 
  2050  0FE8                     	;# 
  2051  0FE9                     	;# 
  2052  0FEA                     	;# 
  2053  0FEB                     	;# 
  2054  0FED                     	;# 
  2055  0FEE                     	;# 
  2056  0FEF                     	;# 
  2057  0000                     	;# 
  2058  0001                     	;# 
  2059  0002                     	;# 
  2060  0003                     	;# 
  2061  0004                     	;# 
  2062  0005                     	;# 
  2063  0006                     	;# 
  2064  0007                     	;# 
  2065  0008                     	;# 
  2066  0009                     	;# 
  2067  000A                     	;# 
  2068  000B                     	;# 
  2069  000C                     	;# 
  2070  000D                     	;# 
  2071  000E                     	;# 
  2072  0011                     	;# 
  2073  0012                     	;# 
  2074  0015                     	;# 
  2075  0016                     	;# 
  2076  0016                     	;# 
  2077  0017                     	;# 
  2078  0018                     	;# 
  2079  0019                     	;# 
  2080  001A                     	;# 
  2081  001B                     	;# 
  2082  001C                     	;# 
  2083  008C                     	;# 
  2084  008D                     	;# 
  2085  008E                     	;# 
  2086  0091                     	;# 
  2087  0092                     	;# 
  2088  0095                     	;# 
  2089  0096                     	;# 
  2090  0097                     	;# 
  2091  0099                     	;# 
  2092  009A                     	;# 
  2093  009B                     	;# 
  2094  009B                     	;# 
  2095  009C                     	;# 
  2096  009D                     	;# 
  2097  009E                     	;# 
  2098  009F                     	;# 
  2099  010C                     	;# 
  2100  010D                     	;# 
  2101  010E                     	;# 
  2102  0116                     	;# 
  2103  0117                     	;# 
  2104  011D                     	;# 
  2105  018C                     	;# 
  2106  018D                     	;# 
  2107  018E                     	;# 
  2108  0191                     	;# 
  2109  0191                     	;# 
  2110  0192                     	;# 
  2111  0193                     	;# 
  2112  0193                     	;# 
  2113  0194                     	;# 
  2114  0195                     	;# 
  2115  0196                     	;# 
  2116  0199                     	;# 
  2117  019A                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019C                     	;# 
  2121  019D                     	;# 
  2122  019E                     	;# 
  2123  019F                     	;# 
  2124  020C                     	;# 
  2125  020D                     	;# 
  2126  0211                     	;# 
  2127  0211                     	;# 
  2128  0212                     	;# 
  2129  0212                     	;# 
  2130  0213                     	;# 
  2131  0213                     	;# 
  2132  0214                     	;# 
  2133  0214                     	;# 
  2134  0215                     	;# 
  2135  0215                     	;# 
  2136  0215                     	;# 
  2137  0216                     	;# 
  2138  0216                     	;# 
  2139  0217                     	;# 
  2140  0217                     	;# 
  2141  0391                     	;# 
  2142  0392                     	;# 
  2143  0393                     	;# 
  2144  0394                     	;# 
  2145  0395                     	;# 
  2146  0396                     	;# 
  2147  0611                     	;# 
  2148  0612                     	;# 
  2149  0613                     	;# 
  2150  0613                     	;# 
  2151  0614                     	;# 
  2152  0615                     	;# 
  2153  0616                     	;# 
  2154  0616                     	;# 
  2155  0711                     	;# 
  2156  0711                     	;# 
  2157  0711                     	;# 
  2158  0712                     	;# 
  2159  0712                     	;# 
  2160  0713                     	;# 
  2161  0713                     	;# 
  2162  0713                     	;# 
  2163  0714                     	;# 
  2164  0714                     	;# 
  2165  0714                     	;# 
  2166  0715                     	;# 
  2167  0715                     	;# 
  2168  0716                     	;# 
  2169  0716                     	;# 
  2170  0716                     	;# 
  2171  0716                     	;# 
  2172  0717                     	;# 
  2173  0717                     	;# 
  2174  0717                     	;# 
  2175  0717                     	;# 
  2176  0718                     	;# 
  2177  0718                     	;# 
  2178  0718                     	;# 
  2179  0719                     	;# 
  2180  0719                     	;# 
  2181  0719                     	;# 
  2182  0719                     	;# 
  2183  071A                     	;# 
  2184  071A                     	;# 
  2185  071A                     	;# 
  2186  071A                     	;# 
  2187  071A                     	;# 
  2188  071B                     	;# 
  2189  071B                     	;# 
  2190  071C                     	;# 
  2191  071C                     	;# 
  2192  071C                     	;# 
  2193  071C                     	;# 
  2194  071C                     	;# 
  2195  071D                     	;# 
  2196  071D                     	;# 
  2197  071E                     	;# 
  2198  071E                     	;# 
  2199  0791                     	;# 
  2200  0791                     	;# 
  2201  0793                     	;# 
  2202  0793                     	;# 
  2203  0794                     	;# 
  2204  0794                     	;# 
  2205  0796                     	;# 
  2206  0796                     	;# 
  2207  0796                     	;# 
  2208  0797                     	;# 
  2209  0797                     	;# 
  2210  0797                     	;# 
  2211  0798                     	;# 
  2212  0798                     	;# 
  2213  0799                     	;# 
  2214  0799                     	;# 
  2215  0799                     	;# 
  2216  079A                     	;# 
  2217  079A                     	;# 
  2218  079A                     	;# 
  2219  079B                     	;# 
  2220  079C                     	;# 
  2221  079C                     	;# 
  2222  079C                     	;# 
  2223  079D                     	;# 
  2224  079E                     	;# 
  2225  079E                     	;# 
  2226  0F8C                     	;# 
  2227  0F8D                     	;# 
  2228  0F91                     	;# 
  2229  0F96                     	;# 
  2230  0F97                     	;# 
  2231  0F9C                     	;# 
  2232  0F9D                     	;# 
  2233  0F9E                     	;# 
  2234  0FE3                     	;# 
  2235  0FE4                     	;# 
  2236  0FE5                     	;# 
  2237  0FE6                     	;# 
  2238  0FE7                     	;# 
  2239  0FE8                     	;# 
  2240  0FE9                     	;# 
  2241  0FEA                     	;# 
  2242  0FEB                     	;# 
  2243  0FED                     	;# 
  2244  0FEE                     	;# 
  2245  0FEF                     	;# 
  2246                           
  2247                           	psect	idataBANK0
  2248  15C9                     __pidataBANK0:	
  2249                           
  2250                           ;initializer for _callback_notPressed
  2251  15C9  34B8               	retlw	low _Button_DefaultCallback
  2252  15CA  3415               	retlw	high _Button_DefaultCallback
  2253                           
  2254                           ;initializer for _sample_period
  2255  15CB  34AE               	retlw	174
  2256                           
  2257                           	psect	idataBANK1
  2258  086B                     __pidataBANK1:	
  2259                           
  2260                           ;initializer for _Button_StateMachine
  2261  086B  34B4               	retlw	low _Button_State_Initializing
  2262  086C  340D               	retlw	high _Button_State_Initializing
  2263  086D  34CD               	retlw	low _Button_State_NotPressed
  2264  086E  3405               	retlw	high _Button_State_NotPressed
  2265  086F  3493               	retlw	low _Button_State_Pressed
  2266  0870  3407               	retlw	high _Button_State_Pressed
  2267                           
  2268                           ;initializer for _callback_pressed
  2269  0871  34B8               	retlw	low _Button_DefaultCallback
  2270  0872  3415               	retlw	high _Button_DefaultCallback
  2271                           
  2272                           ;initializer for _callback_sampled
  2273  0873  34B9               	retlw	low _Sensor_DefaultCallback
  2274  0874  3415               	retlw	high _Sensor_DefaultCallback
  2275                           
  2276                           ;initializer for _mtouch_sensor
  2277  0875  3400               	retlw	0
  2278  0876  3469               	retlw	105
  2279  0877  3430               	retlw	48
  2280  0878  3410               	retlw	16
  2281  0879  3420               	retlw	32
  2282  087A  3400               	retlw	0
  2283  087B  3400               	retlw	0
  2284  087C  3400               	retlw	0
  2285  087D  3400               	retlw	0
  2286  087E  3401               	retlw	1
  2287  087F  3435               	retlw	53
  2288  0880  3430               	retlw	48
  2289  0881  3410               	retlw	16
  2290  0882  3420               	retlw	32
  2291  0883  3400               	retlw	0
  2292  0884  3400               	retlw	0
  2293  0885  3400               	retlw	0
  2294  0886  3400               	retlw	0
  2295                           
  2296                           	psect	stringtext1
  2297  180F                     __pstringtext1:	
  2298  180F                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2299  180F  3400               	retlw	0
  2300  1810  340D               	retlw	13
  2301  1811  341C               	retlw	28
  2302  1812  341E               	retlw	30
  2303  1813  3417               	retlw	23
  2304  1814                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2305                           
  2306                           	psect	stringtext2
  2307  182B                     __pstringtext2:	
  2308  182B                     _sensor_scan_group:	
  2309  182B  34D7               	retlw	low ((_mtouch_sensor| 0+9))
  2310  182C  34CE               	retlw	low (_mtouch_sensor| 0)
  2311  182D                     __end_of_sensor_scan_group:	
  2312                           
  2313                           	psect	stringtext3
  2314  1000                     __pstringtext3:	
  2315  1000                     _mtouch_button_init:	
  2316  1000  3400               	retlw	0
  2317  1001  3401               	retlw	1
  2318  1002  3400               	retlw	0
  2319  1003  3400               	retlw	0
  2320  1004  3400               	retlw	0
  2321  1005  3400               	retlw	0
  2322  1006  3400               	retlw	0
  2323  1007  3400               	retlw	0
  2324  1008  3400               	retlw	0
  2325  1009  3400               	retlw	0
  2326  100A  3400               	retlw	0
  2327  100B  3400               	retlw	0
  2328  100C  3400               	retlw	0
  2329  100D  3400               	retlw	0
  2330  100E  3464               	retlw	100
  2331  100F  3401               	retlw	1
  2332  1010  3401               	retlw	1
  2333  1011  3400               	retlw	0
  2334  1012  3400               	retlw	0
  2335  1013  3400               	retlw	0
  2336  1014  3400               	retlw	0
  2337  1015  3400               	retlw	0
  2338  1016  3400               	retlw	0
  2339  1017  3400               	retlw	0
  2340  1018  3400               	retlw	0
  2341  1019  3400               	retlw	0
  2342  101A  3400               	retlw	0
  2343  101B  3400               	retlw	0
  2344  101C  3400               	retlw	0
  2345  101D  3400               	retlw	0
  2346  101E  3464               	retlw	100
  2347  101F  3401               	retlw	1
  2348  1020                     __end_of_mtouch_button_init:	
  2349                           
  2350                           	psect	nvBANK1
  2351  00E0                     __pnvBANK1:	
  2352  00E0                     _EUSART_ErrorHandler:	
  2353  00E0                     	ds	2
  2354  00E2                     _EUSART_OverrunErrorHandler:	
  2355  00E2                     	ds	2
  2356  00E4                     _EUSART_FramingErrorHandler:	
  2357  00E4                     	ds	2
  2358  00E6                     _EUSART_RxDefaultInterruptHandler:	
  2359  00E6                     	ds	2
  2360  00E8                     _EUSART_TxDefaultInterruptHandler:	
  2361  00E8                     	ds	2
  2362  00EA                     _eusartTxBufferRemaining:	
  2363  00EA                     	ds	1
  2364  001C                     _T2CON	set	28
  2365  001A                     _TMR2	set	26
  2366  001B                     _PR2	set	27
  2367  000B                     _INTCONbits	set	11
  2368  0012                     _PIR2bits	set	18
  2369  0011                     _PIR1bits	set	17
  2370  001C                     _T2CONbits	set	28
  2371  005F                     _GIE	set	95
  2372  0095                     _OPTION_REGbits	set	149
  2373  008E                     _TRISC	set	142
  2374  008D                     _TRISB	set	141
  2375  008C                     _TRISA	set	140
  2376  0097                     _WDTCON	set	151
  2377  0099                     _OSCCON	set	153
  2378  0091                     _PIE1bits	set	145
  2379  010E                     _LATCbits	set	270
  2380  010C                     _LATAbits	set	268
  2381  011D                     _APFCON	set	285
  2382  010E                     _LATC	set	270
  2383  010D                     _LATB	set	269
  2384  010C                     _LATA	set	268
  2385  0116                     _BORCON	set	278
  2386  011D                     _APFCONbits	set	285
  2387  018C                     _ANSELA	set	396
  2388  018D                     _ANSELB	set	397
  2389  018E                     _ANSELC	set	398
  2390  0199                     _RCREG	set	409
  2391  019D                     _RCSTAbits	set	413
  2392  019A                     _TXREG	set	410
  2393  019E                     _TXSTAbits	set	414
  2394  019C                     _SPBRGH	set	412
  2395  019B                     _SPBRGL	set	411
  2396  019E                     _TXSTA	set	414
  2397  019D                     _RCSTA	set	413
  2398  019F                     _BAUDCON	set	415
  2399  020C                     _WPUA	set	524
  2400  020D                     _WPUB	set	525
  2401  071A                     _AAD1RES0	set	1818
  2402  0711                     _AD1CON0bits	set	1809
  2403  0714                     _AAD1CON3	set	1812
  2404  0713                     _AD1CON2	set	1811
  2405  0717                     _AD1ACQCON	set	1815
  2406  0716                     _AD1PRECON	set	1814
  2407  0718                     _AAD1GRD	set	1816
  2408  0713                     _AAD1CON2	set	1811
  2409  0719                     _AAD1CAP	set	1817
  2410  0714                     _AD1CON3	set	1812
  2411  0712                     _ADCOMCON	set	1810
  2412  0711                     _AD1CON0	set	1809
  2413  079A                     _AAD2RES0	set	1946
  2414  0791                     _AD2CON0bits	set	1937
  2415  0797                     _AD2ACQCON	set	1943
  2416  0796                     _AD2PRECON	set	1942
  2417  0794                     _AAD2CON3	set	1940
  2418  0798                     _AAD2GRD	set	1944
  2419  0793                     _AD2CON2	set	1939
  2420  0794                     _AD2CON3	set	1940
  2421  0791                     _AD2CON0	set	1937
  2422                           
  2423                           	psect	stringtext4
  2424  1800                     __pstringtext4:	
  2425  1800                     STR_1:	
  2426  1800  3450               	retlw	80	;'P'
  2427  1801  3449               	retlw	73	;'I'
  2428  1802  3443               	retlw	67	;'C'
  2429  1803  3453               	retlw	83	;'S'
  2430  1804  344D               	retlw	77	;'M'
  2431  1805  3441               	retlw	65	;'A'
  2432  1806  3452               	retlw	82	;'R'
  2433  1807  3454               	retlw	84	;'T'
  2434  1808  3400               	retlw	0
  2435                           
  2436                           	psect	stringtext5
  2437  1809                     __pstringtext5:	
  2438  1809                     STR_2:	
  2439  1809  3452               	retlw	82	;'R'
  2440  180A  3455               	retlw	85	;'U'
  2441  180B  344E               	retlw	78	;'N'
  2442  180C  340D               	retlw	13
  2443  180D  340A               	retlw	10
  2444  180E  3400               	retlw	0
  2445                           
  2446                           	psect	stringtext6
  2447  1814                     __pstringtext6:	
  2448  1814                     STR_3:	
  2449  1814  3450               	retlw	80	;'P'
  2450  1815  3449               	retlw	73	;'I'
  2451  1816  3443               	retlw	67	;'C'
  2452  1817  3430               	retlw	48	;'0'
  2453  1818  3400               	retlw	0
  2454                           
  2455                           	psect	stringtext7
  2456  1819                     __pstringtext7:	
  2457  1819                     STR_4:	
  2458  1819  3450               	retlw	80	;'P'
  2459  181A  3449               	retlw	73	;'I'
  2460  181B  3443               	retlw	67	;'C'
  2461  181C  3431               	retlw	49	;'1'
  2462  181D  3400               	retlw	0
  2463                           
  2464                           	psect	stringtext8
  2465  181E                     __pstringtext8:	
  2466  181E                     STR_5:	
  2467  181E  3450               	retlw	80	;'P'
  2468  181F  3449               	retlw	73	;'I'
  2469  1820  3443               	retlw	67	;'C'
  2470  1821  3432               	retlw	50	;'2'
  2471  1822  3400               	retlw	0
  2472                           
  2473                           	psect	stringtext9
  2474  1823                     __pstringtext9:	
  2475  1823                     STR_6:	
  2476  1823  3450               	retlw	80	;'P'
  2477  1824  3449               	retlw	73	;'I'
  2478  1825  3443               	retlw	67	;'C'
  2479  1826  3433               	retlw	51	;'3'
  2480  1827  3400               	retlw	0
  2481                           
  2482                           	psect	stringtext10
  2483  1828                     __pstringtext10:	
  2484  1828                     STR_7:	
  2485  1828  3425               	retlw	37	;'%'
  2486  1829  3463               	retlw	99	;'c'
  2487  182A  3400               	retlw	0
  2488                           
  2489                           	psect	stringtext11
  2490  0000                     __pstringtext11:	
  2491                           
  2492                           ; #config settings
  2493  0000                     
  2494                           	psect	cinit
  2495  0025                     start_initialization:	
  2496  0025                     __initialization:	
  2497                           
  2498                           ; Initialize objects allocated to BANK0
  2499  0025  30C9               	movlw	low __pidataBANK0
  2500  0026  0084               	movwf	4
  2501  0027  3095               	movlw	(high __pidataBANK0)| (0+128)
  2502  0028  0085               	movwf	5
  2503  0029  306C               	movlw	low __pdataBANK0
  2504  002A  0086               	movwf	6
  2505  002B  3000               	movlw	high __pdataBANK0
  2506  002C  0087               	movwf	7
  2507  002D  3003               	movlw	3
  2508  002E  3196  2624  3180   	fcall	init_ram
  2509                           
  2510                           ; Initialize objects allocated to BANK1
  2511  0031  306B               	movlw	low __pidataBANK1
  2512  0032  0084               	movwf	4
  2513  0033  3088               	movlw	(high __pidataBANK1)| (0+128)
  2514  0034  0085               	movwf	5
  2515  0035  30C4               	movlw	low __pdataBANK1
  2516  0036  0086               	movwf	6
  2517  0037  3000               	movlw	high __pdataBANK1
  2518  0038  0087               	movwf	7
  2519  0039  301C               	movlw	28
  2520  003A  3196  2624  3180   	fcall	init_ram
  2521                           
  2522                           ; Clear objects allocated to COMMON
  2523  003D  01FC               	clrf	__pbssCOMMON& (0+127)
  2524                           
  2525                           ; Clear objects allocated to BANK0
  2526  003E  3053               	movlw	low __pbssBANK0
  2527  003F  0084               	movwf	4
  2528  0040  3000               	movlw	high __pbssBANK0
  2529  0041  0085               	movwf	5
  2530  0042  3019               	movlw	25
  2531  0043  3196  261E  3180   	fcall	clear_ram0
  2532                           
  2533                           ; Clear objects allocated to BANK1
  2534  0046  30A0               	movlw	low __pbssBANK1
  2535  0047  0084               	movwf	4
  2536  0048  3000               	movlw	high __pbssBANK1
  2537  0049  0085               	movwf	5
  2538  004A  3024               	movlw	36
  2539  004B  3196  261E  3180   	fcall	clear_ram0
  2540                           
  2541                           ; Clear objects allocated to BANK2
  2542  004E  3020               	movlw	low __pbssBANK2
  2543  004F  0084               	movwf	4
  2544  0050  3001               	movlw	high __pbssBANK2
  2545  0051  0085               	movwf	5
  2546  0052  3040               	movlw	64
  2547  0053  3196  261E         	fcall	clear_ram0
  2548  0055                     end_of_initialization:	
  2549                           ;End of C runtime variable initialization code
  2550                           
  2551  0055                     __end_of__initialization:	
  2552  0055  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2553  0056  0020               	movlb	0
  2554  0057  3180  2859         	ljmp	_main	;jump to C main() function
  2555                           
  2556                           	psect	bssCOMMON
  2557  007C                     __pbssCOMMON:	
  2558  007C                     _eusartRxHead:	
  2559  007C                     	ds	1
  2560                           
  2561                           	psect	bssBANK0
  2562  0053                     __pbssBANK0:	
  2563  0053                     _packet_sample:	
  2564  0053                     	ds	4
  2565  0057                     _width:	
  2566  0057                     	ds	2
  2567  0059                     _last_touch_status:	
  2568  0059                     	ds	2
  2569  005B                     _packet_noise:	
  2570  005B                     	ds	2
  2571  005D                     _update_state_flag:	
  2572  005D                     	ds	1
  2573  005E                     _blink_count:	
  2574  005E                     	ds	1
  2575  005F                     _blink:	
  2576  005F                     	ds	1
  2577  0060                     _check_request:	
  2578  0060                     	ds	1
  2579  0061                     _config_status:	
  2580  0061                     	ds	1
  2581  0062                     _prcData:	
  2582  0062                     	ds	1
  2583  0063                     _rxData:	
  2584  0063                     	ds	1
  2585  0064                     _eusartRxLastError:	
  2586  0064                     	ds	1
  2587  0065                     _eusartRxCount:	
  2588  0065                     	ds	1
  2589  0066                     _eusartRxTail:	
  2590  0066                     	ds	1
  2591  0067                     _eusartTxTail:	
  2592  0067                     	ds	1
  2593  0068                     _eusartTxHead:	
  2594  0068                     	ds	1
  2595  0069                     _sensor_globalFlags:	
  2596  0069                     	ds	1
  2597  006A                     _lowpowerActivated:	
  2598  006A                     	ds	1
  2599  006B                     _mtouch_time_toScan:	
  2600  006B                     	ds	1
  2601                           
  2602                           	psect	dataBANK0
  2603  006C                     __pdataBANK0:	
  2604  006C                     _callback_notPressed:	
  2605  006C                     	ds	2
  2606  006E                     _sample_period:	
  2607  006E                     	ds	1
  2608                           
  2609                           	psect	bssBANK1
  2610  00A0                     __pbssBANK1:	
  2611  00A0                     _eusartRxStatusBuffer:	
  2612  00A0                     	ds	8
  2613  00A8                     _eusartRxBuffer:	
  2614  00A8                     	ds	8
  2615  00B0                     _eusartTxBuffer:	
  2616  00B0                     	ds	8
  2617  00B8                     _timeout_count:	
  2618  00B8                     	ds	4
  2619  00BC                     _nout:	
  2620  00BC                     	ds	2
  2621  00BE                     _prec:	
  2622  00BE                     	ds	2
  2623  00C0                     _flags:	
  2624  00C0                     	ds	2
  2625  00C2                     _count_conf:	
  2626  00C2                     	ds	2
  2627                           
  2628                           	psect	dataBANK1
  2629  00C4                     __pdataBANK1:	
  2630  00C4                     _Button_StateMachine:	
  2631  00C4                     	ds	6
  2632  00CA                     _callback_pressed:	
  2633  00CA                     	ds	2
  2634  00CC                     _callback_sampled:	
  2635  00CC                     	ds	2
  2636  00CE                     _mtouch_sensor:	
  2637  00CE                     	ds	18
  2638                           
  2639                           	psect	bssBANK2
  2640  0120                     __pbssBANK2:	
  2641  0120                     _dbuf:	
  2642  0120                     	ds	32
  2643  0140                     _mtouch_button:	
  2644  0140                     	ds	32
  2645                           
  2646                           	psect	inittext
  2647  1624                     init_ram:	
  2648  1624  00FE               	movwf	126
  2649  1625                     initloop:	
  2650  1625  0012               	moviw fsr0++
  2651  1626  001E               	movwi fsr1++
  2652  1627  0BFE               	decfsz	126,f
  2653  1628  2E25               	goto	initloop
  2654  1629  3400               	retlw	0
  2655                           
  2656                           	psect	clrtext
  2657  161E                     clear_ram0:	
  2658                           ;	Called with FSR0 containing the base address, and
  2659                           ;	WREG with the size to clear
  2660                           
  2661  161E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2662  161F                     clrloop0:	
  2663  161F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2664  1620  3101               	addfsr 0,1
  2665  1621  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2666  1622  2E1F               	goto	clrloop0	;have we reached the end yet?
  2667  1623  3400               	retlw	0	;all done for this memory range, return
  2668                           
  2669                           	psect	cstackBANK1
  2670  00EB                     __pcstackBANK1:	
  2671  00EB                     ??_main:	
  2672                           
  2673                           ; 1 bytes @ 0x0
  2674  00EB                     	ds	2
  2675                           
  2676                           	psect	cstackCOMMON
  2677  0070                     __pcstackCOMMON:	
  2678  0070                     ?_MTOUCH_Service_Mainloop:	
  2679  0070                     ?_MTOUCH_Button_isPressed:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0070                     ?_MTOUCH_Button_InitializeAll:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2695                           ; 1 bytes @ 0x0
  2696                           
  2697  0070                     ?_MTOUCH_Button_ServiceAll:	
  2698                           ; 1 bytes @ 0x0
  2699                           
  2700  0070                     ?_MTOUCH_needReburst:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0070                     ?_MTOUCH_Tick:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0070                     ?_MTOUCH_Button_Tick:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0070                     ?_MTOUCH_Sensor_Enable:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0070                     ?_Sensor_Sampled_Reset:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0070                     ?_Sensor_Service:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0070                     ?_Sensor_isEnabled:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0070                     ?_Sensor_RawSample_Update:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0070                     ?_Sensor_setSampled:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0070                     ?_Sensor_postAcquisitionProcess:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0070                     ?_Sensor_isActive:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736  0070                     ?_Sensor_isCalibrated:	
  2737                           ; 1 bytes @ 0x0
  2738                           
  2739  0070                     ?_Sensor_setActive:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742  0070                     ?_Sensor_setInactive:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745  0070                     ?_Sensor_isCalibratingAcqTime:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748  0070                     ?_TMR2_LoadPeriodRegister:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751  0070                     ?_TMR2_StartTimer:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754  0070                     ?_TMR2_StopTimer:	
  2755                           ; 1 bytes @ 0x0
  2756                           
  2757  0070                     ?_Sensor_autoCalibration:	
  2758                           ; 1 bytes @ 0x0
  2759                           
  2760  0070                     ?_Sensor_setCalibratAcqTime:	
  2761                           ; 1 bytes @ 0x0
  2762                           
  2763  0070                     ?_Sensor_setCalibrated:	
  2764                           ; 1 bytes @ 0x0
  2765                           
  2766  0070                     ?_Button_Service:	
  2767                           ; 1 bytes @ 0x0
  2768                           
  2769  0070                     ?_Button_Reading_Update:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772  0070                     ?_Button_Deviation_Update:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775  0070                     ?_Button_Baseline_Initialize:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0070                     ?_Button_Baseline_Update:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0070                     ?_Button_Tick_helper:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_Button_Reading_Update_Helper:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0070                     ?_EUSART_Receive_ISR:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0070                     ?_EUSART_Transmit_ISR:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0070                     ??_EUSART_Transmit_ISR:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2800                           ; 1 bytes @ 0x0
  2801                           
  2802  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2803                           ; 1 bytes @ 0x0
  2804                           
  2805  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0070                     ?_EUSART_DefaultErrorHandler:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ?_EUSART_RxDataHandler:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ??_EUSART_RxDataHandler:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0070                     ?_PIN_MANAGER_Initialize:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0070                     ?_OSCILLATOR_Initialize:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0070                     ?_WDT_Initialize:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826  0070                     ?_LED_PROCESS:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829  0070                     ?_RELAY_PROCESS:	
  2830                           ; 1 bytes @ 0x0
  2831                           
  2832  0070                     ?_update_state:	
  2833                           ; 1 bytes @ 0x0
  2834                           
  2835  0070                     ?_check_data:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0070                     ?_check_message:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0070                     ?_DATA_PROCESS:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0070                     ?_MTOUCH_Initialize:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0070                     ?_MTOUCH_Sensor_Initialize:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0070                     ?_Sensor_getScanGroupIndex:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0070                     ?_MTOUCH_Button_Initialize:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0070                     ?_EUSART_Initialize:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0070                     ?_EUSART_is_rx_ready:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     ?_EUSART_Read:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0070                     ?_EUSART_Write:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0070                     ?_putch:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0070                     ?_TMR2_Initialize:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0070                     ?_INTERRUPT_InterruptManager:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0070                     ?_SYSTEM_Initialize:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0070                     ?_main:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_LED_1_SetHigh:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_LED_1_SetLow:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ?_LED_0_SetHigh:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_LED_0_SetLow:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901                           
  2902                           ; 1 bytes @ 0x0
  2903  0070                     	ds	1
  2904  0071                     ??_MTOUCH_Button_isPressed:	
  2905  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  2906                           ; 1 bytes @ 0x1
  2907                           
  2908  0071                     ??_MTOUCH_needReburst:	
  2909                           ; 1 bytes @ 0x1
  2910                           
  2911  0071                     ?_Sensor_DefaultCallback:	
  2912                           ; 1 bytes @ 0x1
  2913                           
  2914  0071                     ??_Sensor_Sampled_Reset:	
  2915                           ; 1 bytes @ 0x1
  2916                           
  2917  0071                     ??_Sensor_isEnabled:	
  2918                           ; 1 bytes @ 0x1
  2919                           
  2920  0071                     ??_Sensor_setSampled:	
  2921                           ; 1 bytes @ 0x1
  2922                           
  2923  0071                     ??_Sensor_isActive:	
  2924                           ; 1 bytes @ 0x1
  2925                           
  2926  0071                     ??_Sensor_isCalibrated:	
  2927                           ; 1 bytes @ 0x1
  2928                           
  2929  0071                     ??_Sensor_setActive:	
  2930                           ; 1 bytes @ 0x1
  2931                           
  2932  0071                     ??_Sensor_setInactive:	
  2933                           ; 1 bytes @ 0x1
  2934                           
  2935  0071                     ??_Sensor_isCalibratingAcqTime:	
  2936                           ; 1 bytes @ 0x1
  2937                           
  2938  0071                     ??_TMR2_LoadPeriodRegister:	
  2939                           ; 1 bytes @ 0x1
  2940                           
  2941  0071                     ??_TMR2_StartTimer:	
  2942                           ; 1 bytes @ 0x1
  2943                           
  2944  0071                     ??_TMR2_StopTimer:	
  2945                           ; 1 bytes @ 0x1
  2946                           
  2947  0071                     ??_Sensor_setCalibratAcqTime:	
  2948                           ; 1 bytes @ 0x1
  2949                           
  2950  0071                     ??_Sensor_setCalibrated:	
  2951                           ; 1 bytes @ 0x1
  2952                           
  2953  0071                     ?_memcpy:	
  2954                           ; 1 bytes @ 0x1
  2955                           
  2956  0071                     ??_Button_Deviation_Update:	
  2957                           ; 1 bytes @ 0x1
  2958                           
  2959  0071                     ??_Button_Baseline_Update:	
  2960                           ; 1 bytes @ 0x1
  2961                           
  2962  0071                     ??_Button_Tick_helper:	
  2963                           ; 1 bytes @ 0x1
  2964                           
  2965  0071                     ?_EUSART_SetRxInterruptHandler:	
  2966                           ; 1 bytes @ 0x1
  2967                           
  2968  0071                     ??_EUSART_Receive_ISR:	
  2969                           ; 1 bytes @ 0x1
  2970                           
  2971  0071                     ?_EUSART_SetTxInterruptHandler:	
  2972                           ; 1 bytes @ 0x1
  2973                           
  2974  0071                     ?_EUSART_SetFramingErrorHandler:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977  0071                     ?_EUSART_SetOverrunErrorHandler:	
  2978                           ; 1 bytes @ 0x1
  2979                           
  2980  0071                     ?_EUSART_SetErrorHandler:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983  0071                     ??_EUSART_DefaultErrorHandler:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0071                     ??_PIN_MANAGER_Initialize:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989  0071                     ??_OSCILLATOR_Initialize:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992  0071                     ??_WDT_Initialize:	
  2993                           ; 1 bytes @ 0x1
  2994                           
  2995  0071                     ??_LED_PROCESS:	
  2996                           ; 1 bytes @ 0x1
  2997                           
  2998  0071                     ??_RELAY_PROCESS:	
  2999                           ; 1 bytes @ 0x1
  3000                           
  3001  0071                     ??_check_data:	
  3002                           ; 1 bytes @ 0x1
  3003                           
  3004  0071                     ??_Sensor_getScanGroupIndex:	
  3005                           ; 1 bytes @ 0x1
  3006                           
  3007  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  3008                           ; 1 bytes @ 0x1
  3009                           
  3010  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3011                           ; 1 bytes @ 0x1
  3012                           
  3013  0071                     ??_EUSART_is_rx_ready:	
  3014                           ; 1 bytes @ 0x1
  3015                           
  3016  0071                     ??_EUSART_Read:	
  3017                           ; 1 bytes @ 0x1
  3018                           
  3019  0071                     ??_EUSART_Write:	
  3020                           ; 1 bytes @ 0x1
  3021                           
  3022  0071                     ??_TMR2_Initialize:	
  3023                           ; 1 bytes @ 0x1
  3024                           
  3025  0071                     ??_INTERRUPT_InterruptManager:	
  3026                           ; 1 bytes @ 0x1
  3027                           
  3028  0071                     ??_LED_1_SetHigh:	
  3029                           ; 1 bytes @ 0x1
  3030                           
  3031  0071                     ??_LED_1_SetLow:	
  3032                           ; 1 bytes @ 0x1
  3033                           
  3034  0071                     ??_LED_0_SetHigh:	
  3035                           ; 1 bytes @ 0x1
  3036                           
  3037  0071                     ??_LED_0_SetLow:	
  3038                           ; 1 bytes @ 0x1
  3039                           
  3040  0071                     ?___bmul:	
  3041                           ; 1 bytes @ 0x1
  3042                           
  3043  0071                     ?_abs:	
  3044                           ; 1 bytes @ 0x1
  3045                           
  3046  0071                     ?_strlen:	
  3047                           ; 2 bytes @ 0x1
  3048                           
  3049  0071                     Sensor_DefaultCallback@sensor:	
  3050                           ; 2 bytes @ 0x1
  3051                           
  3052  0071                     Sensor_setActive@sensor:	
  3053                           ; 1 bytes @ 0x1
  3054                           
  3055  0071                     Sensor_setInactive@sensor:	
  3056                           ; 1 bytes @ 0x1
  3057                           
  3058  0071                     Sensor_isActive@sensor:	
  3059                           ; 1 bytes @ 0x1
  3060                           
  3061  0071                     Sensor_isCalibrated@sensor:	
  3062                           ; 1 bytes @ 0x1
  3063                           
  3064  0071                     Sensor_setCalibrated@sensor:	
  3065                           ; 1 bytes @ 0x1
  3066                           
  3067  0071                     Sensor_setCalibratAcqTime@sensor:	
  3068                           ; 1 bytes @ 0x1
  3069                           
  3070  0071                     Sensor_isCalibratingAcqTime@sensor:	
  3071                           ; 1 bytes @ 0x1
  3072                           
  3073  0071                     Sensor_Sampled_Reset@sensor:	
  3074                           ; 1 bytes @ 0x1
  3075                           
  3076  0071                     Sensor_setSampled@sensor:	
  3077                           ; 1 bytes @ 0x1
  3078                           
  3079  0071                     TMR2_LoadPeriodRegister@periodVal:	
  3080                           ; 1 bytes @ 0x1
  3081                           
  3082  0071                     ___bmul@multiplicand:	
  3083                           ; 1 bytes @ 0x1
  3084                           
  3085  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  3086                           ; 1 bytes @ 0x1
  3087                           
  3088  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3089                           ; 2 bytes @ 0x1
  3090                           
  3091  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3092                           ; 2 bytes @ 0x1
  3093                           
  3094  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3095                           ; 2 bytes @ 0x1
  3096                           
  3097  0071                     EUSART_SetErrorHandler@interruptHandler:	
  3098                           ; 2 bytes @ 0x1
  3099                           
  3100  0071                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3101                           ; 2 bytes @ 0x1
  3102                           
  3103  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3104                           ; 2 bytes @ 0x1
  3105                           
  3106  0071                     abs@a:	
  3107                           ; 2 bytes @ 0x1
  3108                           
  3109  0071                     memcpy@s1:	
  3110                           ; 2 bytes @ 0x1
  3111                           
  3112                           
  3113                           ; 2 bytes @ 0x1
  3114  0071                     	ds	1
  3115  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3116  0072                     ??_Sensor_DefaultCallback:	
  3117                           ; 1 bytes @ 0x2
  3118                           
  3119  0072                     ?_Sensor_loadADCSettings:	
  3120                           ; 1 bytes @ 0x2
  3121                           
  3122  0072                     ??___bmul:	
  3123                           ; 1 bytes @ 0x2
  3124                           
  3125  0072                     Sensor_loadADCSettings@adc_index:	
  3126                           ; 1 bytes @ 0x2
  3127                           
  3128  0072                     Sensor_isEnabled@sensor:	
  3129                           ; 1 bytes @ 0x2
  3130                           
  3131  0072                     MTOUCH_Button_isPressed@name:	
  3132                           ; 1 bytes @ 0x2
  3133                           
  3134  0072                     EUSART_Read@readValue:	
  3135                           ; 1 bytes @ 0x2
  3136                           
  3137  0072                     EUSART_Write@txData:	
  3138                           ; 1 bytes @ 0x2
  3139                           
  3140                           
  3141                           ; 1 bytes @ 0x2
  3142  0072                     	ds	1
  3143  0073                     ??_abs:	
  3144  0073                     ??_EUSART_SetRxInterruptHandler:	
  3145                           ; 1 bytes @ 0x3
  3146                           
  3147  0073                     ??_EUSART_SetTxInterruptHandler:	
  3148                           ; 1 bytes @ 0x3
  3149                           
  3150  0073                     ??_EUSART_SetFramingErrorHandler:	
  3151                           ; 1 bytes @ 0x3
  3152                           
  3153  0073                     ??_EUSART_SetOverrunErrorHandler:	
  3154                           ; 1 bytes @ 0x3
  3155                           
  3156  0073                     ??_EUSART_SetErrorHandler:	
  3157                           ; 1 bytes @ 0x3
  3158                           
  3159  0073                     ??_strlen:	
  3160                           ; 1 bytes @ 0x3
  3161                           
  3162  0073                     ??_Sensor_loadADCSettings:	
  3163                           ; 1 bytes @ 0x3
  3164                           
  3165  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  3166                           ; 1 bytes @ 0x3
  3167                           
  3168  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3169                           ; 1 bytes @ 0x3
  3170                           
  3171  0073                     ??_EUSART_Initialize:	
  3172                           ; 1 bytes @ 0x3
  3173                           
  3174  0073                     ??_putch:	
  3175                           ; 1 bytes @ 0x3
  3176                           
  3177  0073                     Sensor_getScanGroupIndex@sensor:	
  3178                           ; 1 bytes @ 0x3
  3179                           
  3180  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3181                           ; 1 bytes @ 0x3
  3182                           
  3183  0073                     Button_Tick_helper@button:	
  3184                           ; 1 bytes @ 0x3
  3185                           
  3186  0073                     putch@txData:	
  3187                           ; 1 bytes @ 0x3
  3188                           
  3189  0073                     check_data@x:	
  3190                           ; 1 bytes @ 0x3
  3191                           
  3192  0073                     LED_PROCESS@x:	
  3193                           ; 1 bytes @ 0x3
  3194                           
  3195  0073                     RELAY_PROCESS@x:	
  3196                           ; 1 bytes @ 0x3
  3197                           
  3198  0073                     ___bmul@product:	
  3199                           ; 1 bytes @ 0x3
  3200                           
  3201  0073                     memcpy@n:	
  3202                           ; 1 bytes @ 0x3
  3203                           
  3204                           
  3205                           ; 2 bytes @ 0x3
  3206  0073                     	ds	1
  3207  0074                     ??_MTOUCH_Button_Tick:	
  3208  0074                     ?_Button_DefaultCallback:	
  3209                           ; 1 bytes @ 0x4
  3210                           
  3211  0074                     ?_myButtonPressedCallback:	
  3212                           ; 1 bytes @ 0x4
  3213                           
  3214  0074                     ?_myButtonReleasedCallback:	
  3215                           ; 1 bytes @ 0x4
  3216                           
  3217  0074                     ??_DATA_PROCESS:	
  3218                           ; 1 bytes @ 0x4
  3219                           
  3220  0074                     ?_fputc:	
  3221                           ; 1 bytes @ 0x4
  3222                           
  3223  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  3224                           ; 2 bytes @ 0x4
  3225                           
  3226  0074                     Button_DefaultCallback@button:	
  3227                           ; 1 bytes @ 0x4
  3228                           
  3229  0074                     myButtonPressedCallback@button:	
  3230                           ; 1 bytes @ 0x4
  3231                           
  3232  0074                     myButtonReleasedCallback@button:	
  3233                           ; 1 bytes @ 0x4
  3234                           
  3235  0074                     ___bmul@multiplier:	
  3236                           ; 1 bytes @ 0x4
  3237                           
  3238  0074                     strlen@a:	
  3239                           ; 1 bytes @ 0x4
  3240                           
  3241  0074                     fputc@c:	
  3242                           ; 1 bytes @ 0x4
  3243                           
  3244                           
  3245                           ; 2 bytes @ 0x4
  3246  0074                     	ds	1
  3247  0075                     ??_MTOUCH_Sensor_Enable:	
  3248  0075                     ??_MTOUCH_Sensor_Calibrate:	
  3249                           ; 1 bytes @ 0x5
  3250                           
  3251  0075                     ??_Sensor_RawSample_Update:	
  3252                           ; 1 bytes @ 0x5
  3253                           
  3254  0075                     ??_Sensor_postAcquisitionProcess:	
  3255                           ; 1 bytes @ 0x5
  3256                           
  3257  0075                     ??_Sensor_autoCalibration:	
  3258                           ; 1 bytes @ 0x5
  3259                           
  3260  0075                     ??_Button_DefaultCallback:	
  3261                           ; 1 bytes @ 0x5
  3262                           
  3263  0075                     ??_memcpy:	
  3264                           ; 1 bytes @ 0x5
  3265                           
  3266  0075                     ??_myButtonPressedCallback:	
  3267                           ; 1 bytes @ 0x5
  3268                           
  3269  0075                     ??_myButtonReleasedCallback:	
  3270                           ; 1 bytes @ 0x5
  3271                           
  3272  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  3273                           ; 1 bytes @ 0x5
  3274                           
  3275  0075                     ??_MTOUCH_Sensor_wasSampled:	
  3276                           ; 1 bytes @ 0x5
  3277                           
  3278  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  3279                           ; 1 bytes @ 0x5
  3280                           
  3281  0075                     MTOUCH_Button_Tick@i:	
  3282                           ; 2 bytes @ 0x5
  3283                           
  3284  0075                     strlen@s:	
  3285                           ; 1 bytes @ 0x5
  3286                           
  3287                           
  3288                           ; 1 bytes @ 0x5
  3289  0075                     	ds	1
  3290  0076                     ??_MTOUCH_Tick:	
  3291  0076                     Sensor_RawSample_Update@adcIndex:	
  3292                           ; 1 bytes @ 0x6
  3293                           
  3294  0076                     MTOUCH_Sensor_Enable@sensor:	
  3295                           ; 1 bytes @ 0x6
  3296                           
  3297  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  3298                           ; 1 bytes @ 0x6
  3299                           
  3300  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  3301                           ; 1 bytes @ 0x6
  3302                           
  3303  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  3304                           ; 1 bytes @ 0x6
  3305                           
  3306  0076                     DATA_PROCESS@x:	
  3307                           ; 1 bytes @ 0x6
  3308                           
  3309  0076                     memcpy@tmp:	
  3310                           ; 1 bytes @ 0x6
  3311                           
  3312  0076                     fputc@fp:	
  3313                           ; 1 bytes @ 0x6
  3314                           
  3315  0076                     Sensor_postAcquisitionProcess@deviation:	
  3316                           ; 1 bytes @ 0x6
  3317                           
  3318  0076                     _Sensor_loadADCSettings$560:	
  3319                           ; 2 bytes @ 0x6
  3320                           
  3321                           
  3322                           ; 2 bytes @ 0x6
  3323  0076                     	ds	1
  3324  0077                     ??_fputc:	
  3325  0077                     ??_MTOUCH_Sensor_Initialize:	
  3326                           ; 1 bytes @ 0x7
  3327                           
  3328  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  3329                           ; 1 bytes @ 0x7
  3330                           
  3331  0077                     ??_MTOUCH_Button_Initialize:	
  3332                           ; 1 bytes @ 0x7
  3333                           
  3334  0077                     Sensor_RawSample_Update@sensor:	
  3335                           ; 1 bytes @ 0x7
  3336                           
  3337  0077                     Button_Baseline_Update@button:	
  3338                           ; 1 bytes @ 0x7
  3339                           
  3340  0077                     memcpy@s:	
  3341                           ; 1 bytes @ 0x7
  3342                           
  3343                           
  3344                           ; 2 bytes @ 0x7
  3345  0077                     	ds	1
  3346  0078                     MTOUCH_Sensor_Initialize@sensor:	
  3347  0078                     Sensor_postAcquisitionProcess@adcIndex:	
  3348                           ; 1 bytes @ 0x8
  3349                           
  3350  0078                     Sensor_loadADCSettings@addressOffset:	
  3351                           ; 1 bytes @ 0x8
  3352                           
  3353  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  3354                           ; 1 bytes @ 0x8
  3355                           
  3356                           
  3357                           ; 1 bytes @ 0x8
  3358  0078                     	ds	1
  3359  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  3360  0079                     ??_Button_Reading_Update_Helper:	
  3361                           ; 1 bytes @ 0x9
  3362                           
  3363  0079                     Sensor_postAcquisitionProcess@sensor:	
  3364                           ; 1 bytes @ 0x9
  3365                           
  3366  0079                     Sensor_loadADCSettings@sensor:	
  3367                           ; 1 bytes @ 0x9
  3368                           
  3369  0079                     Sensor_autoCalibration@adcIndex:	
  3370                           ; 1 bytes @ 0x9
  3371                           
  3372  0079                     MTOUCH_Button_Initialize@name:	
  3373                           ; 1 bytes @ 0x9
  3374                           
  3375  0079                     Button_Baseline_Initialize@button:	
  3376                           ; 1 bytes @ 0x9
  3377                           
  3378  0079                     memcpy@d1:	
  3379                           ; 1 bytes @ 0x9
  3380                           
  3381                           
  3382                           ; 1 bytes @ 0x9
  3383  0079                     	ds	1
  3384  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  3385  007A                     Sensor_autoCalibration@sensor:	
  3386                           ; 1 bytes @ 0xA
  3387                           
  3388  007A                     MTOUCH_Button_Initialize@button:	
  3389                           ; 1 bytes @ 0xA
  3390                           
  3391  007A                     memcpy@d:	
  3392                           ; 1 bytes @ 0xA
  3393                           
  3394                           
  3395                           ; 1 bytes @ 0xA
  3396  007A                     	ds	1
  3397  007B                     ??_MTOUCH_Button_InitializeAll:	
  3398  007B                     ?_Sensor_Acq_ExecutePacket:	
  3399                           ; 1 bytes @ 0xB
  3400                           
  3401  007B                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3402                           ; 1 bytes @ 0xB
  3403                           
  3404  007B                     Button_Reading_Update_Helper@button:	
  3405                           ; 1 bytes @ 0xB
  3406                           
  3407                           
  3408                           ; 1 bytes @ 0xB
  3409  007B                     	ds	1
  3410  007C                     ??_Button_Reading_Update:	
  3411  007C                     ??_update_state:	
  3412                           ; 1 bytes @ 0xC
  3413                           
  3414  007C                     ??_MTOUCH_Initialize:	
  3415                           ; 1 bytes @ 0xC
  3416                           
  3417  007C                     ??_SYSTEM_Initialize:	
  3418                           ; 1 bytes @ 0xC
  3419                           
  3420                           
  3421                           	psect	cstackBANK0
  3422  0020                     __pcstackBANK0:	
  3423                           ; 1 bytes @ 0xC
  3424                           
  3425  0020                     ??_Sensor_Acq_ExecutePacket:	
  3426  0020                     ??_Button_Baseline_Initialize:	
  3427                           ; 1 bytes @ 0x0
  3428                           
  3429  0020                     ?_fputs:	
  3430                           ; 1 bytes @ 0x0
  3431                           
  3432  0020                     MTOUCH_Button_InitializeAll@button:	
  3433                           ; 2 bytes @ 0x0
  3434                           
  3435  0020                     Button_Deviation_Update@button:	
  3436                           ; 1 bytes @ 0x0
  3437                           
  3438  0020                     Button_Reading_Update@button:	
  3439                           ; 1 bytes @ 0x0
  3440                           
  3441  0020                     fputs@fp:	
  3442                           ; 1 bytes @ 0x0
  3443                           
  3444                           
  3445                           ; 1 bytes @ 0x0
  3446  0020                     	ds	1
  3447  0021                     ??_fputs:	
  3448  0021                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3449                           ; 1 bytes @ 0x1
  3450                           
  3451  0021                     Button_Deviation_Update@deviation:	
  3452                           ; 1 bytes @ 0x1
  3453                           
  3454                           
  3455                           ; 4 bytes @ 0x1
  3456  0021                     	ds	1
  3457  0022                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3458                           
  3459                           ; 1 bytes @ 0x2
  3460  0022                     	ds	1
  3461  0023                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3462                           
  3463                           ; 1 bytes @ 0x3
  3464  0023                     	ds	1
  3465  0024                     ?_Button_State_Initializing:	
  3466  0024                     ?_Button_State_NotPressed:	
  3467                           ; 1 bytes @ 0x4
  3468                           
  3469  0024                     ?_Button_State_Pressed:	
  3470                           ; 1 bytes @ 0x4
  3471                           
  3472  0024                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3473                           ; 1 bytes @ 0x4
  3474                           
  3475  0024                     Button_State_Initializing@button:	
  3476                           ; 1 bytes @ 0x4
  3477                           
  3478  0024                     Button_State_NotPressed@button:	
  3479                           ; 1 bytes @ 0x4
  3480                           
  3481  0024                     Button_State_Pressed@button:	
  3482                           ; 1 bytes @ 0x4
  3483                           
  3484  0024                     fputs@c:	
  3485                           ; 1 bytes @ 0x4
  3486                           
  3487                           
  3488                           ; 1 bytes @ 0x4
  3489  0024                     	ds	1
  3490  0025                     ??_Button_State_Initializing:	
  3491  0025                     ??_Button_State_NotPressed:	
  3492                           ; 1 bytes @ 0x5
  3493                           
  3494  0025                     ??_Button_State_Pressed:	
  3495                           ; 1 bytes @ 0x5
  3496                           
  3497  0025                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3498                           ; 1 bytes @ 0x5
  3499                           
  3500  0025                     fputs@i:	
  3501                           ; 1 bytes @ 0x5
  3502                           
  3503                           
  3504                           ; 2 bytes @ 0x5
  3505  0025                     	ds	1
  3506  0026                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3507                           
  3508                           ; 1 bytes @ 0x6
  3509  0026                     	ds	1
  3510  0027                     Sensor_Acq_ExecutePacket@activeSensor:	
  3511  0027                     fputs@s:	
  3512                           ; 1 bytes @ 0x7
  3513                           
  3514                           
  3515                           ; 1 bytes @ 0x7
  3516  0027                     	ds	1
  3517  0028                     ?_pad:	
  3518  0028                     pad@buf:	
  3519                           ; 2 bytes @ 0x8
  3520                           
  3521  0028                     Sensor_Acq_ExecutePacket@last_a:	
  3522                           ; 1 bytes @ 0x8
  3523                           
  3524                           
  3525                           ; 2 bytes @ 0x8
  3526  0028                     	ds	1
  3527  0029                     ??_Button_Service:	
  3528  0029                     pad@p:	
  3529                           ; 1 bytes @ 0x9
  3530                           
  3531                           
  3532                           ; 2 bytes @ 0x9
  3533  0029                     	ds	1
  3534  002A                     Sensor_Acq_ExecutePacket@last_b:	
  3535                           
  3536                           ; 2 bytes @ 0xA
  3537  002A                     	ds	1
  3538  002B                     ??_pad:	
  3539  002B                     Button_Service@name:	
  3540                           ; 1 bytes @ 0xB
  3541                           
  3542                           
  3543                           ; 1 bytes @ 0xB
  3544  002B                     	ds	1
  3545  002C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3546  002C                     Button_Service@button:	
  3547                           ; 1 bytes @ 0xC
  3548                           
  3549  002C                     pad@i:	
  3550                           ; 1 bytes @ 0xC
  3551                           
  3552                           
  3553                           ; 2 bytes @ 0xC
  3554  002C                     	ds	1
  3555  002D                     ??_MTOUCH_Button_ServiceAll:	
  3556  002D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3557                           ; 1 bytes @ 0xD
  3558                           
  3559                           
  3560                           ; 1 bytes @ 0xD
  3561  002D                     	ds	1
  3562  002E                     ?_Sensor_Scanfrequency_Evaluation:	
  3563  002E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3564                           ; 1 bytes @ 0xE
  3565                           
  3566  002E                     MTOUCH_Button_ServiceAll@button:	
  3567                           ; 1 bytes @ 0xE
  3568                           
  3569  002E                     pad@w:	
  3570                           ; 1 bytes @ 0xE
  3571                           
  3572                           
  3573                           ; 2 bytes @ 0xE
  3574  002E                     	ds	1
  3575  002F                     ??_Sensor_Scanfrequency_Evaluation:	
  3576                           
  3577                           ; 1 bytes @ 0xF
  3578  002F                     	ds	1
  3579  0030                     pad@fp:	
  3580                           
  3581                           ; 1 bytes @ 0x10
  3582  0030                     	ds	1
  3583  0031                     ?_ctoa:	
  3584  0031                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3585                           ; 2 bytes @ 0x11
  3586                           
  3587  0031                     ctoa@c:	
  3588                           ; 1 bytes @ 0x11
  3589                           
  3590                           
  3591                           ; 1 bytes @ 0x11
  3592  0031                     	ds	1
  3593  0032                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3594                           
  3595                           ; 2 bytes @ 0x12
  3596  0032                     	ds	1
  3597  0033                     ??_ctoa:	
  3598                           
  3599                           ; 1 bytes @ 0x13
  3600  0033                     	ds	1
  3601  0034                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3602  0034                     ctoa@w:	
  3603                           ; 1 bytes @ 0x14
  3604                           
  3605                           
  3606                           ; 2 bytes @ 0x14
  3607  0034                     	ds	1
  3608  0035                     Sensor_Scanfrequency_Evaluation@retry:	
  3609                           
  3610                           ; 1 bytes @ 0x15
  3611  0035                     	ds	1
  3612  0036                     ctoa@fp:	
  3613  0036                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3614                           ; 1 bytes @ 0x16
  3615                           
  3616                           
  3617                           ; 4 bytes @ 0x16
  3618  0036                     	ds	1
  3619  0037                     ?_vfpfcnvrt:	
  3620  0037                     vfpfcnvrt@fmt:	
  3621                           ; 2 bytes @ 0x17
  3622                           
  3623                           
  3624                           ; 1 bytes @ 0x17
  3625  0037                     	ds	1
  3626  0038                     vfpfcnvrt@ap:	
  3627                           
  3628                           ; 1 bytes @ 0x18
  3629  0038                     	ds	1
  3630  0039                     ??_vfpfcnvrt:	
  3631                           
  3632                           ; 1 bytes @ 0x19
  3633  0039                     	ds	1
  3634  003A                     Sensor_Scanfrequency_Evaluation@i:	
  3635                           
  3636                           ; 1 bytes @ 0x1A
  3637  003A                     	ds	1
  3638  003B                     ?_Sensor_Acquisition:	
  3639  003B                     Sensor_Acquisition@sensor_adc2:	
  3640                           ; 1 bytes @ 0x1B
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0x1B
  3644  003B                     	ds	1
  3645  003C                     ??_Sensor_Acquisition:	
  3646                           
  3647                           ; 1 bytes @ 0x1C
  3648  003C                     	ds	1
  3649  003D                     Sensor_Acquisition@retry:	
  3650                           
  3651                           ; 1 bytes @ 0x1D
  3652  003D                     	ds	1
  3653  003E                     Sensor_Acquisition@sensor_adc1:	
  3654  003E                     vfpfcnvrt@c:	
  3655                           ; 1 bytes @ 0x1E
  3656                           
  3657                           
  3658                           ; 1 bytes @ 0x1E
  3659  003E                     	ds	1
  3660  003F                     ??_Sensor_Service:	
  3661  003F                     vfpfcnvrt@fp:	
  3662                           ; 1 bytes @ 0x1F
  3663                           
  3664                           
  3665                           ; 1 bytes @ 0x1F
  3666  003F                     	ds	1
  3667  0040                     ?_vfprintf:	
  3668  0040                     vfprintf@fmt:	
  3669                           ; 2 bytes @ 0x20
  3670                           
  3671                           
  3672                           ; 2 bytes @ 0x20
  3673  0040                     	ds	2
  3674  0042                     Sensor_Service@scanGroup:	
  3675  0042                     vfprintf@ap:	
  3676                           ; 1 bytes @ 0x22
  3677                           
  3678                           
  3679                           ; 1 bytes @ 0x22
  3680  0042                     	ds	1
  3681  0043                     ??_vfprintf:	
  3682  0043                     Sensor_Service@error:	
  3683                           ; 1 bytes @ 0x23
  3684                           
  3685                           
  3686                           ; 1 bytes @ 0x23
  3687  0043                     	ds	1
  3688  0044                     Sensor_Service@sensor_adc1:	
  3689                           
  3690                           ; 1 bytes @ 0x24
  3691  0044                     	ds	1
  3692  0045                     Sensor_Service@sensor_adc2:	
  3693  0045                     vfprintf@fp:	
  3694                           ; 1 bytes @ 0x25
  3695                           
  3696                           
  3697                           ; 1 bytes @ 0x25
  3698  0045                     	ds	1
  3699  0046                     ??_MTOUCH_Sensor_SampleAll:	
  3700  0046                     vfprintf@cfmt:	
  3701                           ; 1 bytes @ 0x26
  3702                           
  3703                           
  3704                           ; 2 bytes @ 0x26
  3705  0046                     	ds	1
  3706  0047                     MTOUCH_Sensor_SampleAll@group:	
  3707                           
  3708                           ; 1 bytes @ 0x27
  3709  0047                     	ds	1
  3710  0048                     ??_MTOUCH_Service_Mainloop:	
  3711  0048                     ?_printf:	
  3712                           ; 1 bytes @ 0x28
  3713                           
  3714  0048                     printf@fmt:	
  3715                           ; 2 bytes @ 0x28
  3716                           
  3717                           
  3718                           ; 2 bytes @ 0x28
  3719  0048                     	ds	4
  3720  004C                     ??_printf:	
  3721                           
  3722                           ; 1 bytes @ 0x2C
  3723  004C                     	ds	3
  3724  004F                     printf@ap:	
  3725                           
  3726                           ; 1 bytes @ 0x2F
  3727  004F                     	ds	1
  3728  0050                     ??_check_message:	
  3729                           
  3730                           ; 1 bytes @ 0x30
  3731  0050                     	ds	2
  3732  0052                     check_message@x:	
  3733                           
  3734                           ; 1 bytes @ 0x32
  3735  0052                     	ds	1
  3736                           
  3737                           	psect	maintext
  3738  0059                     __pmaintext:	
  3739 ;;
  3740 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3741 ;;
  3742 ;; *************** function _main *****************
  3743 ;; Defined at:
  3744 ;;		line 17 in file "main.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;		None
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;		None
  3749 ;; Return value:  Size  Location     Type
  3750 ;;                  1    wreg      void 
  3751 ;; Registers used:
  3752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3753 ;; Tracked objects:
  3754 ;;		On entry : B1F/0
  3755 ;;		On exit  : 0/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3758 ;;      Params:         0       0       0       0       0       0       0       0
  3759 ;;      Locals:         0       0       0       0       0       0       0       0
  3760 ;;      Temps:          0       0       2       0       0       0       0       0
  3761 ;;      Totals:         0       0       2       0       0       0       0       0
  3762 ;;Total ram usage:        2 bytes
  3763 ;; Hardware stack levels required when called:   14
  3764 ;; This function calls:
  3765 ;;		_DATA_PROCESS
  3766 ;;		_EUSART_Read
  3767 ;;		_EUSART_is_rx_ready
  3768 ;;		_LED_PROCESS
  3769 ;;		_MTOUCH_Button_SetNotPressedCallback
  3770 ;;		_MTOUCH_Button_SetPressedCallback
  3771 ;;		_MTOUCH_Button_isPressed
  3772 ;;		_MTOUCH_Service_Mainloop
  3773 ;;		_RELAY_PROCESS
  3774 ;;		_SYSTEM_Initialize
  3775 ;;		_check_data
  3776 ;;		_check_message
  3777 ;;		_printf
  3778 ;;		_update_state
  3779 ;; This function is called by:
  3780 ;;		Startup code after reset
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           
  3785                           ;psect for function _main
  3786  0059                     _main:	
  3787                           
  3788                           ;main.c: 20:     SYSTEM_Initialize();
  3789                           
  3790                           ;incstack = 0
  3791                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3792  0059  3197  2728  3180   	fcall	_SYSTEM_Initialize
  3793                           
  3794                           ;main.c: 21:     (INTCONbits.GIE = 1);
  3795  005C  178B               	bsf	11,7	;volatile
  3796                           
  3797                           ;main.c: 22:     (INTCONbits.PEIE = 1);
  3798  005D  170B               	bsf	11,6	;volatile
  3799                           
  3800                           ;main.c: 23:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3801  005E  30C2               	movlw	low _myButtonPressedCallback
  3802  005F  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3803  0060  3008               	movlw	high _myButtonPressedCallback
  3804  0061  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3805  0062  3195  25F4  3180   	fcall	_MTOUCH_Button_SetPressedCallback
  3806                           
  3807                           ;main.c: 24:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3808  0065  30E7               	movlw	low _myButtonReleasedCallback
  3809  0066  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3810  0067  3017               	movlw	high _myButtonReleasedCallback
  3811  0068  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3812  0069  3195  25EE  3180   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3813  006C  0022               	movlb	2	; select bank2
  3814  006D  110C               	bcf	12,2	;volatile
  3815                           
  3816                           ;main.c: 26:     config_status = 0;
  3817  006E  0020               	movlb	0	; select bank0
  3818  006F  01E1               	clrf	_config_status
  3819                           
  3820                           ;main.c: 27:     last_touch_status.full_status = 0x00;
  3821  0070  01D9               	clrf	_last_touch_status
  3822  0071  01DA               	clrf	_last_touch_status+1
  3823                           
  3824                           ;main.c: 28:     LED_PROCESS(last_touch_status.full_status);
  3825  0072  0859               	movf	_last_touch_status,w
  3826  0073  318A  22EE  3180   	fcall	_LED_PROCESS
  3827                           
  3828                           ;main.c: 29:     RELAY_PROCESS(last_touch_status.full_status);
  3829  0076  0020               	movlb	0	; select bank0
  3830  0077  0859               	movf	_last_touch_status,w
  3831  0078  3189  21E8  3180   	fcall	_RELAY_PROCESS
  3832                           
  3833                           ;main.c: 30:     timeout_count = 0;
  3834  007B  3000               	movlw	0
  3835  007C  0021               	movlb	1	; select bank1
  3836  007D  00BB               	movwf	(_timeout_count+3)^(0+128)
  3837  007E  3000               	movlw	0
  3838  007F  00BA               	movwf	(_timeout_count+2)^(0+128)
  3839  0080  3000               	movlw	0
  3840  0081  00B9               	movwf	(_timeout_count+1)^(0+128)
  3841  0082  3000               	movlw	0
  3842  0083  00B8               	movwf	_timeout_count^(0+128)
  3843  0084                     l6238:	
  3844                           
  3845                           ;main.c: 32:     {;main.c: 33:         if(update_state_flag == 1)
  3846  0084  0020               	movlb	0	; select bank0
  3847  0085  035D               	decf	_update_state_flag,w
  3848  0086  1D03               	btfss	3,2
  3849  0087  288C               	goto	l6244
  3850                           
  3851                           ;main.c: 34:         {;main.c: 35:             update_state_flag = 0;
  3852  0088  01DD               	clrf	_update_state_flag
  3853                           
  3854                           ;main.c: 36:             update_state();
  3855  0089  318B  2351  3180   	fcall	_update_state
  3856  008C                     l6244:	
  3857                           
  3858                           ;main.c: 38:         if(EUSART_is_rx_ready())
  3859  008C  3195  25BD  3180   	fcall	_EUSART_is_rx_ready
  3860  008F  3A00               	xorlw	0
  3861  0090  1903               	skipnz
  3862  0091  2990               	goto	l6314
  3863                           
  3864                           ;main.c: 39:         {;main.c: 40:             rxData = EUSART_Read();
  3865  0092  3189  2103  3180   	fcall	_EUSART_Read
  3866  0095  0021               	movlb	1	; select bank1
  3867  0096  00EB               	movwf	??_main^(0+128)
  3868  0097  086B               	movf	??_main^(0+128),w
  3869  0098  0020               	movlb	0	; select bank0
  3870  0099  00E3               	movwf	_rxData
  3871                           
  3872                           ;main.c: 41:             if(check_data(rxData))
  3873  009A  0863               	movf	_rxData,w
  3874  009B  3189  214E  3180   	fcall	_check_data
  3875  009E  3A00               	xorlw	0
  3876  009F  1903               	skipnz
  3877  00A0  2990               	goto	l6314
  3878                           
  3879                           ;main.c: 42:             {;main.c: 43:                 if(check_request == 0)
  3880  00A1  0020               	movlb	0	; select bank0
  3881  00A2  0860               	movf	_check_request,w
  3882  00A3  1D03               	btfss	3,2
  3883  00A4  28B0               	goto	l6256
  3884                           
  3885                           ;main.c: 44:                 {;main.c: 45:                     prcData = rxData;
  3886  00A5  0863               	movf	_rxData,w
  3887  00A6  0021               	movlb	1	; select bank1
  3888  00A7  00EB               	movwf	??_main^(0+128)
  3889  00A8  086B               	movf	??_main^(0+128),w
  3890  00A9  0020               	movlb	0	; select bank0
  3891  00AA  00E2               	movwf	_prcData
  3892                           
  3893                           ;main.c: 46:                     check_message(rxData);
  3894  00AB  0863               	movf	_rxData,w
  3895  00AC  3189  21C1  3180   	fcall	_check_message
  3896                           
  3897                           ;main.c: 47:                 }
  3898  00AF  2990               	goto	l6314
  3899  00B0                     l6256:	
  3900                           
  3901                           ;main.c: 49:                 {;main.c: 50:                     if(config_status == 1)
  3902  00B0  0361               	decf	_config_status,w
  3903  00B1  1D03               	btfss	3,2
  3904  00B2  2983               	goto	l6306
  3905                           
  3906                           ;main.c: 51:                     {;main.c: 52:                         if(rxData == 'T')
  3907  00B3  3054               	movlw	84
  3908  00B4  0663               	xorwf	_rxData,w
  3909  00B5  1D03               	btfss	3,2
  3910  00B6  291A               	goto	l6282
  3911                           
  3912                           ;main.c: 53:                         {;main.c: 54:                             LED_PROCE
      +                          SS(7);
  3913  00B7  3007               	movlw	7
  3914  00B8  318A  22EE  3180   	fcall	_LED_PROCESS
  3915                           
  3916                           ;main.c: 55:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3917  00BB  3015               	movlw	21
  3918  00BC  0021               	movlb	1	; select bank1
  3919  00BD  00EC               	movwf	(??_main^(0+128)+1)
  3920  00BE  304B               	movlw	75
  3921  00BF  00EB               	movwf	??_main^(0+128)
  3922  00C0  30BE               	movlw	190
  3923  00C1                     u5497:	
  3924  00C1  0B89               	decfsz	9,f
  3925  00C2  28C1               	goto	u5497
  3926  00C3  0BEB               	decfsz	??_main^(0+128),f
  3927  00C4  28C1               	goto	u5497
  3928  00C5  0BEC               	decfsz	(??_main^(0+128)+1),f
  3929  00C6  28C1               	goto	u5497
  3930  00C7  0000               	nop
  3931                           
  3932                           ;main.c: 56:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3933  00C8  3015               	movlw	21
  3934  00C9  0021               	movlb	1	; select bank1
  3935  00CA  00EC               	movwf	(??_main^(0+128)+1)
  3936  00CB  304B               	movlw	75
  3937  00CC  00EB               	movwf	??_main^(0+128)
  3938  00CD  30BE               	movlw	190
  3939  00CE                     u5507:	
  3940  00CE  0B89               	decfsz	9,f
  3941  00CF  28CE               	goto	u5507
  3942  00D0  0BEB               	decfsz	??_main^(0+128),f
  3943  00D1  28CE               	goto	u5507
  3944  00D2  0BEC               	decfsz	(??_main^(0+128)+1),f
  3945  00D3  28CE               	goto	u5507
  3946  00D4  0000               	nop
  3947                           
  3948                           ;main.c: 57:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3949  00D5  3015               	movlw	21
  3950  00D6  0021               	movlb	1	; select bank1
  3951  00D7  00EC               	movwf	(??_main^(0+128)+1)
  3952  00D8  304B               	movlw	75
  3953  00D9  00EB               	movwf	??_main^(0+128)
  3954  00DA  30BE               	movlw	190
  3955  00DB                     u5517:	
  3956  00DB  0B89               	decfsz	9,f
  3957  00DC  28DB               	goto	u5517
  3958  00DD  0BEB               	decfsz	??_main^(0+128),f
  3959  00DE  28DB               	goto	u5517
  3960  00DF  0BEC               	decfsz	(??_main^(0+128)+1),f
  3961  00E0  28DB               	goto	u5517
  3962  00E1  0000               	nop
  3963                           
  3964                           ;main.c: 58:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3965  00E2  3015               	movlw	21
  3966  00E3  0021               	movlb	1	; select bank1
  3967  00E4  00EC               	movwf	(??_main^(0+128)+1)
  3968  00E5  304B               	movlw	75
  3969  00E6  00EB               	movwf	??_main^(0+128)
  3970  00E7  30BE               	movlw	190
  3971  00E8                     u5527:	
  3972  00E8  0B89               	decfsz	9,f
  3973  00E9  28E8               	goto	u5527
  3974  00EA  0BEB               	decfsz	??_main^(0+128),f
  3975  00EB  28E8               	goto	u5527
  3976  00EC  0BEC               	decfsz	(??_main^(0+128)+1),f
  3977  00ED  28E8               	goto	u5527
  3978  00EE  0000               	nop
  3979                           
  3980                           ;main.c: 59:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3981  00EF  3015               	movlw	21
  3982  00F0  0021               	movlb	1	; select bank1
  3983  00F1  00EC               	movwf	(??_main^(0+128)+1)
  3984  00F2  304B               	movlw	75
  3985  00F3  00EB               	movwf	??_main^(0+128)
  3986  00F4  30BE               	movlw	190
  3987  00F5                     u5537:	
  3988  00F5  0B89               	decfsz	9,f
  3989  00F6  28F5               	goto	u5537
  3990  00F7  0BEB               	decfsz	??_main^(0+128),f
  3991  00F8  28F5               	goto	u5537
  3992  00F9  0BEC               	decfsz	(??_main^(0+128)+1),f
  3993  00FA  28F5               	goto	u5537
  3994  00FB  0000               	nop
  3995                           
  3996                           ;main.c: 60:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3997  00FC  3015               	movlw	21
  3998  00FD  0021               	movlb	1	; select bank1
  3999  00FE  00EC               	movwf	(??_main^(0+128)+1)
  4000  00FF  304B               	movlw	75
  4001  0100  00EB               	movwf	??_main^(0+128)
  4002  0101  30BE               	movlw	190
  4003  0102                     u5547:	
  4004  0102  0B89               	decfsz	9,f
  4005  0103  2902               	goto	u5547
  4006  0104  0BEB               	decfsz	??_main^(0+128),f
  4007  0105  2902               	goto	u5547
  4008  0106  0BEC               	decfsz	(??_main^(0+128)+1),f
  4009  0107  2902               	goto	u5547
  4010  0108  0000               	nop
  4011                           
  4012                           ;main.c: 61:                             config_status = 0;
  4013  0109  0020               	movlb	0	; select bank0
  4014  010A  01E1               	clrf	_config_status
  4015                           
  4016                           ;main.c: 62:                             check_request = 0;
  4017  010B  01E0               	clrf	_check_request
  4018                           
  4019                           ;main.c: 63:                             timeout_count = 0;
  4020  010C  3000               	movlw	0
  4021  010D  0021               	movlb	1	; select bank1
  4022  010E  00BB               	movwf	(_timeout_count+3)^(0+128)
  4023  010F  3000               	movlw	0
  4024  0110  00BA               	movwf	(_timeout_count+2)^(0+128)
  4025  0111  3000               	movlw	0
  4026  0112  00B9               	movwf	(_timeout_count+1)^(0+128)
  4027  0113  3000               	movlw	0
  4028  0114  00B8               	movwf	_timeout_count^(0+128)
  4029                           
  4030                           ;main.c: 64:                             LED_PROCESS(last_touch_status.full_status);
  4031  0115  0020               	movlb	0	; select bank0
  4032  0116  0859               	movf	_last_touch_status,w
  4033  0117  318A  22EE  3180   	fcall	_LED_PROCESS
  4034  011A                     l6282:	
  4035                           
  4036                           ;main.c: 66:                         if(rxData == 'F')
  4037  011A  3046               	movlw	70
  4038  011B  0020               	movlb	0	; select bank0
  4039  011C  0663               	xorwf	_rxData,w
  4040  011D  1D03               	btfss	3,2
  4041  011E  2990               	goto	l6314
  4042                           
  4043                           ;main.c: 67:                         {;main.c: 68:                             LED_PROCE
      +                          SS(0);
  4044  011F  3000               	movlw	0
  4045  0120  318A  22EE  3180   	fcall	_LED_PROCESS
  4046                           
  4047                           ;main.c: 69:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4048  0123  3015               	movlw	21
  4049  0124  0021               	movlb	1	; select bank1
  4050  0125  00EC               	movwf	(??_main^(0+128)+1)
  4051  0126  304B               	movlw	75
  4052  0127  00EB               	movwf	??_main^(0+128)
  4053  0128  30BE               	movlw	190
  4054  0129                     u5557:	
  4055  0129  0B89               	decfsz	9,f
  4056  012A  2929               	goto	u5557
  4057  012B  0BEB               	decfsz	??_main^(0+128),f
  4058  012C  2929               	goto	u5557
  4059  012D  0BEC               	decfsz	(??_main^(0+128)+1),f
  4060  012E  2929               	goto	u5557
  4061  012F  0000               	nop
  4062                           
  4063                           ;main.c: 70:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4064  0130  3015               	movlw	21
  4065  0131  0021               	movlb	1	; select bank1
  4066  0132  00EC               	movwf	(??_main^(0+128)+1)
  4067  0133  304B               	movlw	75
  4068  0134  00EB               	movwf	??_main^(0+128)
  4069  0135  30BE               	movlw	190
  4070  0136                     u5567:	
  4071  0136  0B89               	decfsz	9,f
  4072  0137  2936               	goto	u5567
  4073  0138  0BEB               	decfsz	??_main^(0+128),f
  4074  0139  2936               	goto	u5567
  4075  013A  0BEC               	decfsz	(??_main^(0+128)+1),f
  4076  013B  2936               	goto	u5567
  4077  013C  0000               	nop
  4078                           
  4079                           ;main.c: 71:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4080  013D  3015               	movlw	21
  4081  013E  0021               	movlb	1	; select bank1
  4082  013F  00EC               	movwf	(??_main^(0+128)+1)
  4083  0140  304B               	movlw	75
  4084  0141  00EB               	movwf	??_main^(0+128)
  4085  0142  30BE               	movlw	190
  4086  0143                     u5577:	
  4087  0143  0B89               	decfsz	9,f
  4088  0144  2943               	goto	u5577
  4089  0145  0BEB               	decfsz	??_main^(0+128),f
  4090  0146  2943               	goto	u5577
  4091  0147  0BEC               	decfsz	(??_main^(0+128)+1),f
  4092  0148  2943               	goto	u5577
  4093  0149  0000               	nop
  4094                           
  4095                           ;main.c: 72:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4096  014A  3015               	movlw	21
  4097  014B  0021               	movlb	1	; select bank1
  4098  014C  00EC               	movwf	(??_main^(0+128)+1)
  4099  014D  304B               	movlw	75
  4100  014E  00EB               	movwf	??_main^(0+128)
  4101  014F  30BE               	movlw	190
  4102  0150                     u5587:	
  4103  0150  0B89               	decfsz	9,f
  4104  0151  2950               	goto	u5587
  4105  0152  0BEB               	decfsz	??_main^(0+128),f
  4106  0153  2950               	goto	u5587
  4107  0154  0BEC               	decfsz	(??_main^(0+128)+1),f
  4108  0155  2950               	goto	u5587
  4109  0156  0000               	nop
  4110                           
  4111                           ;main.c: 73:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4112  0157  3015               	movlw	21
  4113  0158  0021               	movlb	1	; select bank1
  4114  0159  00EC               	movwf	(??_main^(0+128)+1)
  4115  015A  304B               	movlw	75
  4116  015B  00EB               	movwf	??_main^(0+128)
  4117  015C  30BE               	movlw	190
  4118  015D                     u5597:	
  4119  015D  0B89               	decfsz	9,f
  4120  015E  295D               	goto	u5597
  4121  015F  0BEB               	decfsz	??_main^(0+128),f
  4122  0160  295D               	goto	u5597
  4123  0161  0BEC               	decfsz	(??_main^(0+128)+1),f
  4124  0162  295D               	goto	u5597
  4125  0163  0000               	nop
  4126                           
  4127                           ;main.c: 74:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4128  0164  3015               	movlw	21
  4129  0165  0021               	movlb	1	; select bank1
  4130  0166  00EC               	movwf	(??_main^(0+128)+1)
  4131  0167  304B               	movlw	75
  4132  0168  00EB               	movwf	??_main^(0+128)
  4133  0169  30BE               	movlw	190
  4134  016A                     u5607:	
  4135  016A  0B89               	decfsz	9,f
  4136  016B  296A               	goto	u5607
  4137  016C  0BEB               	decfsz	??_main^(0+128),f
  4138  016D  296A               	goto	u5607
  4139  016E  0BEC               	decfsz	(??_main^(0+128)+1),f
  4140  016F  296A               	goto	u5607
  4141  0170  0000               	nop
  4142                           
  4143                           ;main.c: 75:                             config_status = 0;
  4144  0171  0020               	movlb	0	; select bank0
  4145  0172  01E1               	clrf	_config_status
  4146                           
  4147                           ;main.c: 76:                             check_request = 0;
  4148  0173  01E0               	clrf	_check_request
  4149                           
  4150                           ;main.c: 77:                             timeout_count = 0;
  4151  0174  3000               	movlw	0
  4152  0175  0021               	movlb	1	; select bank1
  4153  0176  00BB               	movwf	(_timeout_count+3)^(0+128)
  4154  0177  3000               	movlw	0
  4155  0178  00BA               	movwf	(_timeout_count+2)^(0+128)
  4156  0179  3000               	movlw	0
  4157  017A  00B9               	movwf	(_timeout_count+1)^(0+128)
  4158  017B  3000               	movlw	0
  4159  017C  00B8               	movwf	_timeout_count^(0+128)
  4160                           
  4161                           ;main.c: 78:                             LED_PROCESS(last_touch_status.full_status);
  4162  017D  0020               	movlb	0	; select bank0
  4163  017E  0859               	movf	_last_touch_status,w
  4164  017F  318A  22EE  3180   	fcall	_LED_PROCESS
  4165  0182  2990               	goto	l6314
  4166  0183                     l6306:	
  4167                           
  4168                           ;main.c: 82:                     {;main.c: 83:                         if(rxData == 'T')
  4169  0183  3054               	movlw	84
  4170  0184  0663               	xorwf	_rxData,w
  4171  0185  1D03               	btfss	3,2
  4172  0186  298B               	goto	l6310
  4173                           
  4174                           ;main.c: 84:                         {;main.c: 85:                             DATA_PROC
      +                          ESS(prcData);
  4175  0187  0862               	movf	_prcData,w
  4176  0188  318E  2616  3180   	fcall	_DATA_PROCESS
  4177  018B                     l6310:	
  4178                           
  4179                           ;main.c: 87:                         if(rxData == 'F')
  4180  018B  3046               	movlw	70
  4181  018C  0020               	movlb	0	; select bank0
  4182  018D  0663               	xorwf	_rxData,w
  4183  018E  1903               	btfsc	3,2
  4184                           
  4185                           ;main.c: 88:                         {;main.c: 89:                             check_req
      +                          uest = 0;
  4186  018F  01E0               	clrf	_check_request
  4187  0190                     l6314:	
  4188                           ;main.c: 93:             }
  4189                           
  4190                           
  4191                           ;main.c: 95:         if(MTOUCH_Service_Mainloop())
  4192  0190  3188  2033  3180   	fcall	_MTOUCH_Service_Mainloop
  4193  0193  3A00               	xorlw	0
  4194  0194  1903               	skipnz
  4195  0195  2884               	goto	l6238
  4196                           
  4197                           ;main.c: 96:         {;main.c: 97:             if(config_status == 0)
  4198  0196  0020               	movlb	0	; select bank0
  4199  0197  0861               	movf	_config_status,w
  4200  0198  1D03               	btfss	3,2
  4201  0199  2A63               	goto	l6370
  4202                           
  4203                           ;main.c: 98:             {;main.c: 99:                 if(check_request == 1)
  4204  019A  0360               	decf	_check_request,w
  4205  019B  1D03               	btfss	3,2
  4206  019C  29B7               	goto	l6328
  4207                           
  4208                           ;main.c: 100:                 {;main.c: 101:                     timeout_count++;
  4209  019D  3001               	movlw	1
  4210  019E  0021               	movlb	1	; select bank1
  4211  019F  07B8               	addwf	_timeout_count^(0+128),f
  4212  01A0  3000               	movlw	0
  4213  01A1  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4214  01A2  3000               	movlw	0
  4215  01A3  3DBA               	addwfc	(_timeout_count+2)^(0+128),f
  4216  01A4  3000               	movlw	0
  4217  01A5  3DBB               	addwfc	(_timeout_count+3)^(0+128),f
  4218                           
  4219                           ;main.c: 102:                     if(timeout_count == 30)
  4220  01A6  301E               	movlw	30
  4221  01A7  0638               	xorwf	_timeout_count^(0+128),w
  4222  01A8  0439               	iorwf	(_timeout_count+1)^(0+128),w
  4223  01A9  043A               	iorwf	(_timeout_count+2)^(0+128),w
  4224  01AA  043B               	iorwf	(_timeout_count+3)^(0+128),w
  4225  01AB  1D03               	btfss	3,2
  4226  01AC  29B7               	goto	l6328
  4227                           
  4228                           ;main.c: 103:                     {;main.c: 104:                         timeout_count =
      +                           0;
  4229  01AD  3000               	movlw	0
  4230  01AE  00BB               	movwf	(_timeout_count+3)^(0+128)
  4231  01AF  3000               	movlw	0
  4232  01B0  00BA               	movwf	(_timeout_count+2)^(0+128)
  4233  01B1  3000               	movlw	0
  4234  01B2  00B9               	movwf	(_timeout_count+1)^(0+128)
  4235  01B3  3000               	movlw	0
  4236  01B4  00B8               	movwf	_timeout_count^(0+128)
  4237                           
  4238                           ;main.c: 105:                         check_request = 0;
  4239  01B5  0020               	movlb	0	; select bank0
  4240  01B6  01E0               	clrf	_check_request
  4241  01B7                     l6328:	
  4242                           
  4243                           ;main.c: 108:                 if(MTOUCH_Button_isPressed(0) == 1 && MTOUCH_Button_isPres
      +                          sed(1) == 1)
  4244  01B7  3000               	movlw	0
  4245  01B8  3188  2018  3180   	fcall	_MTOUCH_Button_isPressed
  4246  01BB  3A01               	xorlw	1
  4247  01BC  1D03               	skipz
  4248  01BD  2A5F               	goto	l6368
  4249  01BE  3001               	movlw	1
  4250  01BF  3188  2018  3180   	fcall	_MTOUCH_Button_isPressed
  4251  01C2  3A01               	xorlw	1
  4252  01C3  1D03               	skipz
  4253  01C4  2A5F               	goto	l6368
  4254                           
  4255                           ;main.c: 109:                 {;main.c: 110:                     count_conf++;
  4256  01C5  3001               	movlw	1
  4257  01C6  0021               	movlb	1	; select bank1
  4258  01C7  07C2               	addwf	_count_conf^(0+128),f
  4259  01C8  3000               	movlw	0
  4260  01C9  3DC3               	addwfc	(_count_conf+1)^(0+128),f
  4261                           
  4262                           ;main.c: 111:                     if(count_conf == 1800)
  4263  01CA  3008               	movlw	8
  4264  01CB  0642               	xorwf	_count_conf^(0+128),w
  4265  01CC  3007               	movlw	7
  4266  01CD  1903               	skipnz
  4267  01CE  0643               	xorwf	(_count_conf+1)^(0+128),w
  4268  01CF  1D03               	btfss	3,2
  4269  01D0  2884               	goto	l6238
  4270                           
  4271                           ;main.c: 112:                     {;main.c: 113:                         count_conf = 0;
  4272  01D1  01C2               	clrf	_count_conf^(0+128)
  4273  01D2  01C3               	clrf	(_count_conf+1)^(0+128)
  4274                           
  4275                           ;main.c: 114:                         printf("PICSMART");
  4276  01D3  3000               	movlw	low (STR_1| (0+32768))
  4277  01D4  0020               	movlb	0	; select bank0
  4278  01D5  00C8               	movwf	printf@fmt
  4279  01D6  3098               	movlw	high (STR_1| (0+32768))
  4280  01D7  00C9               	movwf	printf@fmt+1
  4281  01D8  3197  2717  3180   	fcall	_printf
  4282                           
  4283                           ;main.c: 115:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4284  01DB  3015               	movlw	21
  4285  01DC  0021               	movlb	1	; select bank1
  4286  01DD  00EC               	movwf	(??_main^(0+128)+1)
  4287  01DE  304B               	movlw	75
  4288  01DF  00EB               	movwf	??_main^(0+128)
  4289  01E0  30BE               	movlw	190
  4290  01E1                     u5617:	
  4291  01E1  0B89               	decfsz	9,f
  4292  01E2  29E1               	goto	u5617
  4293  01E3  0BEB               	decfsz	??_main^(0+128),f
  4294  01E4  29E1               	goto	u5617
  4295  01E5  0BEC               	decfsz	(??_main^(0+128)+1),f
  4296  01E6  29E1               	goto	u5617
  4297  01E7  0000               	nop
  4298                           
  4299                           ;main.c: 116:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4300  01E8  3015               	movlw	21
  4301  01E9  0021               	movlb	1	; select bank1
  4302  01EA  00EC               	movwf	(??_main^(0+128)+1)
  4303  01EB  304B               	movlw	75
  4304  01EC  00EB               	movwf	??_main^(0+128)
  4305  01ED  30BE               	movlw	190
  4306  01EE                     u5627:	
  4307  01EE  0B89               	decfsz	9,f
  4308  01EF  29EE               	goto	u5627
  4309  01F0  0BEB               	decfsz	??_main^(0+128),f
  4310  01F1  29EE               	goto	u5627
  4311  01F2  0BEC               	decfsz	(??_main^(0+128)+1),f
  4312  01F3  29EE               	goto	u5627
  4313  01F4  0000               	nop
  4314                           
  4315                           ;main.c: 117:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4316  01F5  3015               	movlw	21
  4317  01F6  0021               	movlb	1	; select bank1
  4318  01F7  00EC               	movwf	(??_main^(0+128)+1)
  4319  01F8  304B               	movlw	75
  4320  01F9  00EB               	movwf	??_main^(0+128)
  4321  01FA  30BE               	movlw	190
  4322  01FB                     u5637:	
  4323  01FB  0B89               	decfsz	9,f
  4324  01FC  29FB               	goto	u5637
  4325  01FD  0BEB               	decfsz	??_main^(0+128),f
  4326  01FE  29FB               	goto	u5637
  4327  01FF  0BEC               	decfsz	(??_main^(0+128)+1),f
  4328  0200  29FB               	goto	u5637
  4329  0201  0000               	nop
  4330                           
  4331                           ;main.c: 118:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4332  0202  3015               	movlw	21
  4333  0203  0021               	movlb	1	; select bank1
  4334  0204  00EC               	movwf	(??_main^(0+128)+1)
  4335  0205  304B               	movlw	75
  4336  0206  00EB               	movwf	??_main^(0+128)
  4337  0207  30BE               	movlw	190
  4338  0208                     u5647:	
  4339  0208  0B89               	decfsz	9,f
  4340  0209  2A08               	goto	u5647
  4341  020A  0BEB               	decfsz	??_main^(0+128),f
  4342  020B  2A08               	goto	u5647
  4343  020C  0BEC               	decfsz	(??_main^(0+128)+1),f
  4344  020D  2A08               	goto	u5647
  4345  020E  0000               	nop
  4346                           
  4347                           ;main.c: 119:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4348  020F  3015               	movlw	21
  4349  0210  0021               	movlb	1	; select bank1
  4350  0211  00EC               	movwf	(??_main^(0+128)+1)
  4351  0212  304B               	movlw	75
  4352  0213  00EB               	movwf	??_main^(0+128)
  4353  0214  30BE               	movlw	190
  4354  0215                     u5657:	
  4355  0215  0B89               	decfsz	9,f
  4356  0216  2A15               	goto	u5657
  4357  0217  0BEB               	decfsz	??_main^(0+128),f
  4358  0218  2A15               	goto	u5657
  4359  0219  0BEC               	decfsz	(??_main^(0+128)+1),f
  4360  021A  2A15               	goto	u5657
  4361  021B  0000               	nop
  4362                           
  4363                           ;main.c: 120:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4364  021C  3015               	movlw	21
  4365  021D  0021               	movlb	1	; select bank1
  4366  021E  00EC               	movwf	(??_main^(0+128)+1)
  4367  021F  304B               	movlw	75
  4368  0220  00EB               	movwf	??_main^(0+128)
  4369  0221  30BE               	movlw	190
  4370  0222                     u5667:	
  4371  0222  0B89               	decfsz	9,f
  4372  0223  2A22               	goto	u5667
  4373  0224  0BEB               	decfsz	??_main^(0+128),f
  4374  0225  2A22               	goto	u5667
  4375  0226  0BEC               	decfsz	(??_main^(0+128)+1),f
  4376  0227  2A22               	goto	u5667
  4377  0228  0000               	nop
  4378                           
  4379                           ;main.c: 121:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4380  0229  3015               	movlw	21
  4381  022A  0021               	movlb	1	; select bank1
  4382  022B  00EC               	movwf	(??_main^(0+128)+1)
  4383  022C  304B               	movlw	75
  4384  022D  00EB               	movwf	??_main^(0+128)
  4385  022E  30BE               	movlw	190
  4386  022F                     u5677:	
  4387  022F  0B89               	decfsz	9,f
  4388  0230  2A2F               	goto	u5677
  4389  0231  0BEB               	decfsz	??_main^(0+128),f
  4390  0232  2A2F               	goto	u5677
  4391  0233  0BEC               	decfsz	(??_main^(0+128)+1),f
  4392  0234  2A2F               	goto	u5677
  4393  0235  0000               	nop
  4394                           
  4395                           ;main.c: 122:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4396  0236  3015               	movlw	21
  4397  0237  0021               	movlb	1	; select bank1
  4398  0238  00EC               	movwf	(??_main^(0+128)+1)
  4399  0239  304B               	movlw	75
  4400  023A  00EB               	movwf	??_main^(0+128)
  4401  023B  30BE               	movlw	190
  4402  023C                     u5687:	
  4403  023C  0B89               	decfsz	9,f
  4404  023D  2A3C               	goto	u5687
  4405  023E  0BEB               	decfsz	??_main^(0+128),f
  4406  023F  2A3C               	goto	u5687
  4407  0240  0BEC               	decfsz	(??_main^(0+128)+1),f
  4408  0241  2A3C               	goto	u5687
  4409  0242  0000               	nop
  4410                           
  4411                           ;main.c: 123:                         printf("RUN\r\n");
  4412  0243  3009               	movlw	low (STR_2| (0+32768))
  4413  0244  0020               	movlb	0	; select bank0
  4414  0245  00C8               	movwf	printf@fmt
  4415  0246  3098               	movlw	high (STR_2| (0+32768))
  4416  0247  00C9               	movwf	printf@fmt+1
  4417  0248  3197  2717  3180   	fcall	_printf
  4418                           
  4419                           ;main.c: 124:                         config_status = 1;
  4420  024B  0020               	movlb	0	; select bank0
  4421  024C  01E1               	clrf	_config_status
  4422  024D  0AE1               	incf	_config_status,f
  4423                           
  4424                           ;main.c: 125:                         check_request = 1;
  4425  024E  01E0               	clrf	_check_request
  4426  024F  0AE0               	incf	_check_request,f
  4427                           
  4428                           ;main.c: 126:                         timeout_count = 0;
  4429  0250  3000               	movlw	0
  4430  0251  0021               	movlb	1	; select bank1
  4431  0252  00BB               	movwf	(_timeout_count+3)^(0+128)
  4432  0253  3000               	movlw	0
  4433  0254  00BA               	movwf	(_timeout_count+2)^(0+128)
  4434  0255  3000               	movlw	0
  4435  0256  00B9               	movwf	(_timeout_count+1)^(0+128)
  4436  0257  3000               	movlw	0
  4437  0258  00B8               	movwf	_timeout_count^(0+128)
  4438                           
  4439                           ;main.c: 127:                         LED_PROCESS(0);
  4440  0259  3000               	movlw	0
  4441  025A  318A  22EE  3180   	fcall	_LED_PROCESS
  4442                           
  4443                           ;main.c: 128:                         blink = 0;
  4444  025D  0020               	movlb	0	; select bank0
  4445  025E  2ABA               	goto	L1
  4446  025F                     l6368:	
  4447                           
  4448                           ;main.c: 132:                 {;main.c: 133:                     count_conf = 0;
  4449  025F  0021               	movlb	1	; select bank1
  4450  0260  01C2               	clrf	_count_conf^(0+128)
  4451  0261  01C3               	clrf	(_count_conf+1)^(0+128)
  4452                           
  4453                           ;main.c: 135:             }
  4454                           
  4455                           ;main.c: 134:                 }
  4456  0262  2884               	goto	l6238
  4457  0263                     l6370:	
  4458                           
  4459                           ;main.c: 137:             {;main.c: 138:                 if(check_request == 1)
  4460  0263  0360               	decf	_check_request,w
  4461  0264  1D03               	btfss	3,2
  4462  0265  2884               	goto	l6238
  4463                           
  4464                           ;main.c: 139:                 {;main.c: 140:                     timeout_count++;
  4465  0266  3001               	movlw	1
  4466  0267  0021               	movlb	1	; select bank1
  4467  0268  07B8               	addwf	_timeout_count^(0+128),f
  4468  0269  3000               	movlw	0
  4469  026A  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4470  026B  3000               	movlw	0
  4471  026C  3DBA               	addwfc	(_timeout_count+2)^(0+128),f
  4472  026D  3000               	movlw	0
  4473  026E  3DBB               	addwfc	(_timeout_count+3)^(0+128),f
  4474                           
  4475                           ;main.c: 141:                     if(timeout_count >= 30000)
  4476  026F  083B               	movf	(_timeout_count+3)^(0+128),w
  4477  0270  1D03               	btfss	3,2
  4478  0271  2A7B               	goto	l6376
  4479  0272  083A               	movf	(_timeout_count+2)^(0+128),w
  4480  0273  1D03               	btfss	3,2
  4481  0274  2A7B               	goto	l6376
  4482  0275  3030               	movlw	48
  4483  0276  0238               	subwf	_timeout_count^(0+128),w
  4484  0277  3075               	movlw	117
  4485  0278  3B39               	subwfb	(_timeout_count+1)^(0+128),w
  4486  0279  1C03               	btfss	3,0
  4487  027A  2A9B               	goto	l6388
  4488  027B                     l6376:	
  4489                           
  4490                           ;main.c: 142:                     {;main.c: 144:                         LED_PROCESS(0);
  4491  027B  3000               	movlw	0
  4492  027C  318A  22EE  3180   	fcall	_LED_PROCESS
  4493                           
  4494                           ;main.c: 146:                         if(timeout_count >= 32000)
  4495  027F  0021               	movlb	1	; select bank1
  4496  0280  083B               	movf	(_timeout_count+3)^(0+128),w
  4497  0281  1D03               	btfss	3,2
  4498  0282  2A8A               	goto	l6380
  4499  0283  083A               	movf	(_timeout_count+2)^(0+128),w
  4500  0284  1D03               	btfss	3,2
  4501  0285  2A8A               	goto	l6380
  4502  0286  307D               	movlw	125
  4503  0287  0239               	subwf	(_timeout_count+1)^(0+128),w
  4504  0288  1C03               	btfss	3,0
  4505  0289  2884               	goto	l6238
  4506  028A                     l6380:	
  4507                           
  4508                           ;main.c: 147:                         {;main.c: 148:                             timeout
      +                          _count = 0;
  4509  028A  3000               	movlw	0
  4510  028B  00BB               	movwf	(_timeout_count+3)^(0+128)
  4511  028C  3000               	movlw	0
  4512  028D  00BA               	movwf	(_timeout_count+2)^(0+128)
  4513  028E  3000               	movlw	0
  4514  028F  00B9               	movwf	(_timeout_count+1)^(0+128)
  4515  0290  3000               	movlw	0
  4516  0291  00B8               	movwf	_timeout_count^(0+128)
  4517                           
  4518                           ;main.c: 149:                             LED_PROCESS(last_touch_status.full_status);
  4519  0292  0020               	movlb	0	; select bank0
  4520  0293  0859               	movf	_last_touch_status,w
  4521  0294  318A  22EE  3180   	fcall	_LED_PROCESS
  4522                           
  4523                           ;main.c: 150:                             check_request = 0;
  4524  0297  0020               	movlb	0	; select bank0
  4525  0298  01E0               	clrf	_check_request
  4526                           
  4527                           ;main.c: 151:                             config_status = 0;
  4528  0299  01E1               	clrf	_config_status
  4529  029A  2884               	goto	l6238
  4530  029B                     l6388:	
  4531                           
  4532                           ;main.c: 155:                     {;main.c: 156:                         blink_count++;
  4533  029B  3001               	movlw	1
  4534  029C  00EB               	movwf	??_main^(0+128)
  4535  029D  086B               	movf	??_main^(0+128),w
  4536  029E  0020               	movlb	0	; select bank0
  4537  029F  07DE               	addwf	_blink_count,f
  4538                           
  4539                           ;main.c: 157:                         if(blink == 0)
  4540  02A0  085F               	movf	_blink,w
  4541  02A1  1D03               	btfss	3,2
  4542  02A2  2AB0               	goto	l6398
  4543                           
  4544                           ;main.c: 158:                         {;main.c: 159:                             LED_PRO
      +                          CESS(0);
  4545  02A3  3000               	movlw	0
  4546  02A4  318A  22EE  3180   	fcall	_LED_PROCESS
  4547                           
  4548                           ;main.c: 160:                             if(blink_count == 200)
  4549  02A7  30C8               	movlw	200
  4550  02A8  0020               	movlb	0	; select bank0
  4551  02A9  065E               	xorwf	_blink_count,w
  4552  02AA  1D03               	btfss	3,2
  4553  02AB  2884               	goto	l6238
  4554                           
  4555                           ;main.c: 161:                             {;main.c: 162:                                
      +                           blink_count = 0;
  4556  02AC  01DE               	clrf	_blink_count
  4557                           
  4558                           ;main.c: 163:                                 blink = 1;
  4559  02AD  01DF               	clrf	_blink
  4560  02AE  0ADF               	incf	_blink,f
  4561  02AF  2884               	goto	l6238
  4562  02B0                     l6398:	
  4563                           
  4564                           ;main.c: 167:                         {;main.c: 168:                             LED_PRO
      +                          CESS(3);
  4565  02B0  3003               	movlw	3
  4566  02B1  318A  22EE  3180   	fcall	_LED_PROCESS
  4567                           
  4568                           ;main.c: 169:                             if(blink_count == 200)
  4569  02B4  30C8               	movlw	200
  4570  02B5  0020               	movlb	0	; select bank0
  4571  02B6  065E               	xorwf	_blink_count,w
  4572  02B7  1D03               	btfss	3,2
  4573  02B8  2884               	goto	l6238
  4574                           
  4575                           ;main.c: 170:                             {;main.c: 171:                                
      +                           blink_count = 0;
  4576  02B9  01DE               	clrf	_blink_count
  4577  02BA                     L1:	
  4578                           
  4579                           ;main.c: 172:                                 blink = 0;
  4580  02BA  01DF               	clrf	_blink
  4581  02BB  2884               	goto	l6238
  4582  02BC                     __end_of_main:	
  4583                           
  4584                           	psect	text1
  4585  0B51                     __ptext1:	
  4586 ;; *************** function _update_state *****************
  4587 ;; Defined at:
  4588 ;;		line 207 in file "main.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;		None
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;		None
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  1    wreg      void 
  4595 ;; Registers used:
  4596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4602 ;;      Params:         0       0       0       0       0       0       0       0
  4603 ;;      Locals:         0       0       0       0       0       0       0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0
  4605 ;;      Totals:         0       0       0       0       0       0       0       0
  4606 ;;Total ram usage:        0 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:   13
  4609 ;; This function calls:
  4610 ;;		_printf
  4611 ;; This function is called by:
  4612 ;;		_main
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function _update_state
  4618  0B51                     _update_state:	
  4619                           
  4620                           ;main.c: 209:     switch(last_touch_status.full_status)
  4621                           
  4622                           ;incstack = 0
  4623                           ; Regs used in _update_state: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4624  0B51  2B6E               	goto	l6116
  4625  0B52                     l6106:	
  4626  0B52  3014               	movlw	low (STR_3| (0+32768))
  4627  0B53  00C8               	movwf	printf@fmt
  4628  0B54  3098               	movlw	high (STR_3| (0+32768))
  4629  0B55  00C9               	movwf	printf@fmt+1
  4630  0B56  3197  2717         	fcall	_printf
  4631  0B58  0008               	return
  4632  0B59                     l6108:	
  4633  0B59  3019               	movlw	low (STR_4| (0+32768))
  4634  0B5A  00C8               	movwf	printf@fmt
  4635  0B5B  3098               	movlw	high (STR_4| (0+32768))
  4636  0B5C  00C9               	movwf	printf@fmt+1
  4637  0B5D  3197  2717         	fcall	_printf
  4638  0B5F  0008               	return
  4639  0B60                     l6110:	
  4640  0B60  301E               	movlw	low (STR_5| (0+32768))
  4641  0B61  00C8               	movwf	printf@fmt
  4642  0B62  3098               	movlw	high (STR_5| (0+32768))
  4643  0B63  00C9               	movwf	printf@fmt+1
  4644  0B64  3197  2717         	fcall	_printf
  4645  0B66  0008               	return
  4646  0B67                     l6112:	
  4647  0B67  3023               	movlw	low (STR_6| (0+32768))
  4648  0B68  00C8               	movwf	printf@fmt
  4649  0B69  3098               	movlw	high (STR_6| (0+32768))
  4650  0B6A  00C9               	movwf	printf@fmt+1
  4651  0B6B  3197  2717         	fcall	_printf
  4652  0B6D  0008               	return
  4653  0B6E                     l6116:	
  4654                           
  4655                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4656                           ; Switch size 1, requested type "simple"
  4657                           ; Number of cases is 1, Range of values is 0 to 0
  4658                           ; switch strategies available:
  4659                           ; Name         Instructions Cycles
  4660                           ; simple_byte            4     3 (average)
  4661                           ; direct_byte            8     6 (fixed)
  4662                           ; jumptable            260     6 (fixed)
  4663                           ;	Chosen strategy is simple_byte
  4664  0B6E  0020               	movlb	0	; select bank0
  4665  0B6F  085A               	movf	_last_touch_status+1,w
  4666  0B70  3A00               	xorlw	0	; case 0
  4667  0B71  1903               	skipnz
  4668  0B72  2B74               	goto	l6584
  4669  0B73  2B82               	goto	l1027
  4670  0B74                     l6584:	
  4671                           
  4672                           ; Switch size 1, requested type "simple"
  4673                           ; Number of cases is 4, Range of values is 0 to 3
  4674                           ; switch strategies available:
  4675                           ; Name         Instructions Cycles
  4676                           ; simple_byte           13     7 (average)
  4677                           ; direct_byte           14     6 (fixed)
  4678                           ; jumptable            260     6 (fixed)
  4679                           ;	Chosen strategy is simple_byte
  4680  0B74  0859               	movf	_last_touch_status,w
  4681  0B75  3A00               	xorlw	0	; case 0
  4682  0B76  1903               	skipnz
  4683  0B77  2B52               	goto	l6106
  4684  0B78  3A01               	xorlw	1	; case 1
  4685  0B79  1903               	skipnz
  4686  0B7A  2B59               	goto	l6108
  4687  0B7B  3A03               	xorlw	3	; case 2
  4688  0B7C  1903               	skipnz
  4689  0B7D  2B60               	goto	l6110
  4690  0B7E  3A01               	xorlw	1	; case 3
  4691  0B7F  1903               	skipnz
  4692  0B80  2B67               	goto	l6112
  4693  0B81  2B82               	goto	l1027
  4694  0B82                     l1027:	
  4695  0B82  0008               	return
  4696  0B83                     __end_of_update_state:	
  4697                           
  4698                           	psect	text2
  4699  09C1                     __ptext2:	
  4700 ;; *************** function _check_message *****************
  4701 ;; Defined at:
  4702 ;;		line 267 in file "main.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;  x               1    wreg     unsigned char 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  x               1   50[BANK0 ] unsigned char 
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4716 ;;      Params:         0       0       0       0       0       0       0       0
  4717 ;;      Locals:         0       1       0       0       0       0       0       0
  4718 ;;      Temps:          0       2       0       0       0       0       0       0
  4719 ;;      Totals:         0       3       0       0       0       0       0       0
  4720 ;;Total ram usage:        3 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:   13
  4723 ;; This function calls:
  4724 ;;		_printf
  4725 ;; This function is called by:
  4726 ;;		_main
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           
  4731                           ;psect for function _check_message
  4732  09C1                     _check_message:	
  4733                           
  4734                           ;incstack = 0
  4735                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4736                           ;check_message@x stored from wreg
  4737  09C1  0020               	movlb	0	; select bank0
  4738  09C2  00D2               	movwf	check_message@x
  4739                           
  4740                           ;main.c: 267: void check_message(uint8_t x);main.c: 268: {;main.c: 269:     switch (x)
  4741  09C3  29D7               	goto	l6134
  4742  09C4                     l6124:	
  4743                           
  4744                           ;main.c: 272:         {;main.c: 273:             check_request = 0;
  4745  09C4  01E0               	clrf	_check_request
  4746                           
  4747                           ;main.c: 274:             break;
  4748  09C5  0008               	return
  4749  09C6                     l6128:	
  4750                           
  4751                           ;main.c: 282:         {;main.c: 283:             printf("%c",x);
  4752  09C6  3028               	movlw	low (STR_7| (0+32768))
  4753  09C7  00C8               	movwf	printf@fmt
  4754  09C8  3098               	movlw	high (STR_7| (0+32768))
  4755  09C9  00C9               	movwf	printf@fmt+1
  4756  09CA  0852               	movf	check_message@x,w
  4757  09CB  00D0               	movwf	??_check_message
  4758  09CC  01D1               	clrf	??_check_message+1
  4759  09CD  0850               	movf	??_check_message,w
  4760  09CE  00CA               	movwf	?_printf+2
  4761  09CF  0851               	movf	??_check_message+1,w
  4762  09D0  00CB               	movwf	?_printf+3
  4763  09D1  3197  2717         	fcall	_printf
  4764                           
  4765                           ;main.c: 284:             check_request = 1;
  4766  09D3  0020               	movlb	0	; select bank0
  4767  09D4  01E0               	clrf	_check_request
  4768  09D5  0AE0               	incf	_check_request,f
  4769                           
  4770                           ;main.c: 285:             break;
  4771  09D6  0008               	return
  4772  09D7                     l6134:	
  4773  09D7  0852               	movf	check_message@x,w
  4774  09D8  00D0               	movwf	??_check_message
  4775  09D9  01D1               	clrf	??_check_message+1
  4776                           
  4777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4778                           ; Switch size 1, requested type "simple"
  4779                           ; Number of cases is 1, Range of values is 0 to 0
  4780                           ; switch strategies available:
  4781                           ; Name         Instructions Cycles
  4782                           ; simple_byte            4     3 (average)
  4783                           ; direct_byte            8     6 (fixed)
  4784                           ; jumptable            260     6 (fixed)
  4785                           ;	Chosen strategy is simple_byte
  4786  09DA  0851               	movf	??_check_message+1,w
  4787  09DB  3A00               	xorlw	0	; case 0
  4788  09DC  1903               	skipnz
  4789  09DD  29DF               	goto	l6586
  4790  09DE  29C6               	goto	l6128
  4791  09DF                     l6586:	
  4792                           
  4793                           ; Switch size 1, requested type "simple"
  4794                           ; Number of cases is 2, Range of values is 70 to 84
  4795                           ; switch strategies available:
  4796                           ; Name         Instructions Cycles
  4797                           ; simple_byte            7     4 (average)
  4798                           ; direct_byte           39     9 (fixed)
  4799                           ; jumptable            263     9 (fixed)
  4800                           ;	Chosen strategy is simple_byte
  4801  09DF  0850               	movf	??_check_message,w
  4802  09E0  3A46               	xorlw	70	; case 70
  4803  09E1  1903               	skipnz
  4804  09E2  29C4               	goto	l6124
  4805  09E3  3A12               	xorlw	18	; case 84
  4806  09E4  1903               	skipnz
  4807  09E5  29C4               	goto	l6124
  4808  09E6  29C6               	goto	l6128
  4809  09E7  0008               	return
  4810  09E8                     __end_of_check_message:	
  4811                           
  4812                           	psect	text3
  4813  1717                     __ptext3:	
  4814 ;; *************** function _printf *****************
  4815 ;; Defined at:
  4816 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  fmt             2   40[BANK0 ] PTR const unsigned char 
  4819 ;;		 -> STR_7(3), STR_6(5), STR_5(5), STR_4(5), 
  4820 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  ret             2    0        int 
  4823 ;;  ap              1   47[BANK0 ] PTR void [1]
  4824 ;;		 -> ?_printf(2), 
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  2   40[BANK0 ] int 
  4827 ;; Registers used:
  4828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4834 ;;      Params:         0       4       0       0       0       0       0       0
  4835 ;;      Locals:         0       3       0       0       0       0       0       0
  4836 ;;      Temps:          0       1       0       0       0       0       0       0
  4837 ;;      Totals:         0       8       0       0       0       0       0       0
  4838 ;;Total ram usage:        8 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; Hardware stack levels required when called:   12
  4841 ;; This function calls:
  4842 ;;		_vfprintf
  4843 ;; This function is called by:
  4844 ;;		_main
  4845 ;;		_update_state
  4846 ;;		_check_message
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           
  4851                           ;psect for function _printf
  4852  1717                     _printf:	
  4853                           
  4854                           ;incstack = 0
  4855                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4856  1717  304A               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4857  1718  0020               	movlb	0	; select bank0
  4858  1719  00CC               	movwf	??_printf
  4859  171A  084C               	movf	??_printf,w
  4860  171B  00CF               	movwf	printf@ap
  4861  171C  0849               	movf	printf@fmt+1,w
  4862  171D  00C1               	movwf	vfprintf@fmt+1
  4863  171E  0848               	movf	printf@fmt,w
  4864  171F  00C0               	movwf	vfprintf@fmt
  4865  1720  304F               	movlw	(low (printf@ap| 0))& (0+255)
  4866  1721  00CC               	movwf	??_printf
  4867  1722  084C               	movf	??_printf,w
  4868  1723  00C2               	movwf	vfprintf@ap
  4869  1724  3000               	movlw	0
  4870  1725  318A  22BF         	fcall	_vfprintf
  4871  1727  0008               	return
  4872  1728                     __end_of_printf:	
  4873                           
  4874                           	psect	text4
  4875  0ABF                     __ptext4:	
  4876 ;; *************** function _vfprintf *****************
  4877 ;; Defined at:
  4878 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;  fp              1    wreg     PTR struct _IO_FILE
  4881 ;;		 -> NULL(0), 
  4882 ;;  fmt             2   32[BANK0 ] PTR const unsigned char 
  4883 ;;		 -> STR_7(3), STR_6(5), STR_5(5), STR_4(5), 
  4884 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  4885 ;;  ap              1   34[BANK0 ] PTR PTR void 
  4886 ;;		 -> printf@ap(1), 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  fp              1   37[BANK0 ] PTR struct _IO_FILE
  4889 ;;		 -> NULL(0), 
  4890 ;;  cfmt            2   38[BANK0 ] PTR unsigned char 
  4891 ;;		 -> STR_7(3), STR_6(5), STR_5(5), STR_4(5), 
  4892 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  4893 ;; Return value:  Size  Location     Type
  4894 ;;                  2   32[BANK0 ] int 
  4895 ;; Registers used:
  4896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4897 ;; Tracked objects:
  4898 ;;		On entry : 0/0
  4899 ;;		On exit  : 0/0
  4900 ;;		Unchanged: 0/0
  4901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4902 ;;      Params:         0       3       0       0       0       0       0       0
  4903 ;;      Locals:         0       3       0       0       0       0       0       0
  4904 ;;      Temps:          0       2       0       0       0       0       0       0
  4905 ;;      Totals:         0       8       0       0       0       0       0       0
  4906 ;;Total ram usage:        8 bytes
  4907 ;; Hardware stack levels used:    1
  4908 ;; Hardware stack levels required when called:   11
  4909 ;; This function calls:
  4910 ;;		_vfpfcnvrt
  4911 ;; This function is called by:
  4912 ;;		_printf
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           
  4917                           ;psect for function _vfprintf
  4918  0ABF                     _vfprintf:	
  4919                           
  4920                           ;incstack = 0
  4921                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4922                           ;vfprintf@fp stored from wreg
  4923  0ABF  0020               	movlb	0	; select bank0
  4924  0AC0  00C5               	movwf	vfprintf@fp
  4925                           
  4926                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  4927  0AC1  0841               	movf	vfprintf@fmt+1,w
  4928  0AC2  00C7               	movwf	vfprintf@cfmt+1
  4929  0AC3  0840               	movf	vfprintf@fmt,w
  4930  0AC4  00C6               	movwf	vfprintf@cfmt
  4931                           
  4932                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  4933  0AC5  0021               	movlb	1	; select bank1
  4934  0AC6  01BC               	clrf	_nout^(0+128)
  4935  0AC7  01BD               	clrf	(_nout+1)^(0+128)
  4936  0AC8                     l6006:	
  4937                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  4938                           
  4939                           
  4940                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  4941  0AC8  0020               	movlb	0	; select bank0
  4942  0AC9  0846               	movf	vfprintf@cfmt,w
  4943  0ACA  0084               	movwf	4
  4944  0ACB  0847               	movf	vfprintf@cfmt+1,w
  4945  0ACC  0085               	movwf	5
  4946  0ACD  0012               	moviw fsr0++
  4947  0ACE  1903               	btfsc	3,2
  4948  0ACF  2AE5               	goto	l6008
  4949                           
  4950                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  4951  0AD0  3046               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  4952  0AD1  00C3               	movwf	??_vfprintf
  4953  0AD2  0843               	movf	??_vfprintf,w
  4954  0AD3  00B7               	movwf	vfpfcnvrt@fmt
  4955  0AD4  0842               	movf	vfprintf@ap,w
  4956  0AD5  00C4               	movwf	??_vfprintf+1
  4957  0AD6  0844               	movf	??_vfprintf+1,w
  4958  0AD7  00B8               	movwf	vfpfcnvrt@ap
  4959  0AD8  0845               	movf	vfprintf@fp,w
  4960  0AD9  3185  2525  318A   	fcall	_vfpfcnvrt
  4961  0ADC  0020               	movlb	0	; select bank0
  4962  0ADD  0837               	movf	?_vfpfcnvrt,w
  4963  0ADE  0021               	movlb	1	; select bank1
  4964  0ADF  07BC               	addwf	_nout^(0+128),f
  4965  0AE0  0020               	movlb	0	; select bank0
  4966  0AE1  0838               	movf	?_vfpfcnvrt+1,w
  4967  0AE2  0021               	movlb	1	; select bank1
  4968  0AE3  3DBD               	addwfc	(_nout+1)^(0+128),f
  4969  0AE4  2AC8               	goto	l6006
  4970  0AE5                     l6008:	
  4971                           
  4972                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  4973  0AE5  0021               	movlb	1	; select bank1
  4974  0AE6  083D               	movf	(_nout+1)^(0+128),w
  4975  0AE7  0020               	movlb	0	; select bank0
  4976  0AE8  00C1               	movwf	?_vfprintf+1
  4977  0AE9  0021               	movlb	1	; select bank1
  4978  0AEA  083C               	movf	_nout^(0+128),w
  4979  0AEB  0020               	movlb	0	; select bank0
  4980  0AEC  00C0               	movwf	?_vfprintf
  4981  0AED  0008               	return
  4982  0AEE                     __end_of_vfprintf:	
  4983                           
  4984                           	psect	text5
  4985  0525                     __ptext5:	
  4986 ;; *************** function _vfpfcnvrt *****************
  4987 ;; Defined at:
  4988 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;  fp              1    wreg     PTR struct _IO_FILE
  4991 ;;		 -> NULL(0), 
  4992 ;;  fmt             1   23[BANK0 ] PTR PTR unsigned char 
  4993 ;;		 -> vfprintf@cfmt(2), 
  4994 ;;  ap              1   24[BANK0 ] PTR PTR void 
  4995 ;;		 -> printf@ap(1), 
  4996 ;; Auto vars:     Size  Location     Type
  4997 ;;  fp              1   31[BANK0 ] PTR struct _IO_FILE
  4998 ;;		 -> NULL(0), 
  4999 ;;  llu             8    0        unsigned long long 
  5000 ;;  ll              8    0        long long 
  5001 ;;  f               4    0        long long 
  5002 ;;  ct              3    0        unsigned char [3]
  5003 ;;  vp              2    0        PTR void 
  5004 ;;  i               2    0        int 
  5005 ;;  done            2    0        int 
  5006 ;;  cp              2    0        PTR unsigned char 
  5007 ;;  c               1   30[BANK0 ] unsigned char 
  5008 ;; Return value:  Size  Location     Type
  5009 ;;                  2   23[BANK0 ] int 
  5010 ;; Registers used:
  5011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5017 ;;      Params:         0       2       0       0       0       0       0       0
  5018 ;;      Locals:         0       2       0       0       0       0       0       0
  5019 ;;      Temps:          0       5       0       0       0       0       0       0
  5020 ;;      Totals:         0       9       0       0       0       0       0       0
  5021 ;;Total ram usage:        9 bytes
  5022 ;; Hardware stack levels used:    1
  5023 ;; Hardware stack levels required when called:   10
  5024 ;; This function calls:
  5025 ;;		_ctoa
  5026 ;;		_fputc
  5027 ;; This function is called by:
  5028 ;;		_vfprintf
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           
  5033                           ;psect for function _vfpfcnvrt
  5034  0525                     _vfpfcnvrt:	
  5035                           
  5036                           ;incstack = 0
  5037                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5038                           ;vfpfcnvrt@fp stored from wreg
  5039  0525  0020               	movlb	0	; select bank0
  5040  0526  00BF               	movwf	vfpfcnvrt@fp
  5041                           
  5042                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  5043  0527  0837               	movf	vfpfcnvrt@fmt,w
  5044  0528  0086               	movwf	6
  5045  0529  0187               	clrf	7
  5046  052A  3F40               	moviw [0]fsr1
  5047  052B  00B9               	movwf	??_vfpfcnvrt
  5048  052C  3F41               	moviw [1]fsr1
  5049  052D  00BA               	movwf	??_vfpfcnvrt+1
  5050  052E  0839               	movf	??_vfpfcnvrt,w
  5051  052F  0084               	movwf	4
  5052  0530  083A               	movf	??_vfpfcnvrt+1,w
  5053  0531  0085               	movwf	5
  5054  0532  0012               	moviw fsr0++
  5055  0533  3A25               	xorlw	37
  5056  0534  1D03               	btfss	3,2
  5057  0535  2DAA               	goto	l5912
  5058                           
  5059                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  5060  0536  0837               	movf	vfpfcnvrt@fmt,w
  5061  0537  0086               	movwf	6
  5062  0538  0187               	clrf	7
  5063  0539  3001               	movlw	1
  5064  053A  0781               	addwf	1,f
  5065  053B  3141               	addfsr 1,1
  5066  053C  1803               	skipnc
  5067  053D  0A81               	incf	1,f
  5068                           
  5069                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  5070  053E  01D7               	clrf	_width
  5071  053F  01D8               	clrf	_width+1
  5072  0540  0021               	movlb	1	; select bank1
  5073  0541  01C0               	clrf	_flags^(0+128)
  5074  0542  01C1               	clrf	(_flags+1)^(0+128)
  5075                           
  5076                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  5077  0543  30FF               	movlw	255
  5078  0544  00BE               	movwf	_prec^(0+128)
  5079  0545  30FF               	movlw	255
  5080  0546  00BF               	movwf	(_prec^(0+128)+1)
  5081                           
  5082                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  5083  0547  0020               	movlb	0	; select bank0
  5084  0548  0837               	movf	vfpfcnvrt@fmt,w
  5085  0549  0086               	movwf	6
  5086  054A  0187               	clrf	7
  5087  054B  3F40               	moviw [0]fsr1
  5088  054C  00B9               	movwf	??_vfpfcnvrt
  5089  054D  3F41               	moviw [1]fsr1
  5090  054E  00BA               	movwf	??_vfpfcnvrt+1
  5091  054F  0839               	movf	??_vfpfcnvrt,w
  5092  0550  0084               	movwf	4
  5093  0551  083A               	movf	??_vfpfcnvrt+1,w
  5094  0552  0085               	movwf	5
  5095  0553  0012               	moviw fsr0++
  5096  0554  3A63               	xorlw	99
  5097  0555  1D03               	btfss	3,2
  5098  0556  2D78               	goto	l5896
  5099                           
  5100                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  5101  0557  0837               	movf	vfpfcnvrt@fmt,w
  5102  0558  0086               	movwf	6
  5103  0559  0187               	clrf	7
  5104  055A  3001               	movlw	1
  5105  055B  0781               	addwf	1,f
  5106  055C  3141               	addfsr 1,1
  5107  055D  1803               	skipnc
  5108  055E  0A81               	incf	1,f
  5109                           
  5110                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  5111  055F  0838               	movf	vfpfcnvrt@ap,w
  5112  0560  0086               	movwf	6
  5113  0561  0187               	clrf	7
  5114  0562  0801               	movf	1,w
  5115  0563  0084               	movwf	4
  5116  0564  0185               	clrf	5
  5117  0565  3002               	movlw	2
  5118  0566  0781               	addwf	1,f
  5119  0567  0800               	movf	0,w
  5120  0568  00B9               	movwf	??_vfpfcnvrt
  5121  0569  0839               	movf	??_vfpfcnvrt,w
  5122  056A  00BE               	movwf	vfpfcnvrt@c
  5123                           
  5124                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  5125  056B  083E               	movf	vfpfcnvrt@c,w
  5126  056C  00B9               	movwf	??_vfpfcnvrt
  5127  056D  0839               	movf	??_vfpfcnvrt,w
  5128  056E  00B1               	movwf	ctoa@c
  5129  056F  083F               	movf	vfpfcnvrt@fp,w
  5130  0570  318A  2211         	fcall	_ctoa
  5131  0572  0020               	movlb	0	; select bank0
  5132  0573  0832               	movf	?_ctoa+1,w
  5133  0574  00B8               	movwf	?_vfpfcnvrt+1
  5134  0575  0831               	movf	?_ctoa,w
  5135  0576  00B7               	movwf	?_vfpfcnvrt
  5136  0577  0008               	return
  5137  0578                     l5896:	
  5138                           
  5139                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  5140  0578  0837               	movf	vfpfcnvrt@fmt,w
  5141  0579  0086               	movwf	6
  5142  057A  0187               	clrf	7
  5143  057B  3F40               	moviw [0]fsr1
  5144  057C  00B9               	movwf	??_vfpfcnvrt
  5145  057D  3F41               	moviw [1]fsr1
  5146  057E  00BA               	movwf	??_vfpfcnvrt+1
  5147  057F  0839               	movf	??_vfpfcnvrt,w
  5148  0580  0084               	movwf	4
  5149  0581  083A               	movf	??_vfpfcnvrt+1,w
  5150  0582  0085               	movwf	5
  5151  0583  0012               	moviw fsr0++
  5152  0584  3A25               	xorlw	37
  5153  0585  1D03               	btfss	3,2
  5154  0586  2D9F               	goto	l5906
  5155                           
  5156                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  5157  0587  0837               	movf	vfpfcnvrt@fmt,w
  5158  0588  0086               	movwf	6
  5159  0589  0187               	clrf	7
  5160  058A  3001               	movlw	1
  5161  058B  0781               	addwf	1,f
  5162  058C  3141               	addfsr 1,1
  5163  058D  1803               	skipnc
  5164  058E  0A81               	incf	1,f
  5165                           
  5166                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  5167  058F  3025               	movlw	37
  5168  0590  00F4               	movwf	fputc@c
  5169  0591  3000               	movlw	0
  5170  0592  00F5               	movwf	fputc@c+1
  5171  0593  083F               	movf	vfpfcnvrt@fp,w
  5172  0594  00B9               	movwf	??_vfpfcnvrt
  5173  0595  0839               	movf	??_vfpfcnvrt,w
  5174  0596  00F6               	movwf	fputc@fp
  5175  0597  318B  2383         	fcall	_fputc
  5176  0599                     l5902:	
  5177                           
  5178                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  5179  0599  3001               	movlw	1
  5180  059A  0020               	movlb	0	; select bank0
  5181  059B  00B7               	movwf	?_vfpfcnvrt
  5182  059C  3000               	movlw	0
  5183  059D  00B8               	movwf	?_vfpfcnvrt+1
  5184  059E  0008               	return
  5185  059F                     l5906:	
  5186                           
  5187                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  5188  059F  0837               	movf	vfpfcnvrt@fmt,w
  5189  05A0  0086               	movwf	6
  5190  05A1  0187               	clrf	7
  5191  05A2  3001               	movlw	1
  5192  05A3  0781               	addwf	1,f
  5193  05A4  3141               	addfsr 1,1
  5194  05A5  1803               	skipnc
  5195  05A6  0A81               	incf	1,f
  5196                           
  5197                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  5198  05A7  01B7               	clrf	?_vfpfcnvrt
  5199  05A8  01B8               	clrf	?_vfpfcnvrt+1
  5200  05A9  0008               	return
  5201  05AA                     l5912:	
  5202                           
  5203                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  5204  05AA  0837               	movf	vfpfcnvrt@fmt,w
  5205  05AB  0086               	movwf	6
  5206  05AC  0187               	clrf	7
  5207  05AD  3F40               	moviw [0]fsr1
  5208  05AE  00B9               	movwf	??_vfpfcnvrt
  5209  05AF  3F41               	moviw [1]fsr1
  5210  05B0  00BA               	movwf	??_vfpfcnvrt+1
  5211  05B1  0839               	movf	??_vfpfcnvrt,w
  5212  05B2  0084               	movwf	4
  5213  05B3  083A               	movf	??_vfpfcnvrt+1,w
  5214  05B4  0085               	movwf	5
  5215  05B5  0800               	movf	0,w	;code access
  5216  05B6  00BB               	movwf	??_vfpfcnvrt+2
  5217  05B7  01BC               	clrf	??_vfpfcnvrt+3
  5218  05B8  083B               	movf	??_vfpfcnvrt+2,w
  5219  05B9  00F4               	movwf	fputc@c
  5220  05BA  083C               	movf	??_vfpfcnvrt+3,w
  5221  05BB  00F5               	movwf	fputc@c+1
  5222  05BC  083F               	movf	vfpfcnvrt@fp,w
  5223  05BD  00BD               	movwf	??_vfpfcnvrt+4
  5224  05BE  083D               	movf	??_vfpfcnvrt+4,w
  5225  05BF  00F6               	movwf	fputc@fp
  5226  05C0  318B  2383  3185   	fcall	_fputc
  5227                           
  5228                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  5229  05C3  0020               	movlb	0	; select bank0
  5230  05C4  0837               	movf	vfpfcnvrt@fmt,w
  5231  05C5  0086               	movwf	6
  5232  05C6  0187               	clrf	7
  5233  05C7  3001               	movlw	1
  5234  05C8  0781               	addwf	1,f
  5235  05C9  3141               	addfsr 1,1
  5236  05CA  1803               	skipnc
  5237  05CB  0A81               	incf	1,f
  5238  05CC  2D99               	goto	l5902
  5239  05CD                     __end_of_vfpfcnvrt:	
  5240                           
  5241                           	psect	text6
  5242  0A11                     __ptext6:	
  5243 ;; *************** function _ctoa *****************
  5244 ;; Defined at:
  5245 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;  fp              1    wreg     PTR struct _IO_FILE
  5248 ;;		 -> NULL(0), 
  5249 ;;  c               1   17[BANK0 ] unsigned char 
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;  fp              1   22[BANK0 ] PTR struct _IO_FILE
  5252 ;;		 -> NULL(0), 
  5253 ;;  w               2   20[BANK0 ] int 
  5254 ;;  l               2    0        int 
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  2   17[BANK0 ] int 
  5257 ;; Registers used:
  5258 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5264 ;;      Params:         0       2       0       0       0       0       0       0
  5265 ;;      Locals:         0       3       0       0       0       0       0       0
  5266 ;;      Temps:          0       1       0       0       0       0       0       0
  5267 ;;      Totals:         0       6       0       0       0       0       0       0
  5268 ;;Total ram usage:        6 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    9
  5271 ;; This function calls:
  5272 ;;		_pad
  5273 ;; This function is called by:
  5274 ;;		_vfpfcnvrt
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           
  5279                           ;psect for function _ctoa
  5280  0A11                     _ctoa:	
  5281                           
  5282                           ;incstack = 0
  5283                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5284                           ;ctoa@fp stored from wreg
  5285  0A11  0020               	movlb	0	; select bank0
  5286  0A12  00B6               	movwf	ctoa@fp
  5287                           
  5288                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  5289  0A13  0857               	movf	_width,w
  5290  0A14  0458               	iorwf	_width+1,w
  5291  0A15  1D03               	btfss	3,2
  5292  0A16  2A1C               	goto	l5742
  5293  0A17  0858               	movf	_width+1,w
  5294  0A18  00B5               	movwf	ctoa@w+1
  5295  0A19  0857               	movf	_width,w
  5296  0A1A  00B4               	movwf	ctoa@w
  5297  0A1B  2A22               	goto	l5744
  5298  0A1C                     l5742:	
  5299  0A1C  0857               	movf	_width,w
  5300  0A1D  3EFF               	addlw	255
  5301  0A1E  00B4               	movwf	ctoa@w
  5302  0A1F  30FF               	movlw	255
  5303  0A20  3D58               	addwfc	_width+1,w
  5304  0A21  00B5               	movwf	ctoa@w+1
  5305  0A22                     l5744:	
  5306                           
  5307                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  5308  0A22  0831               	movf	ctoa@c,w
  5309  0A23  00B3               	movwf	??_ctoa
  5310  0A24  0833               	movf	??_ctoa,w
  5311  0A25  0022               	movlb	2	; select bank2
  5312  0A26  00A0               	movwf	_dbuf^(0+256)
  5313                           
  5314                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  5315  0A27  01A1               	clrf	(_dbuf^(0+256)+1)
  5316                           
  5317                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  5318  0A28  3020               	movlw	(low (_dbuf| (0+256)))& (0+255)
  5319  0A29  0020               	movlb	0	; select bank0
  5320  0A2A  00B3               	movwf	??_ctoa
  5321  0A2B  0833               	movf	??_ctoa,w
  5322  0A2C  00A8               	movwf	pad@buf
  5323  0A2D  0835               	movf	ctoa@w+1,w
  5324  0A2E  00AA               	movwf	pad@p+1
  5325  0A2F  0834               	movf	ctoa@w,w
  5326  0A30  00A9               	movwf	pad@p
  5327  0A31  0836               	movf	ctoa@fp,w
  5328  0A32  318C  24B3         	fcall	_pad
  5329  0A34  0020               	movlb	0	; select bank0
  5330  0A35  0829               	movf	?_pad+1,w
  5331  0A36  00B2               	movwf	?_ctoa+1
  5332  0A37  0828               	movf	?_pad,w
  5333  0A38  00B1               	movwf	?_ctoa
  5334  0A39  0008               	return
  5335  0A3A                     __end_of_ctoa:	
  5336                           
  5337                           	psect	text7
  5338  0CB3                     __ptext7:	
  5339 ;; *************** function _pad *****************
  5340 ;; Defined at:
  5341 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;  fp              1    wreg     PTR struct _IO_FILE
  5344 ;;		 -> NULL(0), 
  5345 ;;  buf             1    8[BANK0 ] PTR unsigned char 
  5346 ;;		 -> dbuf(32), 
  5347 ;;  p               2    9[BANK0 ] int 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  fp              1   16[BANK0 ] PTR struct _IO_FILE
  5350 ;;		 -> NULL(0), 
  5351 ;;  w               2   14[BANK0 ] int 
  5352 ;;  i               2   12[BANK0 ] int 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  2    8[BANK0 ] int 
  5355 ;; Registers used:
  5356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5362 ;;      Params:         0       3       0       0       0       0       0       0
  5363 ;;      Locals:         0       5       0       0       0       0       0       0
  5364 ;;      Temps:          0       1       0       0       0       0       0       0
  5365 ;;      Totals:         0       9       0       0       0       0       0       0
  5366 ;;Total ram usage:        9 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    8
  5369 ;; This function calls:
  5370 ;;		_fputc
  5371 ;;		_fputs
  5372 ;;		_strlen
  5373 ;; This function is called by:
  5374 ;;		_ctoa
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           
  5379                           ;psect for function _pad
  5380  0CB3                     _pad:	
  5381                           
  5382                           ;incstack = 0
  5383                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5384                           ;pad@fp stored from wreg
  5385  0CB3  0020               	movlb	0	; select bank0
  5386  0CB4  00B0               	movwf	pad@fp
  5387                           
  5388                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  5389  0CB5  0021               	movlb	1	; select bank1
  5390  0CB6  1C40               	btfss	_flags^(0+128),0
  5391  0CB7  2CC1               	goto	l5650
  5392                           
  5393                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  5394  0CB8  0020               	movlb	0	; select bank0
  5395  0CB9  0830               	movf	pad@fp,w
  5396  0CBA  00AB               	movwf	??_pad
  5397  0CBB  082B               	movf	??_pad,w
  5398  0CBC  00A0               	movwf	fputs@fp
  5399  0CBD  0828               	movf	pad@buf,w
  5400  0CBE  3189  2174  318C   	fcall	_fputs
  5401  0CC1                     l5650:	
  5402                           
  5403                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  5404  0CC1  0020               	movlb	0	; select bank0
  5405  0CC2  1BAA               	btfsc	pad@p+1,7
  5406  0CC3  2CC9               	goto	l5654
  5407  0CC4  082A               	movf	pad@p+1,w
  5408  0CC5  00AF               	movwf	pad@w+1
  5409  0CC6  0829               	movf	pad@p,w
  5410  0CC7  00AE               	movwf	pad@w
  5411  0CC8  2CCB               	goto	l1236
  5412  0CC9                     l5654:	
  5413  0CC9  01AE               	clrf	pad@w
  5414  0CCA  01AF               	clrf	pad@w+1
  5415  0CCB                     l1236:	
  5416                           
  5417                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  5418  0CCB  01AC               	clrf	pad@i
  5419  0CCC  01AD               	clrf	pad@i+1
  5420  0CCD                     l5660:	
  5421                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5422                           
  5423                           
  5424                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5425  0CCD  082D               	movf	pad@i+1,w
  5426  0CCE  3A80               	xorlw	128
  5427  0CCF  00AB               	movwf	??_pad
  5428  0CD0  082F               	movf	pad@w+1,w
  5429  0CD1  3A80               	xorlw	128
  5430  0CD2  022B               	subwf	??_pad,w
  5431  0CD3  1D03               	skipz
  5432  0CD4  2CD7               	goto	u4605
  5433  0CD5  082E               	movf	pad@w,w
  5434  0CD6  022C               	subwf	pad@i,w
  5435  0CD7                     u4605:	
  5436  0CD7  1803               	btfsc	3,0
  5437  0CD8  2CEB               	goto	l1239
  5438                           
  5439                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  5440  0CD9  3020               	movlw	32
  5441  0CDA  00F4               	movwf	fputc@c
  5442  0CDB  3000               	movlw	0
  5443  0CDC  00F5               	movwf	fputc@c+1
  5444  0CDD  0020               	movlb	0	; select bank0
  5445  0CDE  0830               	movf	pad@fp,w
  5446  0CDF  00AB               	movwf	??_pad
  5447  0CE0  082B               	movf	??_pad,w
  5448  0CE1  00F6               	movwf	fputc@fp
  5449  0CE2  318B  2383  318C   	fcall	_fputc
  5450                           
  5451                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  5452  0CE5  3001               	movlw	1
  5453  0CE6  0020               	movlb	0	; select bank0
  5454  0CE7  07AC               	addwf	pad@i,f
  5455  0CE8  3000               	movlw	0
  5456  0CE9  3DAD               	addwfc	pad@i+1,f
  5457  0CEA  2CCD               	goto	l5660
  5458  0CEB                     l1239:	
  5459                           
  5460                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  5461  0CEB  0021               	movlb	1	; select bank1
  5462  0CEC  1840               	btfsc	_flags^(0+128),0
  5463  0CED  2CF7               	goto	l1240
  5464                           
  5465                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  5466  0CEE  0020               	movlb	0	; select bank0
  5467  0CEF  0830               	movf	pad@fp,w
  5468  0CF0  00AB               	movwf	??_pad
  5469  0CF1  082B               	movf	??_pad,w
  5470  0CF2  00A0               	movwf	fputs@fp
  5471  0CF3  0828               	movf	pad@buf,w
  5472  0CF4  3189  2174  318C   	fcall	_fputs
  5473  0CF7                     l1240:	
  5474                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
  5475                           
  5476                           
  5477                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  5478  0CF7  0020               	movlb	0	; select bank0
  5479  0CF8  0828               	movf	pad@buf,w
  5480  0CF9  3188  2000         	fcall	_strlen
  5481  0CFB  0020               	movlb	0	; select bank0
  5482  0CFC  082E               	movf	pad@w,w
  5483  0CFD  0771               	addwf	?_strlen,w
  5484  0CFE  00A8               	movwf	?_pad
  5485  0CFF  082F               	movf	pad@w+1,w
  5486  0D00  3D72               	addwfc	?_strlen+1,w
  5487  0D01  00A9               	movwf	?_pad+1
  5488  0D02  0008               	return
  5489  0D03                     __end_of_pad:	
  5490                           
  5491                           	psect	text8
  5492  0800                     __ptext8:	
  5493 ;; *************** function _strlen *****************
  5494 ;; Defined at:
  5495 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;  s               1    wreg     PTR const unsigned char 
  5498 ;;		 -> dbuf(32), 
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  s               1    5[COMMON] PTR const unsigned char 
  5501 ;;		 -> dbuf(32), 
  5502 ;;  a               1    4[COMMON] PTR const unsigned char 
  5503 ;;		 -> dbuf(32), 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  2    1[COMMON] unsigned int 
  5506 ;; Registers used:
  5507 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5513 ;;      Params:         2       0       0       0       0       0       0       0
  5514 ;;      Locals:         2       0       0       0       0       0       0       0
  5515 ;;      Temps:          1       0       0       0       0       0       0       0
  5516 ;;      Totals:         5       0       0       0       0       0       0       0
  5517 ;;Total ram usage:        5 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    4
  5520 ;; This function calls:
  5521 ;;		Nothing
  5522 ;; This function is called by:
  5523 ;;		_pad
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _strlen
  5529  0800                     _strlen:	
  5530                           
  5531                           ;incstack = 0
  5532                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5533                           ;strlen@s stored from wreg
  5534  0800  00F5               	movwf	strlen@s
  5535  0801  0875               	movf	strlen@s,w
  5536  0802  00F3               	movwf	??_strlen
  5537  0803  0873               	movf	??_strlen,w
  5538  0804  00F4               	movwf	strlen@a
  5539  0805                     l3784:	
  5540  0805  0875               	movf	strlen@s,w
  5541  0806  0086               	movwf	6
  5542  0807  3001               	movlw	1	; select bank2/3
  5543  0808  0087               	movwf	7
  5544  0809  0801               	movf	1,w
  5545  080A  1903               	btfsc	3,2
  5546  080B  2811               	goto	l3786
  5547  080C  3001               	movlw	1
  5548  080D  00F3               	movwf	??_strlen
  5549  080E  0873               	movf	??_strlen,w
  5550  080F  07F5               	addwf	strlen@s,f
  5551  0810  2805               	goto	l3784
  5552  0811                     l3786:	
  5553  0811  0874               	movf	strlen@a,w
  5554  0812  0275               	subwf	strlen@s,w
  5555  0813  00F1               	movwf	?_strlen
  5556  0814  01F2               	clrf	?_strlen+1
  5557  0815  1BF1               	btfsc	?_strlen,7
  5558  0816  03F2               	decf	?_strlen+1,f
  5559  0817  0008               	return
  5560  0818                     __end_of_strlen:	
  5561                           
  5562                           	psect	text9
  5563  0974                     __ptext9:	
  5564 ;; *************** function _fputs *****************
  5565 ;; Defined at:
  5566 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;  s               1    wreg     PTR const unsigned char 
  5569 ;;		 -> dbuf(32), 
  5570 ;;  fp              1    0[BANK0 ] PTR struct _IO_FILE
  5571 ;;		 -> NULL(0), 
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  5574 ;;		 -> dbuf(32), 
  5575 ;;  i               2    5[BANK0 ] int 
  5576 ;;  c               1    4[BANK0 ] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  2    0[BANK0 ] int 
  5579 ;; Registers used:
  5580 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5586 ;;      Params:         0       1       0       0       0       0       0       0
  5587 ;;      Locals:         0       4       0       0       0       0       0       0
  5588 ;;      Temps:          0       3       0       0       0       0       0       0
  5589 ;;      Totals:         0       8       0       0       0       0       0       0
  5590 ;;Total ram usage:        8 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    7
  5593 ;; This function calls:
  5594 ;;		_fputc
  5595 ;; This function is called by:
  5596 ;;		_pad
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           
  5601                           ;psect for function _fputs
  5602  0974                     _fputs:	
  5603                           
  5604                           ;incstack = 0
  5605                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5606                           ;fputs@s stored from wreg
  5607  0974  0020               	movlb	0	; select bank0
  5608  0975  00A7               	movwf	fputs@s
  5609  0976  01A5               	clrf	fputs@i
  5610  0977  01A6               	clrf	fputs@i+1
  5611  0978                     l5412:	
  5612  0978  0825               	movf	fputs@i,w
  5613  0979  0727               	addwf	fputs@s,w
  5614  097A  00A1               	movwf	??_fputs
  5615  097B  0821               	movf	??_fputs,w
  5616  097C  0086               	movwf	6
  5617  097D  3001               	movlw	1	; select bank2/3
  5618  097E  0087               	movwf	7
  5619  097F  0801               	movf	1,w
  5620  0980  00A2               	movwf	??_fputs+1
  5621  0981  0822               	movf	??_fputs+1,w
  5622  0982  00A4               	movwf	fputs@c
  5623  0983  0824               	movf	fputs@c,w
  5624  0984  1903               	btfsc	3,2
  5625  0985  0008               	return
  5626  0986  0824               	movf	fputs@c,w
  5627  0987  00A1               	movwf	??_fputs
  5628  0988  01A2               	clrf	??_fputs+1
  5629  0989  0821               	movf	??_fputs,w
  5630  098A  00F4               	movwf	fputc@c
  5631  098B  0822               	movf	??_fputs+1,w
  5632  098C  00F5               	movwf	fputc@c+1
  5633  098D  0820               	movf	fputs@fp,w
  5634  098E  00A3               	movwf	??_fputs+2
  5635  098F  0823               	movf	??_fputs+2,w
  5636  0990  00F6               	movwf	fputc@fp
  5637  0991  318B  2383  3189   	fcall	_fputc
  5638  0994  3001               	movlw	1
  5639  0995  0020               	movlb	0	; select bank0
  5640  0996  07A5               	addwf	fputs@i,f
  5641  0997  3000               	movlw	0
  5642  0998  3DA6               	addwfc	fputs@i+1,f
  5643  0999  2978               	goto	l5412
  5644  099A                     __end_of_fputs:	
  5645                           
  5646                           	psect	text10
  5647  0B83                     __ptext10:	
  5648 ;; *************** function _fputc *****************
  5649 ;; Defined at:
  5650 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;  c               2    4[COMMON] int 
  5653 ;;  fp              1    6[COMMON] PTR struct _IO_FILE
  5654 ;;		 -> NULL(0), 
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;		None
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  2    4[COMMON] int 
  5659 ;; Registers used:
  5660 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5666 ;;      Params:         3       0       0       0       0       0       0       0
  5667 ;;      Locals:         0       0       0       0       0       0       0       0
  5668 ;;      Temps:          5       0       0       0       0       0       0       0
  5669 ;;      Totals:         8       0       0       0       0       0       0       0
  5670 ;;Total ram usage:        8 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; Hardware stack levels required when called:    6
  5673 ;; This function calls:
  5674 ;;		_putch
  5675 ;; This function is called by:
  5676 ;;		_pad
  5677 ;;		_vfpfcnvrt
  5678 ;;		_fputs
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           
  5683                           ;psect for function _fputc
  5684  0B83                     _fputc:	
  5685                           
  5686                           ;incstack = 0
  5687                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5688  0B83  0876               	movf	fputc@fp,w
  5689  0B84  1D03               	btfss	3,2
  5690  0B85  0876               	movf	fputc@fp,w
  5691  0B86  1D03               	btfss	3,2
  5692  0B87  2B8C               	goto	l3670
  5693  0B88  0874               	movf	fputc@c,w
  5694  0B89  3195  25E9         	fcall	_putch
  5695  0B8B  0008               	return
  5696  0B8C                     l3670:	
  5697  0B8C  0876               	movf	fputc@fp,w
  5698  0B8D  3E03               	addlw	3
  5699  0B8E  0086               	movwf	6
  5700  0B8F  0187               	clrf	7
  5701  0B90  0016               	moviw fsr1++
  5702  0B91  0401               	iorwf	1,w
  5703  0B92  1903               	btfsc	3,2
  5704  0B93  2BAF               	goto	l3674
  5705  0B94  0876               	movf	fputc@fp,w
  5706  0B95  3E03               	addlw	3
  5707  0B96  0086               	movwf	6
  5708  0B97  0187               	clrf	7
  5709  0B98  3F40               	moviw [0]fsr1
  5710  0B99  00F7               	movwf	??_fputc
  5711  0B9A  3F41               	moviw [1]fsr1
  5712  0B9B  00F8               	movwf	??_fputc+1
  5713  0B9C  0A76               	incf	fputc@fp,w
  5714  0B9D  0086               	movwf	6
  5715  0B9E  0187               	clrf	7
  5716  0B9F  3F40               	moviw [0]fsr1
  5717  0BA0  00F9               	movwf	??_fputc+2
  5718  0BA1  3F41               	moviw [1]fsr1
  5719  0BA2  00FA               	movwf	??_fputc+3
  5720  0BA3  087A               	movf	??_fputc+3,w
  5721  0BA4  3A80               	xorlw	128
  5722  0BA5  00FB               	movwf	??_fputc+4
  5723  0BA6  0878               	movf	??_fputc+1,w
  5724  0BA7  3A80               	xorlw	128
  5725  0BA8  027B               	subwf	??_fputc+4,w
  5726  0BA9  1D03               	skipz
  5727  0BAA  2BAD               	goto	u2205
  5728  0BAB  0877               	movf	??_fputc,w
  5729  0BAC  0279               	subwf	??_fputc+2,w
  5730  0BAD                     u2205:	
  5731  0BAD  1803               	skipnc
  5732  0BAE  0008               	return
  5733  0BAF                     l3674:	
  5734  0BAF  0A76               	incf	fputc@fp,w
  5735  0BB0  0086               	movwf	6
  5736  0BB1  0187               	clrf	7
  5737  0BB2  3001               	movlw	1
  5738  0BB3  0781               	addwf	1,f
  5739  0BB4  3141               	addfsr 1,1
  5740  0BB5  1803               	skipnc
  5741  0BB6  0A81               	incf	1,f
  5742  0BB7  0008               	return
  5743  0BB8                     __end_of_fputc:	
  5744                           
  5745                           	psect	text11
  5746  15E9                     __ptext11:	
  5747 ;; *************** function _putch *****************
  5748 ;; Defined at:
  5749 ;;		line 198 in file "mcc_generated_files/eusart.c"
  5750 ;; Parameters:    Size  Location     Type
  5751 ;;  txData          1    wreg     unsigned char 
  5752 ;; Auto vars:     Size  Location     Type
  5753 ;;  txData          1    3[COMMON] unsigned char 
  5754 ;; Return value:  Size  Location     Type
  5755 ;;                  1    wreg      void 
  5756 ;; Registers used:
  5757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5758 ;; Tracked objects:
  5759 ;;		On entry : 0/0
  5760 ;;		On exit  : 0/0
  5761 ;;		Unchanged: 0/0
  5762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5763 ;;      Params:         0       0       0       0       0       0       0       0
  5764 ;;      Locals:         1       0       0       0       0       0       0       0
  5765 ;;      Temps:          0       0       0       0       0       0       0       0
  5766 ;;      Totals:         1       0       0       0       0       0       0       0
  5767 ;;Total ram usage:        1 bytes
  5768 ;; Hardware stack levels used:    1
  5769 ;; Hardware stack levels required when called:    5
  5770 ;; This function calls:
  5771 ;;		_EUSART_Write
  5772 ;; This function is called by:
  5773 ;;		_fputc
  5774 ;; This function uses a non-reentrant model
  5775 ;;
  5776                           
  5777                           
  5778                           ;psect for function _putch
  5779  15E9                     _putch:	
  5780                           
  5781                           ;incstack = 0
  5782                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5783                           ;putch@txData stored from wreg
  5784  15E9  00F3               	movwf	putch@txData
  5785                           
  5786                           ;mcc_generated_files/eusart.c: 198: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 199: {;mcc_generated_files/eusart.c: 200:     EUSART_Write(txData);
  5787  15EA  0873               	movf	putch@txData,w
  5788  15EB  3188  20E0         	fcall	_EUSART_Write
  5789  15ED  0008               	return
  5790  15EE                     __end_of_putch:	
  5791                           
  5792                           	psect	text12
  5793  08E0                     __ptext12:	
  5794 ;; *************** function _EUSART_Write *****************
  5795 ;; Defined at:
  5796 ;;		line 170 in file "mcc_generated_files/eusart.c"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;  txData          1    wreg     unsigned char 
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;  txData          1    2[COMMON] unsigned char 
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      void 
  5803 ;; Registers used:
  5804 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5810 ;;      Params:         0       0       0       0       0       0       0       0
  5811 ;;      Locals:         1       0       0       0       0       0       0       0
  5812 ;;      Temps:          1       0       0       0       0       0       0       0
  5813 ;;      Totals:         2       0       0       0       0       0       0       0
  5814 ;;Total ram usage:        2 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    4
  5817 ;; This function calls:
  5818 ;;		Nothing
  5819 ;; This function is called by:
  5820 ;;		_putch
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           
  5825                           ;psect for function _EUSART_Write
  5826  08E0                     _EUSART_Write:	
  5827                           
  5828                           ;incstack = 0
  5829                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5830                           ;EUSART_Write@txData stored from wreg
  5831  08E0  00F2               	movwf	EUSART_Write@txData
  5832  08E1                     l3606:	
  5833                           ;mcc_generated_files/eusart.c: 170: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 171: {;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemai
      +                          ning)
  5834                           
  5835                           
  5836                           ;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemaining)
  5837  08E1  0021               	movlb	1	; select bank1
  5838  08E2  086A               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  5839  08E3  1903               	btfsc	3,2
  5840  08E4  28E1               	goto	l3606
  5841                           
  5842                           ;mcc_generated_files/eusart.c: 176:     if(0 == PIE1bits.TXIE)
  5843  08E5  1A11               	btfsc	17,4	;volatile
  5844  08E6  28EB               	goto	l742
  5845                           
  5846                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = txData;
  5847  08E7  0872               	movf	EUSART_Write@txData,w
  5848  08E8  0023               	movlb	3	; select bank3
  5849  08E9  009A               	movwf	26	;volatile
  5850                           
  5851                           ;mcc_generated_files/eusart.c: 179:     }
  5852  08EA  2900               	goto	l3620
  5853  08EB                     l742:	
  5854                           ;mcc_generated_files/eusart.c: 180:     else
  5855                           
  5856                           
  5857                           ;mcc_generated_files/eusart.c: 181:     {;mcc_generated_files/eusart.c: 182:         PIE
      +                          1bits.TXIE = 0;
  5858  08EB  1211               	bcf	17,4	;volatile
  5859                           
  5860                           ;mcc_generated_files/eusart.c: 183:         eusartTxBuffer[eusartTxHead++] = txData;
  5861  08EC  0872               	movf	EUSART_Write@txData,w
  5862  08ED  00F1               	movwf	??_EUSART_Write
  5863  08EE  0020               	movlb	0	; select bank0
  5864  08EF  0868               	movf	_eusartTxHead,w
  5865  08F0  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5866  08F1  0086               	movwf	6
  5867  08F2  0187               	clrf	7
  5868  08F3  0871               	movf	??_EUSART_Write,w
  5869  08F4  0081               	movwf	1
  5870  08F5  3001               	movlw	1
  5871  08F6  00F1               	movwf	??_EUSART_Write
  5872  08F7  0871               	movf	??_EUSART_Write,w
  5873  08F8  07E8               	addwf	_eusartTxHead,f	;volatile
  5874                           
  5875                           ;mcc_generated_files/eusart.c: 184:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5876  08F9  3008               	movlw	8
  5877  08FA  0268               	subwf	_eusartTxHead,w	;volatile
  5878  08FB  1803               	btfsc	3,0
  5879                           
  5880                           ;mcc_generated_files/eusart.c: 185:         {;mcc_generated_files/eusart.c: 186:        
      +                               eusartTxHead = 0;
  5881  08FC  01E8               	clrf	_eusartTxHead	;volatile
  5882                           
  5883                           ;mcc_generated_files/eusart.c: 188:         eusartTxBufferRemaining--;
  5884  08FD  3001               	movlw	1
  5885  08FE  0021               	movlb	1	; select bank1
  5886  08FF  02EA               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  5887  0900                     l3620:	
  5888                           
  5889                           ;mcc_generated_files/eusart.c: 190:     PIE1bits.TXIE = 1;
  5890  0900  0021               	movlb	1	; select bank1
  5891  0901  1611               	bsf	17,4	;volatile
  5892  0902  0008               	return
  5893  0903                     __end_of_EUSART_Write:	
  5894                           
  5895                           	psect	text13
  5896  094E                     __ptext13:	
  5897 ;; *************** function _check_data *****************
  5898 ;; Defined at:
  5899 ;;		line 289 in file "main.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  x               1    wreg     unsigned char 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  x               1    3[COMMON] unsigned char 
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  1    wreg      _Bool 
  5906 ;; Registers used:
  5907 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5913 ;;      Params:         0       0       0       0       0       0       0       0
  5914 ;;      Locals:         1       0       0       0       0       0       0       0
  5915 ;;      Temps:          2       0       0       0       0       0       0       0
  5916 ;;      Totals:         3       0       0       0       0       0       0       0
  5917 ;;Total ram usage:        3 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    4
  5920 ;; This function calls:
  5921 ;;		Nothing
  5922 ;; This function is called by:
  5923 ;;		_main
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           
  5928                           ;psect for function _check_data
  5929  094E                     _check_data:	
  5930                           
  5931                           ;incstack = 0
  5932                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  5933                           ;check_data@x stored from wreg
  5934  094E  00F3               	movwf	check_data@x
  5935                           
  5936                           ;main.c: 289: _Bool check_data(uint8_t x);main.c: 290: {;main.c: 291:     switch(x)
  5937  094F  2954               	goto	l4834
  5938  0950                     l4800:	
  5939  0950  3001               	movlw	1
  5940  0951  0008               	return
  5941  0952                     l4828:	
  5942  0952  3000               	movlw	0
  5943  0953  0008               	return
  5944  0954                     l4834:	
  5945  0954  0873               	movf	check_data@x,w
  5946  0955  00F1               	movwf	??_check_data
  5947  0956  01F2               	clrf	??_check_data+1
  5948                           
  5949                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5950                           ; Switch size 1, requested type "simple"
  5951                           ; Number of cases is 1, Range of values is 0 to 0
  5952                           ; switch strategies available:
  5953                           ; Name         Instructions Cycles
  5954                           ; simple_byte            4     3 (average)
  5955                           ; direct_byte            8     6 (fixed)
  5956                           ; jumptable            260     6 (fixed)
  5957                           ;	Chosen strategy is simple_byte
  5958  0957  0872               	movf	??_check_data+1,w
  5959  0958  3A00               	xorlw	0	; case 0
  5960  0959  1903               	skipnz
  5961  095A  295C               	goto	l6588
  5962  095B  2952               	goto	l4828
  5963  095C                     l6588:	
  5964                           
  5965                           ; Switch size 1, requested type "simple"
  5966                           ; Number of cases is 7, Range of values is 48 to 85
  5967                           ; switch strategies available:
  5968                           ; Name         Instructions Cycles
  5969                           ; simple_byte           22    12 (average)
  5970                           ; direct_byte           85     9 (fixed)
  5971                           ; jumptable            263     9 (fixed)
  5972                           ;	Chosen strategy is simple_byte
  5973  095C  0871               	movf	??_check_data,w
  5974  095D  3A30               	xorlw	48	; case 48
  5975  095E  1903               	skipnz
  5976  095F  2950               	goto	l4800
  5977  0960  3A01               	xorlw	1	; case 49
  5978  0961  1903               	skipnz
  5979  0962  2950               	goto	l4800
  5980  0963  3A03               	xorlw	3	; case 50
  5981  0964  1903               	skipnz
  5982  0965  2950               	goto	l4800
  5983  0966  3A01               	xorlw	1	; case 51
  5984  0967  1903               	skipnz
  5985  0968  2950               	goto	l4800
  5986  0969  3A75               	xorlw	117	; case 70
  5987  096A  1903               	skipnz
  5988  096B  2950               	goto	l4800
  5989  096C  3A12               	xorlw	18	; case 84
  5990  096D  1903               	skipnz
  5991  096E  2950               	goto	l4800
  5992  096F  3A01               	xorlw	1	; case 85
  5993  0970  1903               	skipnz
  5994  0971  2950               	goto	l4800
  5995  0972  2952               	goto	l4828
  5996  0973  0008               	return
  5997  0974                     __end_of_check_data:	
  5998                           
  5999                           	psect	text14
  6000  1728                     __ptext14:	
  6001 ;; *************** function _SYSTEM_Initialize *****************
  6002 ;; Defined at:
  6003 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;		None
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;		None
  6008 ;; Return value:  Size  Location     Type
  6009 ;;                  1    wreg      void 
  6010 ;; Registers used:
  6011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6017 ;;      Params:         0       0       0       0       0       0       0       0
  6018 ;;      Locals:         0       0       0       0       0       0       0       0
  6019 ;;      Temps:          0       0       0       0       0       0       0       0
  6020 ;;      Totals:         0       0       0       0       0       0       0       0
  6021 ;;Total ram usage:        0 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    9
  6024 ;; This function calls:
  6025 ;;		_EUSART_Initialize
  6026 ;;		_MTOUCH_Initialize
  6027 ;;		_OSCILLATOR_Initialize
  6028 ;;		_PIN_MANAGER_Initialize
  6029 ;;		_TMR2_Initialize
  6030 ;;		_WDT_Initialize
  6031 ;; This function is called by:
  6032 ;;		_main
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           
  6037                           ;psect for function _SYSTEM_Initialize
  6038  1728                     _SYSTEM_Initialize:	
  6039                           
  6040                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  6041                           
  6042                           ;incstack = 0
  6043                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6044  1728  3188  2087  3197   	fcall	_PIN_MANAGER_Initialize
  6045                           
  6046                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  6047  172B  3196  2618  3197   	fcall	_OSCILLATOR_Initialize
  6048                           
  6049                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  6050  172E  3195  25E0  3197   	fcall	_WDT_Initialize
  6051                           
  6052                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  6053  1731  3196  2647  3197   	fcall	_TMR2_Initialize
  6054                           
  6055                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  6056  1734  318C  2425  3197   	fcall	_EUSART_Initialize
  6057                           
  6058                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  6059  1737  3196  2664         	fcall	_MTOUCH_Initialize
  6060  1739  0008               	return
  6061  173A                     __end_of_SYSTEM_Initialize:	
  6062                           
  6063                           	psect	text15
  6064  15E0                     __ptext15:	
  6065 ;; *************** function _WDT_Initialize *****************
  6066 ;; Defined at:
  6067 ;;		line 69 in file "mcc_generated_files/mcc.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;		None
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;		None
  6072 ;; Return value:  Size  Location     Type
  6073 ;;                  1    wreg      void 
  6074 ;; Registers used:
  6075 ;;		wreg
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6081 ;;      Params:         0       0       0       0       0       0       0       0
  6082 ;;      Locals:         0       0       0       0       0       0       0       0
  6083 ;;      Temps:          0       0       0       0       0       0       0       0
  6084 ;;      Totals:         0       0       0       0       0       0       0       0
  6085 ;;Total ram usage:        0 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    4
  6088 ;; This function calls:
  6089 ;;		Nothing
  6090 ;; This function is called by:
  6091 ;;		_SYSTEM_Initialize
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           
  6096                           ;psect for function _WDT_Initialize
  6097  15E0                     _WDT_Initialize:	
  6098                           
  6099                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  6100                           
  6101                           ;incstack = 0
  6102                           ; Regs used in _WDT_Initialize: [wreg]
  6103  15E0  3016               	movlw	22
  6104  15E1  0021               	movlb	1	; select bank1
  6105  15E2  0097               	movwf	23	;volatile
  6106  15E3  0008               	return
  6107  15E4                     __end_of_WDT_Initialize:	
  6108                           
  6109                           	psect	text16
  6110  1647                     __ptext16:	
  6111 ;; *************** function _TMR2_Initialize *****************
  6112 ;; Defined at:
  6113 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;		None
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;		None
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  1    wreg      void 
  6120 ;; Registers used:
  6121 ;;		wreg, status,2
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6127 ;;      Params:         0       0       0       0       0       0       0       0
  6128 ;;      Locals:         0       0       0       0       0       0       0       0
  6129 ;;      Temps:          0       0       0       0       0       0       0       0
  6130 ;;      Totals:         0       0       0       0       0       0       0       0
  6131 ;;Total ram usage:        0 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    4
  6134 ;; This function calls:
  6135 ;;		Nothing
  6136 ;; This function is called by:
  6137 ;;		_SYSTEM_Initialize
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function _TMR2_Initialize
  6143  1647                     _TMR2_Initialize:	
  6144                           
  6145                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  6146                           
  6147                           ;incstack = 0
  6148                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6149  1647  30FF               	movlw	255
  6150  1648  0020               	movlb	0	; select bank0
  6151  1649  009B               	movwf	27	;volatile
  6152                           
  6153                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  6154  164A  019A               	clrf	26	;volatile
  6155                           
  6156                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  6157  164B  1091               	bcf	17,1	;volatile
  6158                           
  6159                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  6160  164C  3004               	movlw	4
  6161  164D  009C               	movwf	28	;volatile
  6162  164E  0008               	return
  6163  164F                     __end_of_TMR2_Initialize:	
  6164                           
  6165                           	psect	text17
  6166  0887                     __ptext17:	
  6167 ;; *************** function _PIN_MANAGER_Initialize *****************
  6168 ;; Defined at:
  6169 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;		None
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;		None
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  1    wreg      void 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6183 ;;      Params:         0       0       0       0       0       0       0       0
  6184 ;;      Locals:         0       0       0       0       0       0       0       0
  6185 ;;      Temps:          0       0       0       0       0       0       0       0
  6186 ;;      Totals:         0       0       0       0       0       0       0       0
  6187 ;;Total ram usage:        0 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; Hardware stack levels required when called:    4
  6190 ;; This function calls:
  6191 ;;		Nothing
  6192 ;; This function is called by:
  6193 ;;		_SYSTEM_Initialize
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           
  6198                           ;psect for function _PIN_MANAGER_Initialize
  6199  0887                     _PIN_MANAGER_Initialize:	
  6200                           
  6201                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  6202                           
  6203                           ;incstack = 0
  6204                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6205  0887  3037               	movlw	55
  6206  0888  0022               	movlb	2	; select bank2
  6207  0889  008C               	movwf	12	;volatile
  6208                           
  6209                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x60;
  6210  088A  3060               	movlw	96
  6211  088B  008D               	movwf	13	;volatile
  6212                           
  6213                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xAC;
  6214  088C  30AC               	movlw	172
  6215  088D  008E               	movwf	14	;volatile
  6216                           
  6217                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  6218  088E  3008               	movlw	8
  6219  088F  0021               	movlb	1	; select bank1
  6220  0890  008C               	movwf	12	;volatile
  6221                           
  6222                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x60;
  6223  0891  3060               	movlw	96
  6224  0892  008D               	movwf	13	;volatile
  6225                           
  6226                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xE2;
  6227  0893  30E2               	movlw	226
  6228  0894  008E               	movwf	14	;volatile
  6229                           
  6230                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xEE;
  6231  0895  30EE               	movlw	238
  6232  0896  0023               	movlb	3	; select bank3
  6233  0897  008E               	movwf	14	;volatile
  6234                           
  6235                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  6236  0898  3040               	movlw	64
  6237  0899  008D               	movwf	13	;volatile
  6238                           
  6239                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  6240  089A  3037               	movlw	55
  6241  089B  008C               	movwf	12	;volatile
  6242                           
  6243                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  6244  089C  0024               	movlb	4	; select bank4
  6245  089D  018D               	clrf	13	;volatile
  6246                           
  6247                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  6248  089E  018C               	clrf	12	;volatile
  6249                           
  6250                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  6251  089F  0021               	movlb	1	; select bank1
  6252  08A0  1795               	bsf	21,7	;volatile
  6253                           
  6254                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  6255  08A1  0022               	movlb	2	; select bank2
  6256  08A2  019D               	clrf	29	;volatile
  6257  08A3  0008               	return
  6258  08A4                     __end_of_PIN_MANAGER_Initialize:	
  6259                           
  6260                           	psect	text18
  6261  1618                     __ptext18:	
  6262 ;; *************** function _OSCILLATOR_Initialize *****************
  6263 ;; Defined at:
  6264 ;;		line 61 in file "mcc_generated_files/mcc.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      void 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6278 ;;      Params:         0       0       0       0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0       0
  6281 ;;      Totals:         0       0       0       0       0       0       0       0
  6282 ;;Total ram usage:        0 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    4
  6285 ;; This function calls:
  6286 ;;		Nothing
  6287 ;; This function is called by:
  6288 ;;		_SYSTEM_Initialize
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           
  6293                           ;psect for function _OSCILLATOR_Initialize
  6294  1618                     _OSCILLATOR_Initialize:	
  6295                           
  6296                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  6297                           
  6298                           ;incstack = 0
  6299                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6300  1618  30F0               	movlw	240
  6301  1619  0021               	movlb	1	; select bank1
  6302  161A  0099               	movwf	25	;volatile
  6303                           
  6304                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  6305  161B  0022               	movlb	2	; select bank2
  6306  161C  0196               	clrf	22	;volatile
  6307  161D  0008               	return
  6308  161E                     __end_of_OSCILLATOR_Initialize:	
  6309                           
  6310                           	psect	text19
  6311  1664                     __ptext19:	
  6312 ;; *************** function _MTOUCH_Initialize *****************
  6313 ;; Defined at:
  6314 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  6315 ;; Parameters:    Size  Location     Type
  6316 ;;		None
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;		None
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  1    wreg      void 
  6321 ;; Registers used:
  6322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6328 ;;      Params:         0       0       0       0       0       0       0       0
  6329 ;;      Locals:         0       0       0       0       0       0       0       0
  6330 ;;      Temps:          0       0       0       0       0       0       0       0
  6331 ;;      Totals:         0       0       0       0       0       0       0       0
  6332 ;;Total ram usage:        0 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    8
  6335 ;; This function calls:
  6336 ;;		_MTOUCH_Button_InitializeAll
  6337 ;;		_MTOUCH_Sensor_InitializeAll
  6338 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6339 ;;		_MTOUCH_Sensor_Scan_Initialize
  6340 ;; This function is called by:
  6341 ;;		_SYSTEM_Initialize
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           
  6346                           ;psect for function _MTOUCH_Initialize
  6347  1664                     _MTOUCH_Initialize:	
  6348                           
  6349                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  6350                           
  6351                           ;incstack = 0
  6352                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6353  1664  3196  26A6  3196   	fcall	_MTOUCH_Sensor_InitializeAll
  6354                           
  6355                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  6356  1667  3188  204F  3196   	fcall	_MTOUCH_Button_InitializeAll
  6357                           
  6358                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  6359  166A  3197  273A  3196   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  6360                           
  6361                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  6362  166D  3196  26C4         	fcall	_MTOUCH_Sensor_Scan_Initialize
  6363  166F  0008               	return
  6364  1670                     __end_of_MTOUCH_Initialize:	
  6365                           
  6366                           	psect	text20
  6367  16A6                     __ptext20:	
  6368 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  6369 ;; Defined at:
  6370 ;;		line 214 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6371 ;; Parameters:    Size  Location     Type
  6372 ;;		None
  6373 ;; Auto vars:     Size  Location     Type
  6374 ;;  sensor          1   10[COMMON] enum E2854
  6375 ;; Return value:  Size  Location     Type
  6376 ;;                  1    wreg      void 
  6377 ;; Registers used:
  6378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6379 ;; Tracked objects:
  6380 ;;		On entry : 0/0
  6381 ;;		On exit  : 0/0
  6382 ;;		Unchanged: 0/0
  6383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6384 ;;      Params:         0       0       0       0       0       0       0       0
  6385 ;;      Locals:         1       0       0       0       0       0       0       0
  6386 ;;      Temps:          1       0       0       0       0       0       0       0
  6387 ;;      Totals:         2       0       0       0       0       0       0       0
  6388 ;;Total ram usage:        2 bytes
  6389 ;; Hardware stack levels used:    1
  6390 ;; Hardware stack levels required when called:    7
  6391 ;; This function calls:
  6392 ;;		_MTOUCH_Sensor_Initialize
  6393 ;; This function is called by:
  6394 ;;		_MTOUCH_Initialize
  6395 ;; This function uses a non-reentrant model
  6396 ;;
  6397                           
  6398                           
  6399                           ;psect for function _MTOUCH_Sensor_InitializeAll
  6400  16A6                     _MTOUCH_Sensor_InitializeAll:	
  6401                           
  6402                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 216:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 218:     for (sensor = 0; sensor < 2u; sensor
      +                          ++)
  6403                           
  6404                           ;incstack = 0
  6405                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6406  16A6  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  6407  16A7                     l5926:	
  6408                           
  6409                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 219:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 220:         MTOUCH_Sensor_Initialize(sensor);
  6410  16A7  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  6411  16A8  3197  2777  3196   	fcall	_MTOUCH_Sensor_Initialize
  6412                           
  6413                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 221:     }
  6414  16AB  3001               	movlw	1
  6415  16AC  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  6416  16AD  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  6417  16AE  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  6418  16AF  3002               	movlw	2
  6419  16B0  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  6420  16B1  1803               	btfsc	3,0
  6421  16B2  0008               	return
  6422  16B3  2EA7               	goto	l5926
  6423  16B4                     __end_of_MTOUCH_Sensor_InitializeAll:	
  6424                           
  6425                           	psect	text21
  6426  1777                     __ptext21:	
  6427 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  6428 ;; Defined at:
  6429 ;;		line 199 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;  sensor          1    wreg     enum E2854
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  sensor          1    8[COMMON] enum E2854
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      enum E2857
  6436 ;; Registers used:
  6437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6443 ;;      Params:         0       0       0       0       0       0       0       0
  6444 ;;      Locals:         1       0       0       0       0       0       0       0
  6445 ;;      Temps:          1       0       0       0       0       0       0       0
  6446 ;;      Totals:         2       0       0       0       0       0       0       0
  6447 ;;Total ram usage:        2 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    6
  6450 ;; This function calls:
  6451 ;;		_MTOUCH_Sensor_Calibrate
  6452 ;;		_MTOUCH_Sensor_Enable
  6453 ;;		_Sensor_Sampled_Reset
  6454 ;;		___bmul
  6455 ;; This function is called by:
  6456 ;;		_MTOUCH_Sensor_InitializeAll
  6457 ;; This function uses a non-reentrant model
  6458 ;;
  6459                           
  6460                           
  6461                           ;psect for function _MTOUCH_Sensor_Initialize
  6462  1777                     _MTOUCH_Sensor_Initialize:	
  6463                           
  6464                           ;incstack = 0
  6465                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6466                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  6467  1777  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  6468                           
  6469                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 199: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           200: {;mcc_generated_files/mtouch/mtouch_sensor.c: 202:     MTOUCH_Sensor_Enable(sensor
      +                          );
  6470  1778  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6471  1779  3197  2706  3197   	fcall	_MTOUCH_Sensor_Enable
  6472                           
  6473                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 203:     MTOUCH_Sensor_Calibrate(sensor);
  6474  177C  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6475  177D  3196  26F5  3197   	fcall	_MTOUCH_Sensor_Calibrate
  6476                           
  6477                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 204:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  6478  1780  3009               	movlw	9
  6479  1781  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  6480  1782  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  6481  1783  00F1               	movwf	___bmul@multiplicand
  6482  1784  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6483  1785  3196  26E4  3197   	fcall	___bmul
  6484  1788  3ECE               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  6485  1789  3187  27F9         	fcall	_Sensor_Sampled_Reset
  6486  178B  0008               	return
  6487  178C                     __end_of_MTOUCH_Sensor_Initialize:	
  6488                           
  6489                           	psect	text22
  6490  1706                     __ptext22:	
  6491 ;; *************** function _MTOUCH_Sensor_Enable *****************
  6492 ;; Defined at:
  6493 ;;		line 832 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;  sensor          1    wreg     enum E2854
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;  sensor          1    6[COMMON] enum E2854
  6498 ;; Return value:  Size  Location     Type
  6499 ;;                  1    wreg      void 
  6500 ;; Registers used:
  6501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6507 ;;      Params:         0       0       0       0       0       0       0       0
  6508 ;;      Locals:         1       0       0       0       0       0       0       0
  6509 ;;      Temps:          1       0       0       0       0       0       0       0
  6510 ;;      Totals:         2       0       0       0       0       0       0       0
  6511 ;;Total ram usage:        2 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; Hardware stack levels required when called:    5
  6514 ;; This function calls:
  6515 ;;		___bmul
  6516 ;; This function is called by:
  6517 ;;		_MTOUCH_Sensor_Initialize
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           
  6522                           ;psect for function _MTOUCH_Sensor_Enable
  6523  1706                     _MTOUCH_Sensor_Enable:	
  6524                           
  6525                           ;incstack = 0
  6526                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6527                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  6528  1706  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  6529                           
  6530                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 832: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 833: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 834:     if(sensor < 2u)
  6531  1707  3002               	movlw	2
  6532  1708  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  6533  1709  1803               	skipnc
  6534  170A  0008               	return
  6535                           
  6536                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 835:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  6537  170B  3009               	movlw	9
  6538  170C  00F5               	movwf	??_MTOUCH_Sensor_Enable
  6539  170D  0875               	movf	??_MTOUCH_Sensor_Enable,w
  6540  170E  00F1               	movwf	___bmul@multiplicand
  6541  170F  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  6542  1710  3196  26E4         	fcall	___bmul
  6543  1712  3ED6               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  6544  1713  0086               	movwf	6
  6545  1714  0187               	clrf	7
  6546  1715  1581               	bsf	1,3
  6547  1716  0008               	return
  6548  1717                     __end_of_MTOUCH_Sensor_Enable:	
  6549                           
  6550                           	psect	text23
  6551  084F                     __ptext23:	
  6552 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  6553 ;; Defined at:
  6554 ;;		line 163 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;		None
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;  button          1    0[BANK0 ] enum E3068
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  1    wreg      void 
  6561 ;; Registers used:
  6562 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6568 ;;      Params:         0       0       0       0       0       0       0       0
  6569 ;;      Locals:         0       1       0       0       0       0       0       0
  6570 ;;      Temps:          1       0       0       0       0       0       0       0
  6571 ;;      Totals:         1       1       0       0       0       0       0       0
  6572 ;;Total ram usage:        2 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    7
  6575 ;; This function calls:
  6576 ;;		_MTOUCH_Button_Initialize
  6577 ;;		_memcpy
  6578 ;; This function is called by:
  6579 ;;		_MTOUCH_Initialize
  6580 ;; This function uses a non-reentrant model
  6581 ;;
  6582                           
  6583                           
  6584                           ;psect for function _MTOUCH_Button_InitializeAll
  6585  084F                     _MTOUCH_Button_InitializeAll:	
  6586                           
  6587                           ;mcc_generated_files/mtouch/mtouch_button.c: 165:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 167:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  6588                           
  6589                           ;incstack = 0
  6590                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6591  084F  3000               	movlw	low (_mtouch_button_init| (0+32768))
  6592  0850  00F1               	movwf	memcpy@s1
  6593  0851  3090               	movlw	high (_mtouch_button_init| (0+32768))
  6594  0852  00F2               	movwf	memcpy@s1+1
  6595  0853  3020               	movlw	32
  6596  0854  00F3               	movwf	memcpy@n
  6597  0855  3000               	movlw	0
  6598  0856  00F4               	movwf	memcpy@n+1
  6599  0857  3040               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  6600  0858  318A  223A  3188   	fcall	_memcpy
  6601                           
  6602                           ;mcc_generated_files/mtouch/mtouch_button.c: 169:     for (button = 0; button < 2u; butt
      +                          on++)
  6603  085B  0020               	movlb	0	; select bank0
  6604  085C  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  6605  085D                     l5940:	
  6606                           
  6607                           ;mcc_generated_files/mtouch/mtouch_button.c: 170:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 171:         MTOUCH_Button_Initialize(button);
  6608  085D  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  6609  085E  318B  23B8  3188   	fcall	_MTOUCH_Button_Initialize
  6610                           
  6611                           ;mcc_generated_files/mtouch/mtouch_button.c: 172:     }
  6612  0861  3001               	movlw	1
  6613  0862  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  6614  0863  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  6615  0864  0020               	movlb	0	; select bank0
  6616  0865  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  6617  0866  3002               	movlw	2
  6618  0867  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  6619  0868  1803               	btfsc	3,0
  6620  0869  0008               	return
  6621  086A  285D               	goto	l5940
  6622  086B                     __end_of_MTOUCH_Button_InitializeAll:	
  6623                           
  6624                           	psect	text24
  6625  0A3A                     __ptext24:	
  6626 ;; *************** function _memcpy *****************
  6627 ;; Defined at:
  6628 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;  d1              1    wreg     PTR void 
  6631 ;;		 -> mtouch_button(32), 
  6632 ;;  s1              2    1[COMMON] PTR const void 
  6633 ;;		 -> mtouch_button_init(32), 
  6634 ;;  n               2    3[COMMON] unsigned int 
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  d1              1    9[COMMON] PTR void 
  6637 ;;		 -> mtouch_button(32), 
  6638 ;;  s               2    7[COMMON] PTR const unsigned char 
  6639 ;;		 -> mtouch_button_init(32), 
  6640 ;;  d               1   10[COMMON] PTR unsigned char 
  6641 ;;		 -> mtouch_button(32), 
  6642 ;;  tmp             1    6[COMMON] unsigned char 
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      PTR void 
  6645 ;; Registers used:
  6646 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6652 ;;      Params:         4       0       0       0       0       0       0       0
  6653 ;;      Locals:         5       0       0       0       0       0       0       0
  6654 ;;      Temps:          1       0       0       0       0       0       0       0
  6655 ;;      Totals:        10       0       0       0       0       0       0       0
  6656 ;;Total ram usage:       10 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    4
  6659 ;; This function calls:
  6660 ;;		Nothing
  6661 ;; This function is called by:
  6662 ;;		_MTOUCH_Button_InitializeAll
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           
  6667                           ;psect for function _memcpy
  6668  0A3A                     _memcpy:	
  6669                           
  6670                           ;incstack = 0
  6671                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  6672                           ;memcpy@d1 stored from wreg
  6673  0A3A  00F9               	movwf	memcpy@d1
  6674  0A3B  0872               	movf	memcpy@s1+1,w
  6675  0A3C  00F8               	movwf	memcpy@s+1
  6676  0A3D  0871               	movf	memcpy@s1,w
  6677  0A3E  00F7               	movwf	memcpy@s
  6678  0A3F  0879               	movf	memcpy@d1,w
  6679  0A40  00F5               	movwf	??_memcpy
  6680  0A41  0875               	movf	??_memcpy,w
  6681  0A42  00FA               	movwf	memcpy@d
  6682  0A43                     l5824:	
  6683  0A43  3001               	movlw	1
  6684  0A44  02F3               	subwf	memcpy@n,f
  6685  0A45  3000               	movlw	0
  6686  0A46  3BF4               	subwfb	memcpy@n+1,f
  6687  0A47  0A73               	incf	memcpy@n,w
  6688  0A48  1903               	btfsc	3,2
  6689  0A49  0A74               	incf	memcpy@n+1,w
  6690  0A4A  1903               	btfsc	3,2
  6691  0A4B  0008               	return
  6692  0A4C  0877               	movf	memcpy@s,w
  6693  0A4D  0084               	movwf	4
  6694  0A4E  0878               	movf	memcpy@s+1,w
  6695  0A4F  0085               	movwf	5
  6696  0A50  0800               	movf	0,w	;code access
  6697  0A51  00F5               	movwf	??_memcpy
  6698  0A52  0875               	movf	??_memcpy,w
  6699  0A53  00F6               	movwf	memcpy@tmp
  6700  0A54  3001               	movlw	1
  6701  0A55  07F7               	addwf	memcpy@s,f
  6702  0A56  3000               	movlw	0
  6703  0A57  3DF8               	addwfc	memcpy@s+1,f
  6704  0A58  0876               	movf	memcpy@tmp,w
  6705  0A59  00F5               	movwf	??_memcpy
  6706  0A5A  087A               	movf	memcpy@d,w
  6707  0A5B  0086               	movwf	6
  6708  0A5C  3001               	movlw	1	; select bank2/3
  6709  0A5D  0087               	movwf	7
  6710  0A5E  0875               	movf	??_memcpy,w
  6711  0A5F  0081               	movwf	1
  6712  0A60  3001               	movlw	1
  6713  0A61  00F5               	movwf	??_memcpy
  6714  0A62  0875               	movf	??_memcpy,w
  6715  0A63  07FA               	addwf	memcpy@d,f
  6716  0A64  2A43               	goto	l5824
  6717  0A65                     __end_of_memcpy:	
  6718                           
  6719                           	psect	text25
  6720  0C25                     __ptext25:	
  6721 ;; *************** function _EUSART_Initialize *****************
  6722 ;; Defined at:
  6723 ;;		line 85 in file "mcc_generated_files/eusart.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;		None
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1    wreg      void 
  6730 ;; Registers used:
  6731 ;;		wreg, status,2, status,0, pclath, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6737 ;;      Params:         0       0       0       0       0       0       0       0
  6738 ;;      Locals:         0       0       0       0       0       0       0       0
  6739 ;;      Temps:          1       0       0       0       0       0       0       0
  6740 ;;      Totals:         1       0       0       0       0       0       0       0
  6741 ;;Total ram usage:        1 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    5
  6744 ;; This function calls:
  6745 ;;		_EUSART_SetErrorHandler
  6746 ;;		_EUSART_SetFramingErrorHandler
  6747 ;;		_EUSART_SetOverrunErrorHandler
  6748 ;;		_EUSART_SetRxInterruptHandler
  6749 ;;		_EUSART_SetTxInterruptHandler
  6750 ;; This function is called by:
  6751 ;;		_SYSTEM_Initialize
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           
  6756                           ;psect for function _EUSART_Initialize
  6757  0C25                     _EUSART_Initialize:	
  6758                           
  6759                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
  6760                           
  6761                           ;incstack = 0
  6762                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6763  0C25  0021               	movlb	1	; select bank1
  6764  0C26  1291               	bcf	17,5	;volatile
  6765                           
  6766                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  6767  0C27  301F               	movlw	low _EUSART_Receive_ISR
  6768  0C28  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  6769  0C29  300B               	movlw	high _EUSART_Receive_ISR
  6770  0C2A  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  6771  0C2B  3196  260C  318C   	fcall	_EUSART_SetRxInterruptHandler
  6772                           
  6773                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
  6774  0C2E  0021               	movlb	1	; select bank1
  6775  0C2F  1211               	bcf	17,4	;volatile
  6776                           
  6777                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  6778  0C30  30A4               	movlw	low _EUSART_Transmit_ISR
  6779  0C31  00F1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  6780  0C32  3008               	movlw	high _EUSART_Transmit_ISR
  6781  0C33  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  6782  0C34  3196  2612  318C   	fcall	_EUSART_SetTxInterruptHandler
  6783                           
  6784                           ;mcc_generated_files/eusart.c: 95:     BAUDCON = 0x0A;
  6785  0C37  300A               	movlw	10
  6786  0C38  0023               	movlb	3	; select bank3
  6787  0C39  009F               	movwf	31	;volatile
  6788                           
  6789                           ;mcc_generated_files/eusart.c: 98:     RCSTA = 0x90;
  6790  0C3A  3090               	movlw	144
  6791  0C3B  009D               	movwf	29	;volatile
  6792                           
  6793                           ;mcc_generated_files/eusart.c: 101:     TXSTA = 0x24;
  6794  0C3C  3024               	movlw	36
  6795  0C3D  009E               	movwf	30	;volatile
  6796                           
  6797                           ;mcc_generated_files/eusart.c: 104:     SPBRGL = 0x40;
  6798  0C3E  3040               	movlw	64
  6799  0C3F  009B               	movwf	27	;volatile
  6800                           
  6801                           ;mcc_generated_files/eusart.c: 107:     SPBRGH = 0x03;
  6802  0C40  3003               	movlw	3
  6803  0C41  009C               	movwf	28	;volatile
  6804                           
  6805                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  6806  0C42  30B7               	movlw	low _EUSART_DefaultFramingErrorHandler
  6807  0C43  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6808  0C44  3015               	movlw	high _EUSART_DefaultFramingErrorHandler
  6809  0C45  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6810  0C46  3196  2600  318C   	fcall	_EUSART_SetFramingErrorHandler
  6811                           
  6812                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  6813  0C49  30CC               	movlw	low _EUSART_DefaultOverrunErrorHandler
  6814  0C4A  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6815  0C4B  3015               	movlw	high _EUSART_DefaultOverrunErrorHandler
  6816  0C4C  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6817  0C4D  3196  2606  318C   	fcall	_EUSART_SetOverrunErrorHandler
  6818                           
  6819                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  6820  0C50  30BA               	movlw	low _EUSART_DefaultErrorHandler
  6821  0C51  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  6822  0C52  3015               	movlw	high _EUSART_DefaultErrorHandler
  6823  0C53  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6824  0C54  3195  25FA         	fcall	_EUSART_SetErrorHandler
  6825                           
  6826                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
  6827  0C56  0020               	movlb	0	; select bank0
  6828  0C57  01E4               	clrf	_eusartRxLastError	;volatile
  6829                           
  6830                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
  6831  0C58  01E8               	clrf	_eusartTxHead	;volatile
  6832                           
  6833                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
  6834  0C59  01E7               	clrf	_eusartTxTail	;volatile
  6835                           
  6836                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  6837  0C5A  3008               	movlw	8
  6838  0C5B  00F3               	movwf	??_EUSART_Initialize
  6839  0C5C  0873               	movf	??_EUSART_Initialize,w
  6840  0C5D  0021               	movlb	1	; select bank1
  6841  0C5E  00EA               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  6842                           
  6843                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
  6844  0C5F  01FC               	clrf	_eusartRxHead	;volatile
  6845                           
  6846                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
  6847  0C60  0020               	movlb	0	; select bank0
  6848  0C61  01E6               	clrf	_eusartRxTail	;volatile
  6849                           
  6850                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
  6851  0C62  01E5               	clrf	_eusartRxCount	;volatile
  6852                           
  6853                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
  6854  0C63  0021               	movlb	1	; select bank1
  6855  0C64  1691               	bsf	17,5	;volatile
  6856  0C65  0008               	return
  6857  0C66                     __end_of_EUSART_Initialize:	
  6858                           
  6859                           	psect	text26
  6860  1612                     __ptext26:	
  6861 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  6862 ;; Defined at:
  6863 ;;		line 282 in file "mcc_generated_files/eusart.c"
  6864 ;; Parameters:    Size  Location     Type
  6865 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6866 ;;		 -> EUSART_Transmit_ISR(1), 
  6867 ;; Auto vars:     Size  Location     Type
  6868 ;;		None
  6869 ;; Return value:  Size  Location     Type
  6870 ;;                  1    wreg      void 
  6871 ;; Registers used:
  6872 ;;		wreg
  6873 ;; Tracked objects:
  6874 ;;		On entry : 0/0
  6875 ;;		On exit  : 0/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6878 ;;      Params:         2       0       0       0       0       0       0       0
  6879 ;;      Locals:         0       0       0       0       0       0       0       0
  6880 ;;      Temps:          0       0       0       0       0       0       0       0
  6881 ;;      Totals:         2       0       0       0       0       0       0       0
  6882 ;;Total ram usage:        2 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:    4
  6885 ;; This function calls:
  6886 ;;		Nothing
  6887 ;; This function is called by:
  6888 ;;		_EUSART_Initialize
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           
  6893                           ;psect for function _EUSART_SetTxInterruptHandler
  6894  1612                     _EUSART_SetTxInterruptHandler:	
  6895                           
  6896                           ;mcc_generated_files/eusart.c: 283:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  6897                           
  6898                           ;incstack = 0
  6899                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  6900  1612  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  6901  1613  0021               	movlb	1	; select bank1
  6902  1614  00E9               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  6903  1615  0871               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  6904  1616  00E8               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  6905  1617  0008               	return
  6906  1618                     __end_of_EUSART_SetTxInterruptHandler:	
  6907                           
  6908                           	psect	text27
  6909  160C                     __ptext27:	
  6910 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  6911 ;; Defined at:
  6912 ;;		line 286 in file "mcc_generated_files/eusart.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6915 ;;		 -> EUSART_Receive_ISR(1), 
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;		None
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  1    wreg      void 
  6920 ;; Registers used:
  6921 ;;		wreg
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6927 ;;      Params:         2       0       0       0       0       0       0       0
  6928 ;;      Locals:         0       0       0       0       0       0       0       0
  6929 ;;      Temps:          0       0       0       0       0       0       0       0
  6930 ;;      Totals:         2       0       0       0       0       0       0       0
  6931 ;;Total ram usage:        2 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    4
  6934 ;; This function calls:
  6935 ;;		Nothing
  6936 ;; This function is called by:
  6937 ;;		_EUSART_Initialize
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           
  6942                           ;psect for function _EUSART_SetRxInterruptHandler
  6943  160C                     _EUSART_SetRxInterruptHandler:	
  6944                           
  6945                           ;mcc_generated_files/eusart.c: 287:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  6946                           
  6947                           ;incstack = 0
  6948                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  6949  160C  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  6950  160D  0021               	movlb	1	; select bank1
  6951  160E  00E7               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  6952  160F  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  6953  1610  00E6               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  6954  1611  0008               	return
  6955  1612                     __end_of_EUSART_SetRxInterruptHandler:	
  6956                           
  6957                           	psect	text28
  6958  1606                     __ptext28:	
  6959 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  6960 ;; Defined at:
  6961 ;;		line 274 in file "mcc_generated_files/eusart.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6964 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;		None
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  1    wreg      void 
  6969 ;; Registers used:
  6970 ;;		wreg
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6976 ;;      Params:         2       0       0       0       0       0       0       0
  6977 ;;      Locals:         0       0       0       0       0       0       0       0
  6978 ;;      Temps:          0       0       0       0       0       0       0       0
  6979 ;;      Totals:         2       0       0       0       0       0       0       0
  6980 ;;Total ram usage:        2 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    4
  6983 ;; This function calls:
  6984 ;;		Nothing
  6985 ;; This function is called by:
  6986 ;;		_EUSART_Initialize
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           
  6991                           ;psect for function _EUSART_SetOverrunErrorHandler
  6992  1606                     _EUSART_SetOverrunErrorHandler:	
  6993                           
  6994                           ;mcc_generated_files/eusart.c: 275:     EUSART_OverrunErrorHandler = interruptHandler;
  6995                           
  6996                           ;incstack = 0
  6997                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6998  1606  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  6999  1607  0021               	movlb	1	; select bank1
  7000  1608  00E3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  7001  1609  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  7002  160A  00E2               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  7003  160B  0008               	return
  7004  160C                     __end_of_EUSART_SetOverrunErrorHandler:	
  7005                           
  7006                           	psect	text29
  7007  1600                     __ptext29:	
  7008 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7009 ;; Defined at:
  7010 ;;		line 270 in file "mcc_generated_files/eusart.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7013 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;		None
  7016 ;; Return value:  Size  Location     Type
  7017 ;;                  1    wreg      void 
  7018 ;; Registers used:
  7019 ;;		wreg
  7020 ;; Tracked objects:
  7021 ;;		On entry : 0/0
  7022 ;;		On exit  : 0/0
  7023 ;;		Unchanged: 0/0
  7024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7025 ;;      Params:         2       0       0       0       0       0       0       0
  7026 ;;      Locals:         0       0       0       0       0       0       0       0
  7027 ;;      Temps:          0       0       0       0       0       0       0       0
  7028 ;;      Totals:         2       0       0       0       0       0       0       0
  7029 ;;Total ram usage:        2 bytes
  7030 ;; Hardware stack levels used:    1
  7031 ;; Hardware stack levels required when called:    4
  7032 ;; This function calls:
  7033 ;;		Nothing
  7034 ;; This function is called by:
  7035 ;;		_EUSART_Initialize
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           
  7040                           ;psect for function _EUSART_SetFramingErrorHandler
  7041  1600                     _EUSART_SetFramingErrorHandler:	
  7042                           
  7043                           ;mcc_generated_files/eusart.c: 271:     EUSART_FramingErrorHandler = interruptHandler;
  7044                           
  7045                           ;incstack = 0
  7046                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7047  1600  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  7048  1601  0021               	movlb	1	; select bank1
  7049  1602  00E5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  7050  1603  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  7051  1604  00E4               	movwf	_EUSART_FramingErrorHandler^(0+128)
  7052  1605  0008               	return
  7053  1606                     __end_of_EUSART_SetFramingErrorHandler:	
  7054                           
  7055                           	psect	text30
  7056  15FA                     __ptext30:	
  7057 ;; *************** function _EUSART_SetErrorHandler *****************
  7058 ;; Defined at:
  7059 ;;		line 278 in file "mcc_generated_files/eusart.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7062 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7063 ;; Auto vars:     Size  Location     Type
  7064 ;;		None
  7065 ;; Return value:  Size  Location     Type
  7066 ;;                  1    wreg      void 
  7067 ;; Registers used:
  7068 ;;		wreg
  7069 ;; Tracked objects:
  7070 ;;		On entry : 0/0
  7071 ;;		On exit  : 0/0
  7072 ;;		Unchanged: 0/0
  7073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7074 ;;      Params:         2       0       0       0       0       0       0       0
  7075 ;;      Locals:         0       0       0       0       0       0       0       0
  7076 ;;      Temps:          0       0       0       0       0       0       0       0
  7077 ;;      Totals:         2       0       0       0       0       0       0       0
  7078 ;;Total ram usage:        2 bytes
  7079 ;; Hardware stack levels used:    1
  7080 ;; Hardware stack levels required when called:    4
  7081 ;; This function calls:
  7082 ;;		Nothing
  7083 ;; This function is called by:
  7084 ;;		_EUSART_Initialize
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           
  7089                           ;psect for function _EUSART_SetErrorHandler
  7090  15FA                     _EUSART_SetErrorHandler:	
  7091                           
  7092                           ;mcc_generated_files/eusart.c: 279:     EUSART_ErrorHandler = interruptHandler;
  7093                           
  7094                           ;incstack = 0
  7095                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7096  15FA  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  7097  15FB  0021               	movlb	1	; select bank1
  7098  15FC  00E1               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  7099  15FD  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  7100  15FE  00E0               	movwf	_EUSART_ErrorHandler^(0+128)
  7101  15FF  0008               	return
  7102  1600                     __end_of_EUSART_SetErrorHandler:	
  7103                           
  7104                           	psect	text31
  7105  0833                     __ptext31:	
  7106 ;; *************** function _MTOUCH_Service_Mainloop *****************
  7107 ;; Defined at:
  7108 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;		None
  7111 ;; Auto vars:     Size  Location     Type
  7112 ;;		None
  7113 ;; Return value:  Size  Location     Type
  7114 ;;                  1    wreg      _Bool 
  7115 ;; Registers used:
  7116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7117 ;; Tracked objects:
  7118 ;;		On entry : 0/0
  7119 ;;		On exit  : 0/0
  7120 ;;		Unchanged: 0/0
  7121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7122 ;;      Params:         0       0       0       0       0       0       0       0
  7123 ;;      Locals:         0       0       0       0       0       0       0       0
  7124 ;;      Temps:          0       1       0       0       0       0       0       0
  7125 ;;      Totals:         0       1       0       0       0       0       0       0
  7126 ;;Total ram usage:        1 bytes
  7127 ;; Hardware stack levels used:    1
  7128 ;; Hardware stack levels required when called:   11
  7129 ;; This function calls:
  7130 ;;		_MTOUCH_Button_ServiceAll
  7131 ;;		_MTOUCH_Sensor_SampleAll
  7132 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7133 ;;		_MTOUCH_Tick
  7134 ;;		_MTOUCH_needReburst
  7135 ;; This function is called by:
  7136 ;;		_main
  7137 ;;		_touch_example
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           
  7142                           ;psect for function _MTOUCH_Service_Mainloop
  7143  0833                     _MTOUCH_Service_Mainloop:	
  7144                           
  7145                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  7146                           
  7147                           ;incstack = 0
  7148                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7149  0833  0020               	movlb	0	; select bank0
  7150  0834  01EB               	clrf	_mtouch_time_toScan
  7151  0835  0AEB               	incf	_mtouch_time_toScan,f
  7152                           
  7153                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  7154                           
  7155                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  7156  0836  3197  2762  3188   	fcall	_MTOUCH_Sensor_SampleAll
  7157  0839  3A00               	xorlw	0
  7158  083A  1D03               	skipz
  7159  083B  283E               	goto	l6066
  7160                           
  7161                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  7162  083C  3000               	movlw	0
  7163  083D  0008               	return
  7164  083E                     l6066:	
  7165                           
  7166                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  7167  083E  3196  26B4  3188   	fcall	_MTOUCH_Button_ServiceAll
  7168                           
  7169                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  7170  0841  3180  2002  3188   	fcall	_MTOUCH_needReburst
  7171  0844  0020               	movlb	0	; select bank0
  7172  0845  00C8               	movwf	??_MTOUCH_Service_Mainloop
  7173  0846  0848               	movf	??_MTOUCH_Service_Mainloop,w
  7174  0847  00EB               	movwf	_mtouch_time_toScan
  7175                           
  7176                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  7177  0848  3197  273A  3188   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  7178                           
  7179                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  7180  084B  3195  25C6         	fcall	_MTOUCH_Tick
  7181                           
  7182                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  7183  084D  3001               	movlw	1
  7184  084E  0008               	return
  7185  084F                     __end_of_MTOUCH_Service_Mainloop:	
  7186                           
  7187                           	psect	text32
  7188  0002                     __ptext32:	
  7189 ;; *************** function _MTOUCH_needReburst *****************
  7190 ;; Defined at:
  7191 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;		None
  7194 ;; Auto vars:     Size  Location     Type
  7195 ;;  needReburst     1    0        _Bool 
  7196 ;; Return value:  Size  Location     Type
  7197 ;;                  1    wreg      _Bool 
  7198 ;; Registers used:
  7199 ;;		wreg, status,2
  7200 ;; Tracked objects:
  7201 ;;		On entry : 0/0
  7202 ;;		On exit  : 0/0
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7205 ;;      Params:         0       0       0       0       0       0       0       0
  7206 ;;      Locals:         1       0       0       0       0       0       0       0
  7207 ;;      Temps:          0       0       0       0       0       0       0       0
  7208 ;;      Totals:         1       0       0       0       0       0       0       0
  7209 ;;Total ram usage:        1 bytes
  7210 ;; Hardware stack levels used:    1
  7211 ;; Hardware stack levels required when called:    4
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		_MTOUCH_Service_Mainloop
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           
  7220                           ;psect for function _MTOUCH_needReburst
  7221  0002                     _MTOUCH_needReburst:	
  7222                           
  7223                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  7224                           
  7225                           ;incstack = 0
  7226                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  7227  0002  3000               	movlw	0
  7228  0003  0008               	return
  7229  0004                     __end_of_MTOUCH_needReburst:	
  7230                           
  7231                           	psect	text33
  7232  15C6                     __ptext33:	
  7233 ;; *************** function _MTOUCH_Tick *****************
  7234 ;; Defined at:
  7235 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;		None
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  1    wreg      void 
  7242 ;; Registers used:
  7243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7249 ;;      Params:         0       0       0       0       0       0       0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0
  7251 ;;      Temps:          0       0       0       0       0       0       0       0
  7252 ;;      Totals:         0       0       0       0       0       0       0       0
  7253 ;;Total ram usage:        0 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    6
  7256 ;; This function calls:
  7257 ;;		_MTOUCH_Button_Tick
  7258 ;; This function is called by:
  7259 ;;		_MTOUCH_Service_Mainloop
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           
  7264                           ;psect for function _MTOUCH_Tick
  7265  15C6                     _MTOUCH_Tick:	
  7266                           
  7267                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  7268                           
  7269                           ;incstack = 0
  7270                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7271  15C6  3197  278C         	fcall	_MTOUCH_Button_Tick
  7272  15C8  0008               	return
  7273  15C9                     __end_of_MTOUCH_Tick:	
  7274                           
  7275                           	psect	text34
  7276  178C                     __ptext34:	
  7277 ;; *************** function _MTOUCH_Button_Tick *****************
  7278 ;; Defined at:
  7279 ;;		line 289 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7280 ;; Parameters:    Size  Location     Type
  7281 ;;		None
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;  i               1    5[COMMON] unsigned char 
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      void 
  7286 ;; Registers used:
  7287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7293 ;;      Params:         0       0       0       0       0       0       0       0
  7294 ;;      Locals:         1       0       0       0       0       0       0       0
  7295 ;;      Temps:          1       0       0       0       0       0       0       0
  7296 ;;      Totals:         2       0       0       0       0       0       0       0
  7297 ;;Total ram usage:        2 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:    5
  7300 ;; This function calls:
  7301 ;;		_Button_Tick_helper
  7302 ;; This function is called by:
  7303 ;;		_MTOUCH_Tick
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           
  7308                           ;psect for function _MTOUCH_Button_Tick
  7309  178C                     _MTOUCH_Button_Tick:	
  7310                           
  7311                           ;mcc_generated_files/mtouch/mtouch_button.c: 291:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 292:     for (i = 0; i < 2u; i++)
  7312                           
  7313                           ;incstack = 0
  7314                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7315  178C  01F5               	clrf	MTOUCH_Button_Tick@i
  7316  178D                     l4466:	
  7317                           
  7318                           ;mcc_generated_files/mtouch/mtouch_button.c: 293:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 294:         Button_Tick_helper(&mtouch_button[i]);
  7319  178D  0875               	movf	MTOUCH_Button_Tick@i,w
  7320  178E  00F4               	movwf	??_MTOUCH_Button_Tick
  7321  178F  3003               	movlw	3
  7322  1790                     u3405:	
  7323  1790  35F4               	lslf	??_MTOUCH_Button_Tick,f
  7324  1791  3EFF               	addlw	-1
  7325  1792  1D03               	skipz
  7326  1793  2F90               	goto	u3405
  7327  1794  3574               	lslf	??_MTOUCH_Button_Tick,w
  7328  1795  3E40               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  7329  1796  3189  219A  3197   	fcall	_Button_Tick_helper
  7330                           
  7331                           ;mcc_generated_files/mtouch/mtouch_button.c: 295:     }
  7332  1799  3001               	movlw	1
  7333  179A  00F4               	movwf	??_MTOUCH_Button_Tick
  7334  179B  0874               	movf	??_MTOUCH_Button_Tick,w
  7335  179C  07F5               	addwf	MTOUCH_Button_Tick@i,f
  7336  179D  3002               	movlw	2
  7337  179E  0275               	subwf	MTOUCH_Button_Tick@i,w
  7338  179F  1803               	btfsc	3,0
  7339  17A0  0008               	return
  7340  17A1  2F8D               	goto	l4466
  7341  17A2                     __end_of_MTOUCH_Button_Tick:	
  7342                           
  7343                           	psect	text35
  7344  099A                     __ptext35:	
  7345 ;; *************** function _Button_Tick_helper *****************
  7346 ;; Defined at:
  7347 ;;		line 297 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7348 ;; Parameters:    Size  Location     Type
  7349 ;;  button          1    wreg     PTR struct .
  7350 ;;		 -> mtouch_button(32), 
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;  button          1    3[COMMON] PTR struct .
  7353 ;;		 -> mtouch_button(32), 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      void 
  7356 ;; Registers used:
  7357 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7363 ;;      Params:         0       0       0       0       0       0       0       0
  7364 ;;      Locals:         1       0       0       0       0       0       0       0
  7365 ;;      Temps:          2       0       0       0       0       0       0       0
  7366 ;;      Totals:         3       0       0       0       0       0       0       0
  7367 ;;Total ram usage:        3 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    4
  7370 ;; This function calls:
  7371 ;;		Nothing
  7372 ;; This function is called by:
  7373 ;;		_MTOUCH_Button_Tick
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           
  7378                           ;psect for function _Button_Tick_helper
  7379  099A                     _Button_Tick_helper:	
  7380                           
  7381                           ;incstack = 0
  7382                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  7383                           ;Button_Tick_helper@button stored from wreg
  7384  099A  00F3               	movwf	Button_Tick_helper@button
  7385                           
  7386                           ;mcc_generated_files/mtouch/mtouch_button.c: 297: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 298: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 300:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  7387  099B  0873               	movf	Button_Tick_helper@button,w
  7388  099C  3E02               	addlw	2
  7389  099D  0086               	movwf	6
  7390  099E  3001               	movlw	1	; select bank2/3
  7391  099F  0087               	movwf	7
  7392  09A0  3002               	movlw	2
  7393  09A1  0601               	xorwf	1,w
  7394  09A2  1D03               	btfss	3,2
  7395  09A3  0008               	return
  7396                           
  7397                           ;mcc_generated_files/mtouch/mtouch_button.c: 301:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 302:         (button->counter)++;
  7398  09A4  0873               	movf	Button_Tick_helper@button,w
  7399  09A5  3E0A               	addlw	10
  7400  09A6  0086               	movwf	6
  7401  09A7  3001               	movlw	1	; select bank2/3
  7402  09A8  0087               	movwf	7
  7403  09A9  3001               	movlw	1
  7404  09AA  0781               	addwf	1,f
  7405  09AB  3141               	addfsr 1,1
  7406  09AC  1803               	skipnc
  7407  09AD  0A81               	incf	1,f
  7408                           
  7409                           ;mcc_generated_files/mtouch/mtouch_button.c: 303:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  7410  09AE  0873               	movf	Button_Tick_helper@button,w
  7411  09AF  3E0A               	addlw	10
  7412  09B0  0086               	movwf	6
  7413  09B1  3001               	movlw	1	; select bank2/3
  7414  09B2  0087               	movwf	7
  7415  09B3  0016               	moviw fsr1++
  7416  09B4  0401               	iorwf	1,w
  7417  09B5  1D03               	btfss	3,2
  7418  09B6  0008               	return
  7419                           
  7420                           ;mcc_generated_files/mtouch/mtouch_button.c: 304:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 305:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  7421  09B7  0873               	movf	Button_Tick_helper@button,w
  7422  09B8  3E0A               	addlw	10
  7423  09B9  0086               	movwf	6
  7424  09BA  3001               	movlw	1	; select bank2/3
  7425  09BB  0087               	movwf	7
  7426  09BC  30FF               	movlw	255
  7427  09BD  3FC0               	movwi [0]fsr1
  7428  09BE  30FF               	movlw	255
  7429  09BF  3FC1               	movwi [1]fsr1
  7430  09C0  0008               	return
  7431  09C1                     __end_of_Button_Tick_helper:	
  7432                           
  7433                           	psect	text36
  7434  173A                     __ptext36:	
  7435 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  7436 ;; Defined at:
  7437 ;;		line 941 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;		None
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;  sensor          1    3[COMMON] PTR struct .
  7442 ;;		 -> mtouch_sensor(18), 
  7443 ;; Return value:  Size  Location     Type
  7444 ;;                  1    wreg      void 
  7445 ;; Registers used:
  7446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7452 ;;      Params:         0       0       0       0       0       0       0       0
  7453 ;;      Locals:         1       0       0       0       0       0       0       0
  7454 ;;      Temps:          1       0       0       0       0       0       0       0
  7455 ;;      Totals:         2       0       0       0       0       0       0       0
  7456 ;;Total ram usage:        2 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:    5
  7459 ;; This function calls:
  7460 ;;		_Sensor_Sampled_Reset
  7461 ;; This function is called by:
  7462 ;;		_MTOUCH_Initialize
  7463 ;;		_MTOUCH_Service_Mainloop
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           
  7468                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  7469  173A                     _MTOUCH_Sensor_Sampled_ResetAll:	
  7470                           
  7471                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 943:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 944:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[2u -1];sensor++)
  7472                           
  7473                           ;incstack = 0
  7474                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  7475  173A  30CE               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  7476  173B  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7477  173C  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7478  173D  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  7479  173E                     L2:	
  7480  173E  30D7               	movlw	(low ((_mtouch_sensor| 0+9)))& (0+255)
  7481  173F  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7482  1740  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7483  1741  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7484  1742  1C03               	btfss	3,0
  7485  1743  0008               	return
  7486                           
  7487                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 945:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 946:         Sensor_Sampled_Reset(sensor);
  7488  1744  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7489  1745  3187  27F9  3197   	fcall	_Sensor_Sampled_Reset
  7490                           
  7491                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 947:     }
  7492  1748  3009               	movlw	9
  7493  1749  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7494  174A  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7495  174B  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  7496  174C  2F3E               	goto	L2
  7497  174D                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  7498                           
  7499                           	psect	text37
  7500  07F9                     __ptext37:	
  7501 ;; *************** function _Sensor_Sampled_Reset *****************
  7502 ;; Defined at:
  7503 ;;		line 955 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;  sensor          1    wreg     PTR struct .
  7506 ;;		 -> mtouch_sensor(18), 
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;  sensor          1    1[COMMON] PTR struct .
  7509 ;;		 -> mtouch_sensor(18), 
  7510 ;; Return value:  Size  Location     Type
  7511 ;;                  1    wreg      void 
  7512 ;; Registers used:
  7513 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7519 ;;      Params:         0       0       0       0       0       0       0       0
  7520 ;;      Locals:         1       0       0       0       0       0       0       0
  7521 ;;      Temps:          0       0       0       0       0       0       0       0
  7522 ;;      Totals:         1       0       0       0       0       0       0       0
  7523 ;;Total ram usage:        1 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:    4
  7526 ;; This function calls:
  7527 ;;		Nothing
  7528 ;; This function is called by:
  7529 ;;		_MTOUCH_Sensor_Initialize
  7530 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           
  7535                           ;psect for function _Sensor_Sampled_Reset
  7536  07F9                     _Sensor_Sampled_Reset:	
  7537                           
  7538                           ;incstack = 0
  7539                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7540                           ;Sensor_Sampled_Reset@sensor stored from wreg
  7541  07F9  00F1               	movwf	Sensor_Sampled_Reset@sensor
  7542                           
  7543                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 955: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          956: {;mcc_generated_files/mtouch/mtouch_sensor.c: 957:     sensor->sampled = 0;
  7544  07FA  0871               	movf	Sensor_Sampled_Reset@sensor,w
  7545  07FB  3E08               	addlw	8
  7546  07FC  0086               	movwf	6
  7547  07FD  0187               	clrf	7
  7548  07FE  1001               	bcf	1,0
  7549  07FF  0008               	return
  7550  0800                     __end_of_Sensor_Sampled_Reset:	
  7551                           
  7552                           	psect	text38
  7553  1762                     __ptext38:	
  7554 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  7555 ;; Defined at:
  7556 ;;		line 249 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7557 ;; Parameters:    Size  Location     Type
  7558 ;;		None
  7559 ;; Auto vars:     Size  Location     Type
  7560 ;;  group           1   39[BANK0 ] unsigned char 
  7561 ;; Return value:  Size  Location     Type
  7562 ;;                  1    wreg      _Bool 
  7563 ;; Registers used:
  7564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7565 ;; Tracked objects:
  7566 ;;		On entry : 0/0
  7567 ;;		On exit  : 0/0
  7568 ;;		Unchanged: 0/0
  7569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7570 ;;      Params:         0       0       0       0       0       0       0       0
  7571 ;;      Locals:         0       1       0       0       0       0       0       0
  7572 ;;      Temps:          0       1       0       0       0       0       0       0
  7573 ;;      Totals:         0       2       0       0       0       0       0       0
  7574 ;;Total ram usage:        2 bytes
  7575 ;; Hardware stack levels used:    1
  7576 ;; Hardware stack levels required when called:   10
  7577 ;; This function calls:
  7578 ;;		_Sensor_Service
  7579 ;; This function is called by:
  7580 ;;		_MTOUCH_Service_Mainloop
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           
  7585                           ;psect for function _MTOUCH_Sensor_SampleAll
  7586  1762                     _MTOUCH_Sensor_SampleAll:	
  7587                           
  7588                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 251:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 252:     for (group = 0; group < 1u; group++)
  7589                           
  7590                           ;incstack = 0
  7591                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7592  1762  0020               	movlb	0	; select bank0
  7593  1763  01C7               	clrf	MTOUCH_Sensor_SampleAll@group
  7594  1764                     l6026:	
  7595                           
  7596                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 253:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 254:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  7597  1764  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  7598  1765  3186  2671  3197   	fcall	_Sensor_Service
  7599  1768  3A00               	xorlw	0
  7600  1769  1903               	skipnz
  7601  176A  2F6D               	goto	l6032
  7602                           
  7603                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 255:             return 0;
  7604  176B  3000               	movlw	0
  7605  176C  0008               	return
  7606  176D                     l6032:	
  7607                           
  7608                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 256:     }
  7609  176D  3001               	movlw	1
  7610  176E  0020               	movlb	0	; select bank0
  7611  176F  00C6               	movwf	??_MTOUCH_Sensor_SampleAll
  7612  1770  0846               	movf	??_MTOUCH_Sensor_SampleAll,w
  7613  1771  07C7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  7614  1772  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  7615  1773  1903               	btfsc	3,2
  7616  1774  2F64               	goto	l6026
  7617                           
  7618                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 257:     return 1;
  7619  1775  3001               	movlw	1
  7620  1776  0008               	return
  7621  1777                     __end_of_MTOUCH_Sensor_SampleAll:	
  7622                           
  7623                           	psect	text39
  7624  0671                     __ptext39:	
  7625 ;; *************** function _Sensor_Service *****************
  7626 ;; Defined at:
  7627 ;;		line 294 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;  scanGroup       1    wreg     unsigned char 
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  scanGroup       1   34[BANK0 ] unsigned char 
  7632 ;;  sensor_adc2     1   37[BANK0 ] PTR struct .
  7633 ;;		 -> mtouch_sensor(18), 
  7634 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  7635 ;;		 -> mtouch_sensor(18), 
  7636 ;;  error           1   35[BANK0 ] enum E2857
  7637 ;; Return value:  Size  Location     Type
  7638 ;;                  1    wreg      enum E2857
  7639 ;; Registers used:
  7640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7641 ;; Tracked objects:
  7642 ;;		On entry : 0/0
  7643 ;;		On exit  : 0/0
  7644 ;;		Unchanged: 0/0
  7645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7646 ;;      Params:         0       0       0       0       0       0       0       0
  7647 ;;      Locals:         0       4       0       0       0       0       0       0
  7648 ;;      Temps:          0       3       0       0       0       0       0       0
  7649 ;;      Totals:         0       7       0       0       0       0       0       0
  7650 ;;Total ram usage:        7 bytes
  7651 ;; Hardware stack levels used:    1
  7652 ;; Hardware stack levels required when called:    9
  7653 ;; This function calls:
  7654 ;;		_Sensor_Acquisition
  7655 ;;		_Sensor_DefaultCallback
  7656 ;;		_Sensor_RawSample_Update
  7657 ;;		_Sensor_isEnabled
  7658 ;;		_Sensor_setSampled
  7659 ;; This function is called by:
  7660 ;;		_MTOUCH_Sensor_SampleAll
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           
  7665                           ;psect for function _Sensor_Service
  7666  0671                     _Sensor_Service:	
  7667                           
  7668                           ;incstack = 0
  7669                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7670                           ;Sensor_Service@scanGroup stored from wreg
  7671  0671  0020               	movlb	0	; select bank0
  7672  0672  00C2               	movwf	Sensor_Service@scanGroup
  7673                           
  7674                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 294: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 295: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 296:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 297:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 299:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  7675  0673  0842               	movf	Sensor_Service@scanGroup,w
  7676  0674  00BF               	movwf	??_Sensor_Service
  7677  0675  01C0               	clrf	??_Sensor_Service+1
  7678  0676  35BF               	lslf	??_Sensor_Service,f
  7679  0677  0DC0               	rlf	??_Sensor_Service+1,f
  7680  0678  302B               	movlw	low (_sensor_scan_group| (0+32768))
  7681  0679  073F               	addwf	??_Sensor_Service,w
  7682  067A  0084               	movwf	4
  7683  067B  3098               	movlw	high (_sensor_scan_group| (0+32768))
  7684  067C  3D40               	addwfc	??_Sensor_Service+1,w
  7685  067D  0085               	movwf	5
  7686  067E  0800               	movf	0,w	;code access
  7687  067F  00C1               	movwf	??_Sensor_Service+2
  7688  0680  0841               	movf	??_Sensor_Service+2,w
  7689  0681  00C4               	movwf	Sensor_Service@sensor_adc1
  7690                           
  7691                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 300:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  7692  0682  0842               	movf	Sensor_Service@scanGroup,w
  7693  0683  00BF               	movwf	??_Sensor_Service
  7694  0684  01C0               	clrf	??_Sensor_Service+1
  7695  0685  35BF               	lslf	??_Sensor_Service,f
  7696  0686  0DC0               	rlf	??_Sensor_Service+1,f
  7697  0687  302C               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  7698  0688  073F               	addwf	??_Sensor_Service,w
  7699  0689  0084               	movwf	4
  7700  068A  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  7701  068B  3D40               	addwfc	??_Sensor_Service+1,w
  7702  068C  0085               	movwf	5
  7703  068D  0800               	movf	0,w	;code access
  7704  068E  00C1               	movwf	??_Sensor_Service+2
  7705  068F  0841               	movf	??_Sensor_Service+2,w
  7706  0690  00C5               	movwf	Sensor_Service@sensor_adc2
  7707                           
  7708                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 302:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  7709  0691  0845               	movf	Sensor_Service@sensor_adc2,w
  7710  0692  00BF               	movwf	??_Sensor_Service
  7711  0693  083F               	movf	??_Sensor_Service,w
  7712  0694  00BB               	movwf	Sensor_Acquisition@sensor_adc2
  7713  0695  0844               	movf	Sensor_Service@sensor_adc1,w
  7714  0696  318D  2558  3186   	fcall	_Sensor_Acquisition
  7715  0699  0020               	movlb	0	; select bank0
  7716  069A  00C0               	movwf	??_Sensor_Service+1
  7717  069B  0840               	movf	??_Sensor_Service+1,w
  7718  069C  00C3               	movwf	Sensor_Service@error
  7719                           
  7720                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 305:     switch(error)
  7721  069D  2EDE               	goto	l5972
  7722  069E                     l5950:	
  7723                           
  7724                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 308:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 309:             if(Sensor_isEnabled(sensor_adc1))
  7725  069E  0844               	movf	Sensor_Service@sensor_adc1,w
  7726  069F  3196  26D4  3186   	fcall	_Sensor_isEnabled
  7727  06A2  3A00               	xorlw	0
  7728  06A3  1903               	skipnz
  7729  06A4  2EBD               	goto	l5960
  7730                           
  7731                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 310:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 315:                 if(!lowpowerActivated)
  7732  06A5  0020               	movlb	0	; select bank0
  7733  06A6  086A               	movf	_lowpowerActivated,w
  7734  06A7  1D03               	btfss	3,2
  7735  06A8  2EAD               	goto	l5956
  7736                           
  7737                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 316:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 317:                     Sensor_RawSample_Update(sensor_adc1);
  7738  06A9  0844               	movf	Sensor_Service@sensor_adc1,w
  7739  06AA  3189  2128  3186   	fcall	_Sensor_RawSample_Update
  7740  06AD                     l5956:	
  7741                           
  7742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:                 Sensor_setSampled(sens
      +                          or_adc1);
  7743  06AD  0020               	movlb	0	; select bank0
  7744  06AE  0844               	movf	Sensor_Service@sensor_adc1,w
  7745  06AF  3196  2638  3186   	fcall	_Sensor_setSampled
  7746                           
  7747                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 320:                 callback_sampled(senso
      +                          r_adc1->sensor);
  7748  06B2  0020               	movlb	0	; select bank0
  7749  06B3  0844               	movf	Sensor_Service@sensor_adc1,w
  7750  06B4  0086               	movwf	6
  7751  06B5  0187               	clrf	7
  7752  06B6  0801               	movf	1,w
  7753  06B7  00BF               	movwf	??_Sensor_Service
  7754  06B8  083F               	movf	??_Sensor_Service,w
  7755  06B9  00F1               	movwf	Sensor_DefaultCallback@sensor
  7756  06BA  3195  25B9  3186   	fcall	_Sensor_DefaultCallback
  7757  06BD                     l5960:	
  7758                           
  7759                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 322:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  7760  06BD  0020               	movlb	0	; select bank0
  7761  06BE  0845               	movf	Sensor_Service@sensor_adc2,w
  7762  06BF  3196  26D4  3186   	fcall	_Sensor_isEnabled
  7763  06C2  3A00               	xorlw	0
  7764  06C3  1903               	skipnz
  7765  06C4  2F01               	goto	l5974
  7766                           
  7767                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 323:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 324:                 if(!lowpowerActivated)
  7768  06C5  0020               	movlb	0	; select bank0
  7769  06C6  086A               	movf	_lowpowerActivated,w
  7770  06C7  1D03               	btfss	3,2
  7771  06C8  2ECD               	goto	l5966
  7772                           
  7773                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 326:                     Sensor_RawSample_Update(sensor_adc2);
  7774  06C9  0845               	movf	Sensor_Service@sensor_adc2,w
  7775  06CA  3189  2128  3186   	fcall	_Sensor_RawSample_Update
  7776  06CD                     l5966:	
  7777                           
  7778                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:                 Sensor_setSampled(sens
      +                          or_adc2);
  7779  06CD  0020               	movlb	0	; select bank0
  7780  06CE  0845               	movf	Sensor_Service@sensor_adc2,w
  7781  06CF  3196  2638  3186   	fcall	_Sensor_setSampled
  7782                           
  7783                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 329:                 callback_sampled(senso
      +                          r_adc2->sensor);
  7784  06D2  0020               	movlb	0	; select bank0
  7785  06D3  0845               	movf	Sensor_Service@sensor_adc2,w
  7786  06D4  0086               	movwf	6
  7787  06D5  0187               	clrf	7
  7788  06D6  0801               	movf	1,w
  7789  06D7  00BF               	movwf	??_Sensor_Service
  7790  06D8  083F               	movf	??_Sensor_Service,w
  7791  06D9  00F1               	movwf	Sensor_DefaultCallback@sensor
  7792  06DA  3195  25B9  3186   	fcall	_Sensor_DefaultCallback
  7793  06DD  2F01               	goto	l5974
  7794  06DE                     l5972:	
  7795  06DE  0843               	movf	Sensor_Service@error,w
  7796  06DF  00BF               	movwf	??_Sensor_Service
  7797  06E0  01C0               	clrf	??_Sensor_Service+1
  7798  06E1  1BBF               	btfsc	??_Sensor_Service,7
  7799  06E2  03C0               	decf	??_Sensor_Service+1,f
  7800                           
  7801                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7802                           ; Switch size 1, requested type "simple"
  7803                           ; Number of cases is 2, Range of values is 0 to 255
  7804                           ; switch strategies available:
  7805                           ; Name         Instructions Cycles
  7806                           ; simple_byte            7     4 (average)
  7807                           ; jumptable            260     6 (fixed)
  7808                           ;	Chosen strategy is simple_byte
  7809  06E3  0840               	movf	??_Sensor_Service+1,w
  7810  06E4  3A00               	xorlw	0	; case 0
  7811  06E5  1903               	skipnz
  7812  06E6  2EEB               	goto	l6590
  7813  06E7  3AFF               	xorlw	255	; case 255
  7814  06E8  1903               	skipnz
  7815  06E9  2EF0               	goto	l6592
  7816  06EA  2F01               	goto	l5974
  7817  06EB                     l6590:	
  7818                           
  7819                           ; Switch size 1, requested type "simple"
  7820                           ; Number of cases is 1, Range of values is 0 to 0
  7821                           ; switch strategies available:
  7822                           ; Name         Instructions Cycles
  7823                           ; simple_byte            4     3 (average)
  7824                           ; direct_byte            8     6 (fixed)
  7825                           ; jumptable            260     6 (fixed)
  7826                           ;	Chosen strategy is simple_byte
  7827  06EB  083F               	movf	??_Sensor_Service,w
  7828  06EC  3A00               	xorlw	0	; case 0
  7829  06ED  1903               	skipnz
  7830  06EE  2E9E               	goto	l5950
  7831  06EF  2F01               	goto	l5974
  7832  06F0                     l6592:	
  7833                           
  7834                           ; Switch size 1, requested type "simple"
  7835                           ; Number of cases is 5, Range of values is 251 to 255
  7836                           ; switch strategies available:
  7837                           ; Name         Instructions Cycles
  7838                           ; direct_byte           15     5 (fixed)
  7839                           ; simple_byte           16     9 (average)
  7840                           ; jumptable            263     9 (fixed)
  7841                           ;	Chosen strategy is simple_byte
  7842  06F0  083F               	movf	??_Sensor_Service,w
  7843  06F1  3AFB               	xorlw	251	; case 251
  7844  06F2  1903               	skipnz
  7845  06F3  2F01               	goto	l5974
  7846  06F4  3A07               	xorlw	7	; case 252
  7847  06F5  1903               	skipnz
  7848  06F6  2F01               	goto	l5974
  7849  06F7  3A01               	xorlw	1	; case 253
  7850  06F8  1903               	skipnz
  7851  06F9  2F01               	goto	l5974
  7852  06FA  3A03               	xorlw	3	; case 254
  7853  06FB  1903               	skipnz
  7854  06FC  2F01               	goto	l5974
  7855  06FD  3A01               	xorlw	1	; case 255
  7856  06FE  1903               	skipnz
  7857  06FF  2F01               	goto	l5974
  7858  0700  2F01               	goto	l5974
  7859  0701                     l5974:	
  7860                           
  7861                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 342:     return error;
  7862  0701  0020               	movlb	0	; select bank0
  7863  0702  0843               	movf	Sensor_Service@error,w
  7864  0703  0008               	return
  7865  0704                     __end_of_Sensor_Service:	
  7866                           
  7867                           	psect	text40
  7868  1638                     __ptext40:	
  7869 ;; *************** function _Sensor_setSampled *****************
  7870 ;; Defined at:
  7871 ;;		line 960 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  sensor          1    wreg     PTR struct .
  7874 ;;		 -> mtouch_sensor(18), 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  sensor          1    1[COMMON] PTR struct .
  7877 ;;		 -> mtouch_sensor(18), 
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  1    wreg      void 
  7880 ;; Registers used:
  7881 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7887 ;;      Params:         0       0       0       0       0       0       0       0
  7888 ;;      Locals:         1       0       0       0       0       0       0       0
  7889 ;;      Temps:          0       0       0       0       0       0       0       0
  7890 ;;      Totals:         1       0       0       0       0       0       0       0
  7891 ;;Total ram usage:        1 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    4
  7894 ;; This function calls:
  7895 ;;		Nothing
  7896 ;; This function is called by:
  7897 ;;		_Sensor_Service
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           
  7902                           ;psect for function _Sensor_setSampled
  7903  1638                     _Sensor_setSampled:	
  7904                           
  7905                           ;incstack = 0
  7906                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  7907                           ;Sensor_setSampled@sensor stored from wreg
  7908  1638  00F1               	movwf	Sensor_setSampled@sensor
  7909                           
  7910                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 960: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 961
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 962:     sensor->sampled = 1;
  7911  1639  0871               	movf	Sensor_setSampled@sensor,w
  7912  163A  3E08               	addlw	8
  7913  163B  0086               	movwf	6
  7914  163C  0187               	clrf	7
  7915  163D  1401               	bsf	1,0
  7916  163E  0008               	return
  7917  163F                     __end_of_Sensor_setSampled:	
  7918                           
  7919                           	psect	text41
  7920  0928                     __ptext41:	
  7921 ;; *************** function _Sensor_RawSample_Update *****************
  7922 ;; Defined at:
  7923 ;;		line 793 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;  sensor          1    wreg     PTR struct .
  7926 ;;		 -> mtouch_sensor(18), 
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;  sensor          1    7[COMMON] PTR struct .
  7929 ;;		 -> mtouch_sensor(18), 
  7930 ;;  adcIndex        1    6[COMMON] unsigned char 
  7931 ;; Return value:  Size  Location     Type
  7932 ;;                  1    wreg      void 
  7933 ;; Registers used:
  7934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7935 ;; Tracked objects:
  7936 ;;		On entry : 0/0
  7937 ;;		On exit  : 0/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7940 ;;      Params:         0       0       0       0       0       0       0       0
  7941 ;;      Locals:         2       0       0       0       0       0       0       0
  7942 ;;      Temps:          1       0       0       0       0       0       0       0
  7943 ;;      Totals:         3       0       0       0       0       0       0       0
  7944 ;;Total ram usage:        3 bytes
  7945 ;; Hardware stack levels used:    1
  7946 ;; Hardware stack levels required when called:    5
  7947 ;; This function calls:
  7948 ;;		_Sensor_getScanGroupIndex
  7949 ;; This function is called by:
  7950 ;;		_Sensor_Service
  7951 ;; This function uses a non-reentrant model
  7952 ;;
  7953                           
  7954                           
  7955                           ;psect for function _Sensor_RawSample_Update
  7956  0928                     _Sensor_RawSample_Update:	
  7957                           
  7958                           ;incstack = 0
  7959                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7960                           ;Sensor_RawSample_Update@sensor stored from wreg
  7961  0928  00F7               	movwf	Sensor_RawSample_Update@sensor
  7962                           
  7963                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 793: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 794: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 795:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  7964  0929  0877               	movf	Sensor_RawSample_Update@sensor,w
  7965  092A  318A  2265  3189   	fcall	_Sensor_getScanGroupIndex
  7966  092D  00F5               	movwf	??_Sensor_RawSample_Update
  7967  092E  0875               	movf	??_Sensor_RawSample_Update,w
  7968  092F  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  7969                           
  7970                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 797:     if (INTCONbits.GIE == (uint8_t)1)
  7971  0930  1F8B               	btfss	11,7	;volatile
  7972  0931  2941               	goto	l4280
  7973                           
  7974                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 798:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 799:         INTCONbits.GIE = (uint8_t)0;
  7975  0932  138B               	bcf	11,7	;volatile
  7976                           
  7977                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 800:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  7978  0933  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  7979  0934  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  7980  0935  0086               	movwf	6
  7981  0936  0187               	clrf	7
  7982  0937  0877               	movf	Sensor_RawSample_Update@sensor,w
  7983  0938  3E06               	addlw	6
  7984  0939  0084               	movwf	4
  7985  093A  0185               	clrf	5
  7986  093B  3F40               	moviw [0]fsr1
  7987  093C  3F80               	movwi [0]fsr0
  7988  093D  3F41               	moviw [1]fsr1
  7989  093E  3F81               	movwi [1]fsr0
  7990                           
  7991                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 801:         INTCONbits.GIE = (uint8_t)1;
  7992  093F  178B               	bsf	11,7	;volatile
  7993                           
  7994                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 802:     }
  7995  0940  0008               	return
  7996  0941                     l4280:	
  7997                           
  7998                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 804:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 805:         sensor->rawSample = packet_sample[adcIndex];
  7999  0941  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  8000  0942  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  8001  0943  0086               	movwf	6
  8002  0944  0187               	clrf	7
  8003  0945  0877               	movf	Sensor_RawSample_Update@sensor,w
  8004  0946  3E06               	addlw	6
  8005  0947  0084               	movwf	4
  8006  0948  0185               	clrf	5
  8007  0949  3F40               	moviw [0]fsr1
  8008  094A  3F80               	movwi [0]fsr0
  8009  094B  3F41               	moviw [1]fsr1
  8010  094C  3F81               	movwi [1]fsr0
  8011  094D  0008               	return
  8012  094E                     __end_of_Sensor_RawSample_Update:	
  8013                           
  8014                           	psect	text42
  8015  15B9                     __ptext42:	
  8016 ;; *************** function _Sensor_DefaultCallback *****************
  8017 ;; Defined at:
  8018 ;;		line 814 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8019 ;; Parameters:    Size  Location     Type
  8020 ;;  sensor          1    1[COMMON] enum E2854
  8021 ;; Auto vars:     Size  Location     Type
  8022 ;;		None
  8023 ;; Return value:  Size  Location     Type
  8024 ;;                  1    wreg      void 
  8025 ;; Registers used:
  8026 ;;		None
  8027 ;; Tracked objects:
  8028 ;;		On entry : 0/0
  8029 ;;		On exit  : 0/0
  8030 ;;		Unchanged: 0/0
  8031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8032 ;;      Params:         1       0       0       0       0       0       0       0
  8033 ;;      Locals:         0       0       0       0       0       0       0       0
  8034 ;;      Temps:          0       0       0       0       0       0       0       0
  8035 ;;      Totals:         1       0       0       0       0       0       0       0
  8036 ;;Total ram usage:        1 bytes
  8037 ;; Hardware stack levels used:    1
  8038 ;; Hardware stack levels required when called:    4
  8039 ;; This function calls:
  8040 ;;		Nothing
  8041 ;; This function is called by:
  8042 ;;		_Sensor_Service
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           
  8047                           ;psect for function _Sensor_DefaultCallback
  8048  15B9                     _Sensor_DefaultCallback:	
  8049                           
  8050                           ;incstack = 0
  8051                           ; Regs used in _Sensor_DefaultCallback: []
  8052  15B9  0008               	return
  8053  15BA                     __end_of_Sensor_DefaultCallback:	
  8054                           
  8055                           	psect	text43
  8056  0D58                     __ptext43:	
  8057 ;; *************** function _Sensor_Acquisition *****************
  8058 ;; Defined at:
  8059 ;;		line 363 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8060 ;; Parameters:    Size  Location     Type
  8061 ;;  sensor_adc1     1    wreg     PTR struct .
  8062 ;;		 -> mtouch_sensor(18), 
  8063 ;;  sensor_adc2     1   27[BANK0 ] PTR struct .
  8064 ;;		 -> mtouch_sensor(18), 
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;  sensor_adc1     1   30[BANK0 ] PTR struct .
  8067 ;;		 -> mtouch_sensor(18), 
  8068 ;;  retry           1   29[BANK0 ] unsigned char 
  8069 ;; Return value:  Size  Location     Type
  8070 ;;                  1    wreg      enum E2857
  8071 ;; Registers used:
  8072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8073 ;; Tracked objects:
  8074 ;;		On entry : 0/0
  8075 ;;		On exit  : 0/0
  8076 ;;		Unchanged: 0/0
  8077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8078 ;;      Params:         0       1       0       0       0       0       0       0
  8079 ;;      Locals:         0       2       0       0       0       0       0       0
  8080 ;;      Temps:          0       1       0       0       0       0       0       0
  8081 ;;      Totals:         0       4       0       0       0       0       0       0
  8082 ;;Total ram usage:        4 bytes
  8083 ;; Hardware stack levels used:    1
  8084 ;; Hardware stack levels required when called:    8
  8085 ;; This function calls:
  8086 ;;		_Sensor_Acq_ExecutePacket
  8087 ;;		_Sensor_Scanfrequency_Evaluation
  8088 ;;		_Sensor_isActive
  8089 ;;		_Sensor_isCalibrated
  8090 ;;		_Sensor_postAcquisitionProcess
  8091 ;; This function is called by:
  8092 ;;		_Sensor_Service
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           
  8097                           ;psect for function _Sensor_Acquisition
  8098  0D58                     _Sensor_Acquisition:	
  8099                           
  8100                           ;incstack = 0
  8101                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8102                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  8103  0D58  0020               	movlb	0	; select bank0
  8104  0D59  00BE               	movwf	Sensor_Acquisition@sensor_adc1
  8105                           
  8106                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 364: {;mcc_generated_files/mtouch/mtouch_sensor.c: 365:     
      +                          uint8_t retry = (uint8_t)5;
  8107  0D5A  3005               	movlw	5
  8108  0D5B  00BC               	movwf	??_Sensor_Acquisition
  8109  0D5C  083C               	movf	??_Sensor_Acquisition,w
  8110  0D5D  00BD               	movwf	Sensor_Acquisition@retry
  8111                           
  8112                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 368:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  8113  0D5E  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8114  0D5F  1D03               	btfss	3,2
  8115  0D60  2D6E               	goto	l5772
  8116  0D61  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8117  0D62  1D03               	btfss	3,2
  8118  0D63  2D6E               	goto	l5772
  8119                           
  8120                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 369:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 370:         return MTOUCH_SENSOR_ERROR_invalid_index;
  8121  0D64  30FF               	movlw	255
  8122  0D65  0008               	return
  8123  0D66                     l5766:	
  8124                           
  8125                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 379:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 380:         retry--;
  8126  0D66  3001               	movlw	1
  8127  0D67  0020               	movlb	0	; select bank0
  8128  0D68  02BD               	subwf	Sensor_Acquisition@retry,f
  8129                           
  8130                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 381:         if(retry == 0)
  8131  0D69  083D               	movf	Sensor_Acquisition@retry,w
  8132  0D6A  1D03               	btfss	3,2
  8133  0D6B  2D6E               	goto	l5772
  8134                           
  8135                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 382:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 383:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8136  0D6C  30FC               	movlw	252
  8137  0D6D  0008               	return
  8138  0D6E                     l5772:	
  8139                           
  8140                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  8141  0D6E  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8142  0D6F  00BC               	movwf	??_Sensor_Acquisition
  8143  0D70  083C               	movf	??_Sensor_Acquisition,w
  8144  0D71  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8145  0D72  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8146  0D73  3182  22BC  318D   	fcall	_Sensor_Acq_ExecutePacket
  8147  0D76  3A00               	xorlw	0
  8148  0D77  1D03               	skipz
  8149  0D78  2D66               	goto	l5766
  8150                           
  8151                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 387:     if(sensor_adc1 != ((void*)0))
  8152  0D79  0020               	movlb	0	; select bank0
  8153  0D7A  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8154  0D7B  1903               	btfsc	3,2
  8155  0D7C  2D81               	goto	l5778
  8156                           
  8157                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 388:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 389:         Sensor_postAcquisitionProcess(sensor_adc1);
  8158  0D7D  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8159  0D7E  318B  23EE  318D   	fcall	_Sensor_postAcquisitionProcess
  8160  0D81                     l5778:	
  8161                           
  8162                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 392:     if(sensor_adc2 !=((void*)0))
  8163  0D81  0020               	movlb	0	; select bank0
  8164  0D82  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8165  0D83  1903               	btfsc	3,2
  8166  0D84  2D89               	goto	l5782
  8167                           
  8168                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 393:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 394:         Sensor_postAcquisitionProcess(sensor_adc2);
  8169  0D85  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8170  0D86  318B  23EE  318D   	fcall	_Sensor_postAcquisitionProcess
  8171  0D89                     l5782:	
  8172                           
  8173                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 397:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  8174  0D89  0020               	movlb	0	; select bank0
  8175  0D8A  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8176  0D8B  3196  267D  318D   	fcall	_Sensor_isActive
  8177  0D8E  3A00               	xorlw	0
  8178  0D8F  1903               	skipnz
  8179  0D90  2D99               	goto	l5786
  8180  0D91  0020               	movlb	0	; select bank0
  8181  0D92  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8182  0D93  3196  264F  318D   	fcall	_Sensor_isCalibrated
  8183  0D96  3A00               	xorlw	0
  8184  0D97  1D03               	skipz
  8185  0D98  2DA9               	goto	l5790
  8186  0D99                     l5786:	
  8187  0D99  0020               	movlb	0	; select bank0
  8188  0D9A  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8189  0D9B  3196  267D  318D   	fcall	_Sensor_isActive
  8190  0D9E  3A00               	xorlw	0
  8191  0D9F  1903               	skipnz
  8192  0DA0  2DB2               	goto	l5794
  8193  0DA1  0020               	movlb	0	; select bank0
  8194  0DA2  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8195  0DA3  3196  264F  318D   	fcall	_Sensor_isCalibrated
  8196  0DA6  3A00               	xorlw	0
  8197  0DA7  1903               	skipnz
  8198  0DA8  2DB2               	goto	l5794
  8199  0DA9                     l5790:	
  8200                           
  8201                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 399:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 400:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  8202  0DA9  0020               	movlb	0	; select bank0
  8203  0DAA  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8204  0DAB  00BC               	movwf	??_Sensor_Acquisition
  8205  0DAC  083C               	movf	??_Sensor_Acquisition,w
  8206  0DAD  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  8207  0DAE  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8208  0DAF  318E  2679         	fcall	_Sensor_Scanfrequency_Evaluation
  8209  0DB1  0008               	return
  8210  0DB2                     l5794:	
  8211                           
  8212                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 403:     return MTOUCH_SENSOR_ERROR_none;
  8213  0DB2  3000               	movlw	0
  8214  0DB3  0008               	return
  8215  0DB4                     __end_of_Sensor_Acquisition:	
  8216                           
  8217                           	psect	text44
  8218  0BEE                     __ptext44:	
  8219 ;; *************** function _Sensor_postAcquisitionProcess *****************
  8220 ;; Defined at:
  8221 ;;		line 406 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;  sensor          1    wreg     PTR struct .
  8224 ;;		 -> mtouch_sensor(18), 
  8225 ;; Auto vars:     Size  Location     Type
  8226 ;;  sensor          1    9[COMMON] PTR struct .
  8227 ;;		 -> mtouch_sensor(18), 
  8228 ;;  deviation       2    6[COMMON] unsigned short 
  8229 ;;  adcIndex        1    8[COMMON] unsigned char 
  8230 ;; Return value:  Size  Location     Type
  8231 ;;                  1    wreg      void 
  8232 ;; Registers used:
  8233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8234 ;; Tracked objects:
  8235 ;;		On entry : 0/0
  8236 ;;		On exit  : 0/0
  8237 ;;		Unchanged: 0/0
  8238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8239 ;;      Params:         0       0       0       0       0       0       0       0
  8240 ;;      Locals:         4       0       0       0       0       0       0       0
  8241 ;;      Temps:          1       0       0       0       0       0       0       0
  8242 ;;      Totals:         5       0       0       0       0       0       0       0
  8243 ;;Total ram usage:        5 bytes
  8244 ;; Hardware stack levels used:    1
  8245 ;; Hardware stack levels required when called:    5
  8246 ;; This function calls:
  8247 ;;		_Sensor_getScanGroupIndex
  8248 ;;		_Sensor_isEnabled
  8249 ;;		_Sensor_setActive
  8250 ;;		_Sensor_setInactive
  8251 ;;		_abs
  8252 ;; This function is called by:
  8253 ;;		_Sensor_Acquisition
  8254 ;; This function uses a non-reentrant model
  8255 ;;
  8256                           
  8257                           
  8258                           ;psect for function _Sensor_postAcquisitionProcess
  8259  0BEE                     _Sensor_postAcquisitionProcess:	
  8260                           
  8261                           ;incstack = 0
  8262                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8263                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  8264  0BEE  00F9               	movwf	Sensor_postAcquisitionProcess@sensor
  8265                           
  8266                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 407: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 408:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 409:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  8267  0BEF  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8268  0BF0  318A  2265  318B   	fcall	_Sensor_getScanGroupIndex
  8269  0BF3  00F5               	movwf	??_Sensor_postAcquisitionProcess
  8270  0BF4  0875               	movf	??_Sensor_postAcquisitionProcess,w
  8271  0BF5  00F8               	movwf	Sensor_postAcquisitionProcess@adcIndex
  8272                           
  8273                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 411:     if(Sensor_isEnabled(sensor))
  8274  0BF6  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8275  0BF7  3196  26D4  318B   	fcall	_Sensor_isEnabled
  8276  0BFA  3A00               	xorlw	0
  8277  0BFB  1903               	skipnz
  8278  0BFC  2C14               	goto	l4098
  8279                           
  8280                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 412:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  8281  0BFD  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8282  0BFE  3E06               	addlw	6
  8283  0BFF  0086               	movwf	6
  8284  0C00  0187               	clrf	7
  8285  0C01  3578               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  8286  0C02  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  8287  0C03  0084               	movwf	4
  8288  0C04  0185               	clrf	5
  8289  0C05  3F40               	moviw [0]fsr1
  8290  0C06  0200               	subwf	0,w
  8291  0C07  00F1               	movwf	abs@a
  8292  0C08  3101               	addfsr 0,1
  8293  0C09  3F41               	moviw [1]fsr1
  8294  0C0A  3B00               	subwfb	0,w
  8295  0C0B  00F2               	movwf	abs@a+1
  8296  0C0C  3197  27D0  318B   	fcall	_abs
  8297  0C0F  0872               	movf	?_abs+1,w
  8298  0C10  00F7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  8299  0C11  0871               	movf	?_abs,w
  8300  0C12  00F6               	movwf	Sensor_postAcquisitionProcess@deviation
  8301  0C13  2C16               	goto	l4100
  8302  0C14                     l4098:	
  8303                           
  8304                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 414:         deviation = 0;
  8305  0C14  01F6               	clrf	Sensor_postAcquisitionProcess@deviation
  8306  0C15  01F7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  8307  0C16                     l4100:	
  8308                           
  8309                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 416:     if(deviation > 100u)
  8310  0C16  3000               	movlw	0
  8311  0C17  0277               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  8312  0C18  3065               	movlw	101
  8313  0C19  1903               	skipnz
  8314  0C1A  0276               	subwf	Sensor_postAcquisitionProcess@deviation,w
  8315  0C1B  1C03               	skipc
  8316  0C1C  2C21               	goto	l4104
  8317                           
  8318                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 417:         Sensor_setActive(sensor);
  8319  0C1D  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8320  0C1E  3196  262A         	fcall	_Sensor_setActive
  8321  0C20  0008               	return
  8322  0C21                     l4104:	
  8323                           
  8324                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 419:         Sensor_setInactive(sensor);
  8325  0C21  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8326  0C22  3196  2631         	fcall	_Sensor_setInactive
  8327  0C24  0008               	return
  8328  0C25                     __end_of_Sensor_postAcquisitionProcess:	
  8329                           
  8330                           	psect	text45
  8331  1631                     __ptext45:	
  8332 ;; *************** function _Sensor_setInactive *****************
  8333 ;; Defined at:
  8334 ;;		line 868 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;  sensor          1    wreg     PTR struct .
  8337 ;;		 -> mtouch_sensor(18), 
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;  sensor          1    1[COMMON] PTR struct .
  8340 ;;		 -> mtouch_sensor(18), 
  8341 ;; Return value:  Size  Location     Type
  8342 ;;                  1    wreg      void 
  8343 ;; Registers used:
  8344 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8345 ;; Tracked objects:
  8346 ;;		On entry : 0/0
  8347 ;;		On exit  : 0/0
  8348 ;;		Unchanged: 0/0
  8349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8350 ;;      Params:         0       0       0       0       0       0       0       0
  8351 ;;      Locals:         1       0       0       0       0       0       0       0
  8352 ;;      Temps:          0       0       0       0       0       0       0       0
  8353 ;;      Totals:         1       0       0       0       0       0       0       0
  8354 ;;Total ram usage:        1 bytes
  8355 ;; Hardware stack levels used:    1
  8356 ;; Hardware stack levels required when called:    4
  8357 ;; This function calls:
  8358 ;;		Nothing
  8359 ;; This function is called by:
  8360 ;;		_Sensor_postAcquisitionProcess
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           
  8365                           ;psect for function _Sensor_setInactive
  8366  1631                     _Sensor_setInactive:	
  8367                           
  8368                           ;incstack = 0
  8369                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8370                           ;Sensor_setInactive@sensor stored from wreg
  8371  1631  00F1               	movwf	Sensor_setInactive@sensor
  8372                           
  8373                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 868: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 86
      +                          9: {;mcc_generated_files/mtouch/mtouch_sensor.c: 870:     sensor->active = 0;
  8374  1632  0871               	movf	Sensor_setInactive@sensor,w
  8375  1633  3E08               	addlw	8
  8376  1634  0086               	movwf	6
  8377  1635  0187               	clrf	7
  8378  1636  1081               	bcf	1,1
  8379  1637  0008               	return
  8380  1638                     __end_of_Sensor_setInactive:	
  8381                           
  8382                           	psect	text46
  8383  162A                     __ptext46:	
  8384 ;; *************** function _Sensor_setActive *****************
  8385 ;; Defined at:
  8386 ;;		line 863 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;  sensor          1    wreg     PTR struct .
  8389 ;;		 -> mtouch_sensor(18), 
  8390 ;; Auto vars:     Size  Location     Type
  8391 ;;  sensor          1    1[COMMON] PTR struct .
  8392 ;;		 -> mtouch_sensor(18), 
  8393 ;; Return value:  Size  Location     Type
  8394 ;;                  1    wreg      void 
  8395 ;; Registers used:
  8396 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8402 ;;      Params:         0       0       0       0       0       0       0       0
  8403 ;;      Locals:         1       0       0       0       0       0       0       0
  8404 ;;      Temps:          0       0       0       0       0       0       0       0
  8405 ;;      Totals:         1       0       0       0       0       0       0       0
  8406 ;;Total ram usage:        1 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; Hardware stack levels required when called:    4
  8409 ;; This function calls:
  8410 ;;		Nothing
  8411 ;; This function is called by:
  8412 ;;		_Sensor_postAcquisitionProcess
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           
  8417                           ;psect for function _Sensor_setActive
  8418  162A                     _Sensor_setActive:	
  8419                           
  8420                           ;incstack = 0
  8421                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8422                           ;Sensor_setActive@sensor stored from wreg
  8423  162A  00F1               	movwf	Sensor_setActive@sensor
  8424                           
  8425                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 863: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 864:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 865:     sensor->active = 1;
  8426  162B  0871               	movf	Sensor_setActive@sensor,w
  8427  162C  3E08               	addlw	8
  8428  162D  0086               	movwf	6
  8429  162E  0187               	clrf	7
  8430  162F  1481               	bsf	1,1
  8431  1630  0008               	return
  8432  1631                     __end_of_Sensor_setActive:	
  8433                           
  8434                           	psect	text47
  8435  0E79                     __ptext47:	
  8436 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  8437 ;; Defined at:
  8438 ;;		line 724 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;  sensor_adc1     1    wreg     PTR struct .
  8441 ;;		 -> mtouch_sensor(18), 
  8442 ;;  sensor_adc2     1   14[BANK0 ] PTR struct .
  8443 ;;		 -> mtouch_sensor(18), 
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  sensor_adc1     1   17[BANK0 ] PTR struct .
  8446 ;;		 -> mtouch_sensor(18), 
  8447 ;;  best_packet_    4   22[BANK0 ] unsigned short [2]
  8448 ;;  packet_noise    2   18[BANK0 ] unsigned short 
  8449 ;;  i               1   26[BANK0 ] unsigned char 
  8450 ;;  retry           1   21[BANK0 ] unsigned char 
  8451 ;;  best_sample_    1   20[BANK0 ] unsigned char 
  8452 ;; Return value:  Size  Location     Type
  8453 ;;                  1    wreg      enum E2857
  8454 ;; Registers used:
  8455 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8456 ;; Tracked objects:
  8457 ;;		On entry : 0/0
  8458 ;;		On exit  : 0/0
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8461 ;;      Params:         0       1       0       0       0       0       0       0
  8462 ;;      Locals:         0      10       0       0       0       0       0       0
  8463 ;;      Temps:          0       2       0       0       0       0       0       0
  8464 ;;      Totals:         0      13       0       0       0       0       0       0
  8465 ;;Total ram usage:       13 bytes
  8466 ;; Hardware stack levels used:    1
  8467 ;; Hardware stack levels required when called:    7
  8468 ;; This function calls:
  8469 ;;		_Sensor_Acq_ExecutePacket
  8470 ;; This function is called by:
  8471 ;;		_Sensor_Acquisition
  8472 ;; This function uses a non-reentrant model
  8473 ;;
  8474                           
  8475                           
  8476                           ;psect for function _Sensor_Scanfrequency_Evaluation
  8477  0E79                     _Sensor_Scanfrequency_Evaluation:	
  8478                           
  8479                           ;incstack = 0
  8480                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8481                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  8482  0E79  0020               	movlb	0	; select bank0
  8483  0E7A  00B1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  8484                           
  8485                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 724: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 725: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 726:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 727:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 728:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 729:     mtouch_sensor_sampleperiod_t best_sample_period;
  8486  0E7B  085C               	movf	_packet_noise+1,w
  8487  0E7C  00B0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  8488  0E7D  085B               	movf	_packet_noise,w
  8489  0E7E  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8490  0E7F  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8491  0E80  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8492  0E81  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8493  0E82  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8494  0E83  085B               	movf	_packet_noise,w
  8495  0E84  072F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  8496  0E85  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8497  0E86  085C               	movf	_packet_noise+1,w
  8498  0E87  3D30               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  8499  0E88  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8500                           
  8501                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 734:     best_sample_period = sample_period
      +                          ;
  8502  0E89  086E               	movf	_sample_period,w
  8503  0E8A  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8504  0E8B  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8505  0E8C  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8506                           
  8507                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 735:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  8508  0E8D  0854               	movf	_packet_sample+1,w
  8509  0E8E  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  8510  0E8F  0853               	movf	_packet_sample,w
  8511  0E90  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  8512                           
  8513                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 736:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  8514  0E91  0856               	movf	_packet_sample+3,w
  8515  0E92  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  8516  0E93  0855               	movf	_packet_sample+2,w
  8517  0E94  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  8518                           
  8519                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 738:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  8520  0E95  01BA               	clrf	Sensor_Scanfrequency_Evaluation@i
  8521  0E96                     l5684:	
  8522                           
  8523                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 739:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 740:         sample_period += frequency_hop[i];
  8524  0E96  083A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  8525  0E97  3E0F               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8526  0E98  0084               	movwf	4
  8527  0E99  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8528  0E9A  1803               	skipnc
  8529  0E9B  3E01               	addlw	1
  8530  0E9C  0085               	movwf	5
  8531  0E9D  0800               	movf	0,w	;code access
  8532  0E9E  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8533  0E9F  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8534  0EA0  07EE               	addwf	_sample_period,f
  8535                           
  8536                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 741:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  8537  0EA1  30AE               	movlw	174
  8538  0EA2  026E               	subwf	_sample_period,w
  8539  0EA3  1803               	skipnc
  8540  0EA4  2EA9               	goto	l5692
  8541                           
  8542                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 748:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  8543  0EA5  30AE               	movlw	174
  8544  0EA6  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8545  0EA7  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8546  0EA8  07EE               	addwf	_sample_period,f
  8547  0EA9                     l5692:	
  8548                           
  8549                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 751:         retry = (uint8_t)5;
  8550  0EA9  3005               	movlw	5
  8551  0EAA  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8552  0EAB  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8553  0EAC  00B5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  8554  0EAD                     l5700:	
  8555                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 753:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8556                           
  8557                           
  8558                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 753:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8559  0EAD  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  8560  0EAE  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8561  0EAF  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8562  0EB0  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8563  0EB1  0831               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  8564  0EB2  3182  22BC  318E   	fcall	_Sensor_Acq_ExecutePacket
  8565  0EB5  3A00               	xorlw	0
  8566  0EB6  1903               	btfsc	3,2
  8567  0EB7  2EC0               	goto	l5702
  8568                           
  8569                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 754:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 755:             retry--;
  8570  0EB8  3001               	movlw	1
  8571  0EB9  0020               	movlb	0	; select bank0
  8572  0EBA  02B5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  8573                           
  8574                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:             if(retry == 0)
  8575  0EBB  0835               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  8576  0EBC  1D03               	btfss	3,2
  8577  0EBD  2EAD               	goto	l5700
  8578                           
  8579                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 757:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 758:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8580  0EBE  30FC               	movlw	252
  8581  0EBF  0008               	return
  8582  0EC0                     l5702:	
  8583                           
  8584                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         if(packet_noise_Max < packet_n
      +                          oise)
  8585  0EC0  0020               	movlb	0	; select bank0
  8586  0EC1  085C               	movf	_packet_noise+1,w
  8587  0EC2  0233               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  8588  0EC3  1D03               	skipz
  8589  0EC4  2EC7               	goto	u4665
  8590  0EC5  085B               	movf	_packet_noise,w
  8591  0EC6  0232               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  8592  0EC7                     u4665:	
  8593  0EC7  1803               	skipnc
  8594  0EC8  2ED9               	goto	l5706
  8595                           
  8596                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 764:             packet_noise_Max = packet_noise;
  8597  0EC9  085C               	movf	_packet_noise+1,w
  8598  0ECA  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8599  0ECB  085B               	movf	_packet_noise,w
  8600  0ECC  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8601                           
  8602                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:             best_sample_period = sampl
      +                          e_period;
  8603  0ECD  086E               	movf	_sample_period,w
  8604  0ECE  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8605  0ECF  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8606  0ED0  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8607                           
  8608                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  8609  0ED1  0854               	movf	_packet_sample+1,w
  8610  0ED2  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  8611  0ED3  0853               	movf	_packet_sample,w
  8612  0ED4  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  8613                           
  8614                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 767:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  8615  0ED5  0856               	movf	_packet_sample+3,w
  8616  0ED6  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  8617  0ED7  0855               	movf	_packet_sample+2,w
  8618  0ED8  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  8619  0ED9                     l5706:	
  8620                           
  8621                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 769:     }
  8622  0ED9  3001               	movlw	1
  8623  0EDA  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8624  0EDB  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8625  0EDC  07BA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  8626  0EDD  3005               	movlw	5
  8627  0EDE  023A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  8628  0EDF  1C03               	skipc
  8629  0EE0  2E96               	goto	l5684
  8630                           
  8631                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:     sample_period = best_sample_period
      +                          ;
  8632  0EE1  0834               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  8633  0EE2  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8634  0EE3  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8635  0EE4  00EE               	movwf	_sample_period
  8636                           
  8637                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 772:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  8638  0EE5  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  8639  0EE6  00D4               	movwf	_packet_sample+1
  8640  0EE7  0836               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  8641  0EE8  00D3               	movwf	_packet_sample
  8642                           
  8643                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 773:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  8644  0EE9  0839               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  8645  0EEA  00D6               	movwf	_packet_sample+3
  8646  0EEB  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  8647  0EEC  00D5               	movwf	_packet_sample+2
  8648                           
  8649                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775:     return MTOUCH_SENSOR_ERROR_none;
  8650  0EED  3000               	movlw	0
  8651  0EEE  0008               	return
  8652  0EEF                     __end_of_Sensor_Scanfrequency_Evaluation:	
  8653                           
  8654                           	psect	text48
  8655  02BC                     __ptext48:	
  8656 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  8657 ;; Defined at:
  8658 ;;		line 462 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8659 ;; Parameters:    Size  Location     Type
  8660 ;;  sensor_adc1     1    wreg     PTR struct .
  8661 ;;		 -> mtouch_sensor(18), 
  8662 ;;  sensor_adc2     1   11[COMMON] PTR struct .
  8663 ;;		 -> mtouch_sensor(18), 
  8664 ;; Auto vars:     Size  Location     Type
  8665 ;;  sensor_adc1     1   13[BANK0 ] PTR struct .
  8666 ;;		 -> mtouch_sensor(18), 
  8667 ;;  last_b          2   10[BANK0 ] unsigned short 
  8668 ;;  last_a          2    8[BANK0 ] unsigned short 
  8669 ;;  packet_count    1   12[BANK0 ] unsigned char 
  8670 ;;  activeSensor    1    7[BANK0 ] unsigned char 
  8671 ;;  ADxIF_flag      1    6[BANK0 ] unsigned char 
  8672 ;;  sensor2Force    1    5[BANK0 ] unsigned char 
  8673 ;;  sensor1Force    1    4[BANK0 ] unsigned char 
  8674 ;;  AD2CON2_temp    1    3[BANK0 ] unsigned char 
  8675 ;;  AD1CON2_temp    1    2[BANK0 ] unsigned char 
  8676 ;;  ADCOMCON_tem    1    1[BANK0 ] unsigned char 
  8677 ;; Return value:  Size  Location     Type
  8678 ;;                  1    wreg      enum E2857
  8679 ;; Registers used:
  8680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8681 ;; Tracked objects:
  8682 ;;		On entry : 0/0
  8683 ;;		On exit  : 0/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8686 ;;      Params:         1       0       0       0       0       0       0       0
  8687 ;;      Locals:         0      13       0       0       0       0       0       0
  8688 ;;      Temps:          0       1       0       0       0       0       0       0
  8689 ;;      Totals:         1      14       0       0       0       0       0       0
  8690 ;;Total ram usage:       15 bytes
  8691 ;; Hardware stack levels used:    1
  8692 ;; Hardware stack levels required when called:    6
  8693 ;; This function calls:
  8694 ;;		_MTOUCH_Sensor_Scan_Initialize
  8695 ;;		_Sensor_autoCalibration
  8696 ;;		_Sensor_isActive
  8697 ;;		_Sensor_isCalibrated
  8698 ;;		_Sensor_isEnabled
  8699 ;;		_Sensor_loadADCSettings
  8700 ;;		_TMR2_LoadPeriodRegister
  8701 ;;		_TMR2_StartTimer
  8702 ;;		_TMR2_StopTimer
  8703 ;;		_abs
  8704 ;; This function is called by:
  8705 ;;		_Sensor_Acquisition
  8706 ;;		_Sensor_Scanfrequency_Evaluation
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           
  8711                           ;psect for function _Sensor_Acq_ExecutePacket
  8712  02BC                     _Sensor_Acq_ExecutePacket:	
  8713                           
  8714                           ;incstack = 0
  8715                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8716                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  8717  02BC  0020               	movlb	0	; select bank0
  8718  02BD  00AD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  8719                           
  8720                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 465:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 467:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  8721  02BE  01A8               	clrf	Sensor_Acq_ExecutePacket@last_a
  8722  02BF  01A9               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  8723                           
  8724                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 468:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  8725  02C0  01AA               	clrf	Sensor_Acq_ExecutePacket@last_b
  8726  02C1  01AB               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  8727                           
  8728                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 469:     uint8_t activeSensor = 0;
  8729  02C2  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  8730                           
  8731                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 471:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 472:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 478:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  8732  02C3  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  8733  02C4  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  8734                           
  8735                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 479:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  8736  02C5  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8737  02C6  1903               	btfsc	3,2
  8738  02C7  2AFB               	goto	l5464
  8739  02C8  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8740  02C9  1903               	btfsc	3,2
  8741  02CA  2AFB               	goto	l5464
  8742                           
  8743                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 481:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  8744  02CB  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8745  02CC  3E08               	addlw	8
  8746  02CD  0086               	movwf	6
  8747  02CE  0187               	clrf	7
  8748  02CF  1981               	btfsc	1,3
  8749  02D0  2ADF               	goto	l5446
  8750  02D1  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8751  02D2  3E08               	addlw	8
  8752  02D3  0086               	movwf	6
  8753  02D4  0187               	clrf	7
  8754  02D5  1D81               	btfss	1,3
  8755  02D6  2ADF               	goto	l5446
  8756                           
  8757                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 482:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 483:             sensor_adc1->enabled = 1;
  8758  02D7  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8759  02D8  3E08               	addlw	8
  8760  02D9  0086               	movwf	6
  8761  02DA  0187               	clrf	7
  8762  02DB  1581               	bsf	1,3
  8763                           
  8764                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 484:             sensor1ForceEnabled = 1;
  8765  02DC  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  8766  02DD  0AA4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  8767                           
  8768                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 485:         }
  8769  02DE  2B0F               	goto	l5488
  8770  02DF                     l5446:	
  8771  02DF  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8772  02E0  3E08               	addlw	8
  8773  02E1  0086               	movwf	6
  8774  02E2  0187               	clrf	7
  8775  02E3  1981               	btfsc	1,3
  8776  02E4  2AF3               	goto	l5454
  8777  02E5  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8778  02E6  3E08               	addlw	8
  8779  02E7  0086               	movwf	6
  8780  02E8  0187               	clrf	7
  8781  02E9  1D81               	btfss	1,3
  8782  02EA  2AF3               	goto	l5454
  8783                           
  8784                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 487:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 488:             sensor_adc2->enabled = 1;
  8785  02EB  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8786  02EC  3E08               	addlw	8
  8787  02ED  0086               	movwf	6
  8788  02EE  0187               	clrf	7
  8789  02EF  1581               	bsf	1,3
  8790                           
  8791                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 489:             sensor2ForceEnabled = 1;
  8792  02F0  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  8793  02F1  0AA5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  8794                           
  8795                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 490:         }
  8796  02F2  2B0F               	goto	l5488
  8797  02F3                     l5454:	
  8798  02F3  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8799  02F4  3E08               	addlw	8
  8800  02F5  0086               	movwf	6
  8801  02F6  0187               	clrf	7
  8802  02F7  1981               	btfsc	1,3
  8803  02F8  2B0F               	goto	l5488
  8804  02F9                     l5456:	
  8805  02F9  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8806  02FA  2B08               	goto	L4
  8807  02FB                     l5464:	
  8808                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498:     }
  8809                           
  8810  02FB  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8811  02FC  1D03               	btfss	3,2
  8812  02FD  2B01               	goto	l5476
  8813  02FE  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8814  02FF  1D03               	btfss	3,2
  8815  0300  2AF9               	goto	l5456
  8816  0301                     l5476:	
  8817                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 500:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 501:         if(sensor_adc2->enabled == 0)
  8818                           
  8819  0301  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8820  0302  1903               	btfsc	3,2
  8821  0303  2B0F               	goto	l5488
  8822  0304  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8823  0305  1D03               	btfss	3,2
  8824  0306  2B0F               	goto	l5488
  8825                           
  8826                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 510:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 511:         if(sensor_adc1->enabled == 0)
  8827  0307  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8828  0308                     L4:	
  8829  0308  3E08               	addlw	8
  8830  0309  0086               	movwf	6
  8831  030A  0187               	clrf	7
  8832  030B  1981               	btfsc	1,3
  8833  030C  2B0F               	goto	l5488
  8834  030D                     l5458:	
  8835                           
  8836                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 492:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 493:             return MTOUCH_SENSOR_ERROR_none;
  8837  030D  3000               	movlw	0
  8838  030E  0008               	return
  8839  030F                     l5488:	
  8840                           
  8841                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 523:     if(Sensor_isActive(sensor_adc2))
  8842  030F  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8843  0310  3196  267D  3182   	fcall	_Sensor_isActive
  8844  0313  3A00               	xorlw	0
  8845  0314  1903               	skipnz
  8846  0315  2B19               	goto	l5492
  8847                           
  8848                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 524:         activeSensor = 1;
  8849  0316  0020               	movlb	0	; select bank0
  8850  0317  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  8851  0318  0AA7               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  8852  0319                     l5492:	
  8853                           
  8854                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 530:     ADCOMCON_temp = ADCOMCON;
  8855  0319  002E               	movlb	14	; select bank14
  8856  031A  0812               	movf	18,w	;volatile
  8857  031B  0020               	movlb	0	; select bank0
  8858  031C  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8859  031D  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8860  031E  00A1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  8861                           
  8862                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 531:     AD1CON2_temp = AD1CON2;
  8863  031F  002E               	movlb	14	; select bank14
  8864  0320  0813               	movf	19,w	;volatile
  8865  0321  0020               	movlb	0	; select bank0
  8866  0322  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8867  0323  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8868  0324  00A2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  8869                           
  8870                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:     AD2CON2_temp = AD2CON2;
  8871  0325  002F               	movlb	15	; select bank15
  8872  0326  0813               	movf	19,w	;volatile
  8873  0327  0020               	movlb	0	; select bank0
  8874  0328  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8875  0329  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8876  032A  00A3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  8877                           
  8878                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:     MTOUCH_Sensor_Scan_Initialize();
  8879  032B  3196  26C4  3182   	fcall	_MTOUCH_Sensor_Scan_Initialize
  8880                           
  8881                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 537:     if(sensor_adc1!=((void*)0))
  8882  032E  0020               	movlb	0	; select bank0
  8883  032F  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8884  0330  1903               	btfsc	3,2
  8885  0331  2B44               	goto	l5508
  8886                           
  8887                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 538:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 539:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  8888  0332  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8889  0333  3E04               	addlw	4
  8890  0334  0086               	movwf	6
  8891  0335  0187               	clrf	7
  8892  0336  0801               	movf	1,w
  8893  0337  3EFF               	addlw	255
  8894  0338  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8895  0339  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8896  033A  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  8897                           
  8898                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:         ADxIF_flag = 0;
  8899  033B  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  8900                           
  8901                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:         AAD1GRD = 0b01000000;
  8902  033C  3040               	movlw	64
  8903  033D  002E               	movlb	14	; select bank14
  8904  033E  0098               	movwf	24	;volatile
  8905                           
  8906                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:         AAD2GRD = 0b00000000;
  8907  033F  002F               	movlb	15	; select bank15
  8908  0340  0198               	clrf	24	;volatile
  8909                           
  8910                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 543:         APFCONbits.GRDASEL = 0x0;
  8911  0341  0022               	movlb	2	; select bank2
  8912  0342  101D               	bcf	29,0	;volatile
  8913                           
  8914                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 544:     }
  8915  0343  2B56               	goto	l5518
  8916  0344                     l5508:	
  8917                           
  8918                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 547:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  8919  0344  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8920  0345  3E04               	addlw	4
  8921  0346  0086               	movwf	6
  8922  0347  0187               	clrf	7
  8923  0348  0801               	movf	1,w
  8924  0349  3EFF               	addlw	255
  8925  034A  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8926  034B  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8927  034C  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  8928                           
  8929                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 548:         ADxIF_flag = 1;
  8930  034D  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  8931  034E  0AA6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  8932                           
  8933                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:         AAD1GRD = 0b00000000;
  8934  034F  002E               	movlb	14	; select bank14
  8935  0350  0198               	clrf	24	;volatile
  8936                           
  8937                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:         AAD2GRD = 0b01000000;
  8938  0351  3040               	movlw	64
  8939  0352  002F               	movlb	15	; select bank15
  8940  0353  0098               	movwf	24	;volatile
  8941                           
  8942                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:         APFCONbits.GRDASEL = 0x1;
  8943  0354  0022               	movlb	2	; select bank2
  8944  0355  141D               	bsf	29,0	;volatile
  8945  0356                     l5518:	
  8946                           
  8947                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 554:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  8948  0356  01F2               	clrf	Sensor_loadADCSettings@adc_index
  8949  0357  0020               	movlb	0	; select bank0
  8950  0358  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8951  0359  3184  247A  3182   	fcall	_Sensor_loadADCSettings
  8952                           
  8953                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  8954  035C  01F2               	clrf	Sensor_loadADCSettings@adc_index
  8955  035D  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  8956  035E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8957  035F  3184  247A  3182   	fcall	_Sensor_loadADCSettings
  8958                           
  8959                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:     sensor_globalFlags.done = 0;
  8960  0362  0020               	movlb	0	; select bank0
  8961  0363  1069               	bcf	_sensor_globalFlags,0	;volatile
  8962                           
  8963                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:     sensor_globalFlags.error = 0;
  8964  0364  1169               	bcf	_sensor_globalFlags,2	;volatile
  8965                           
  8966                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:     sensor_globalFlags.interrupted = 0
      +                          ;
  8967  0365  11E9               	bcf	_sensor_globalFlags,3	;volatile
  8968                           
  8969                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 561:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  8970  0366  086E               	movf	_sample_period,w
  8971  0367  3195  25E4  3182   	fcall	_TMR2_LoadPeriodRegister
  8972                           
  8973                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 562:     TMR2_StartTimer();
  8974  036A  3195  25C0  3182   	fcall	_TMR2_StartTimer
  8975                           
  8976                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     packet_noise = 0;
  8977  036D  0020               	movlb	0	; select bank0
  8978  036E  01DB               	clrf	_packet_noise
  8979  036F  01DC               	clrf	_packet_noise+1
  8980  0370                     l5534:	
  8981                           
  8982                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 567:         if(ADxIF_flag == 0)
  8983  0370  0826               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  8984  0371  1D03               	btfss	3,2
  8985  0372  2B79               	goto	l286
  8986                           
  8987                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 569:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  8988  0373  1F11               	btfss	17,6	;volatile
  8989  0374  10E9               	bcf	_sensor_globalFlags,1	;volatile
  8990  0375                     l288:	
  8991  0375  1F11               	btfss	17,6	;volatile
  8992  0376  2B75               	goto	l288
  8993                           
  8994                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:             PIR1bits.AD1IF = 0;
  8995  0377  1311               	bcf	17,6	;volatile
  8996                           
  8997                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:         }
  8998  0378  2B7F               	goto	l5542
  8999  0379                     l286:	
  9000                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 573:         else
  9001                           
  9002                           
  9003                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 574:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 575:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9004  0379  1B12               	btfsc	18,6	;volatile
  9005  037A  2B7C               	goto	l293
  9006  037B  10E9               	bcf	_sensor_globalFlags,1	;volatile
  9007  037C                     l293:	
  9008  037C  1F12               	btfss	18,6	;volatile
  9009  037D  2B7C               	goto	l293
  9010                           
  9011                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:             PIR2bits.AD2IF = 0;
  9012  037E  1312               	bcf	18,6	;volatile
  9013  037F                     l5542:	
  9014                           
  9015                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:         AAD1GRD ^= 0b00100001;
  9016  037F  3021               	movlw	33
  9017  0380  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9018  0381  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9019  0382  002E               	movlb	14	; select bank14
  9020  0383  0698               	xorwf	24,f	;volatile
  9021                           
  9022                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:         AAD2GRD ^= 0b00100001;
  9023  0384  3021               	movlw	33
  9024  0385  0020               	movlb	0	; select bank0
  9025  0386  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9026  0387  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9027  0388  002F               	movlb	15	; select bank15
  9028  0389  0698               	xorwf	24,f	;volatile
  9029                           
  9030                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:         AAD1CON3 ^= 0b11000000;
  9031  038A  30C0               	movlw	192
  9032  038B  0020               	movlb	0	; select bank0
  9033  038C  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9034  038D  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9035  038E  002E               	movlb	14	; select bank14
  9036  038F  0694               	xorwf	20,f	;volatile
  9037                           
  9038                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:         AAD2CON3 ^= 0b11000000;
  9039  0390  30C0               	movlw	192
  9040  0391  0020               	movlb	0	; select bank0
  9041  0392  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9042  0393  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9043  0394  002F               	movlb	15	; select bank15
  9044  0395  0694               	xorwf	20,f	;volatile
  9045                           
  9046                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 585:         if ((packet_counter & 0x01) ==
      +                           0)
  9047  0396  0020               	movlb	0	; select bank0
  9048  0397  182C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  9049  0398  2BDF               	goto	l5558
  9050                           
  9051                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 587:             packet_sample[0] += AAD1RES0;
  9052  0399  002E               	movlb	14	; select bank14
  9053  039A  081A               	movf	26,w	;volatile
  9054  039B  0020               	movlb	0	; select bank0
  9055  039C  07D3               	addwf	_packet_sample,f
  9056  039D  002E               	movlb	14	; select bank14
  9057  039E  081B               	movf	27,w	;volatile
  9058  039F  0020               	movlb	0	; select bank0
  9059  03A0  3DD4               	addwfc	_packet_sample+1,f
  9060                           
  9061                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 588:             packet_sample[1] += AAD2RE
      +                          S0;
  9062  03A1  002F               	movlb	15	; select bank15
  9063  03A2  081A               	movf	26,w	;volatile
  9064  03A3  0020               	movlb	0	; select bank0
  9065  03A4  07D5               	addwf	_packet_sample+2,f
  9066  03A5  002F               	movlb	15	; select bank15
  9067  03A6  081B               	movf	27,w	;volatile
  9068  03A7  0020               	movlb	0	; select bank0
  9069  03A8  3DD6               	addwfc	_packet_sample+3,f
  9070                           
  9071                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:             if(activeSensor ==0)
  9072  03A9  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9073  03AA  1D03               	btfss	3,2
  9074  03AB  2BC4               	goto	l5554
  9075                           
  9076                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 591:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  9077  03AC  002E               	movlb	14	; select bank14
  9078  03AD  081A               	movf	26,w	;volatile
  9079  03AE  0020               	movlb	0	; select bank0
  9080  03AF  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9081  03B0  00F1               	movwf	abs@a
  9082  03B1  002E               	movlb	14	; select bank14
  9083  03B2  081B               	movf	27,w	;volatile
  9084  03B3  0020               	movlb	0	; select bank0
  9085  03B4  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9086  03B5  00F2               	movwf	abs@a+1
  9087  03B6  3197  27D0  3182   	fcall	_abs
  9088  03B9  0871               	movf	?_abs,w
  9089  03BA  0020               	movlb	0	; select bank0
  9090  03BB  07DB               	addwf	_packet_noise,f
  9091  03BC  0872               	movf	?_abs+1,w
  9092  03BD  3DDC               	addwfc	_packet_noise+1,f
  9093                           
  9094                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 592:                 last_b = AAD1RES0;
  9095  03BE  002E               	movlb	14	; select bank14
  9096  03BF  081B               	movf	27,w	;volatile
  9097  03C0  0020               	movlb	0	; select bank0
  9098  03C1  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9099  03C2  002E               	movlb	14	; select bank14
  9100  03C3  2BDB               	goto	L3
  9101  03C4                     l5554:	
  9102                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 593:             }
  9103                           
  9104                           
  9105                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 596:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  9106  03C4  002F               	movlb	15	; select bank15
  9107  03C5  081A               	movf	26,w	;volatile
  9108  03C6  0020               	movlb	0	; select bank0
  9109  03C7  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9110  03C8  00F1               	movwf	abs@a
  9111  03C9  002F               	movlb	15	; select bank15
  9112  03CA  081B               	movf	27,w	;volatile
  9113  03CB  0020               	movlb	0	; select bank0
  9114  03CC  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9115  03CD  00F2               	movwf	abs@a+1
  9116  03CE  3197  27D0  3182   	fcall	_abs
  9117  03D1  0871               	movf	?_abs,w
  9118  03D2  0020               	movlb	0	; select bank0
  9119  03D3  07DB               	addwf	_packet_noise,f
  9120  03D4  0872               	movf	?_abs+1,w
  9121  03D5  3DDC               	addwfc	_packet_noise+1,f
  9122                           
  9123                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:                 last_b = AAD2RES0;
  9124  03D6  002F               	movlb	15	; select bank15
  9125  03D7  081B               	movf	27,w	;volatile
  9126  03D8  0020               	movlb	0	; select bank0
  9127  03D9  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9128  03DA  002F               	movlb	15	; select bank15
  9129  03DB                     L3:	
  9130  03DB  081A               	movf	26,w	;volatile
  9131  03DC  0020               	movlb	0	; select bank0
  9132  03DD  00AA               	movwf	Sensor_Acq_ExecutePacket@last_b
  9133  03DE  2C13               	goto	l5570
  9134  03DF                     l5558:	
  9135                           
  9136                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 602:             packet_sample[0] -= AAD1RES0;
  9137  03DF  002E               	movlb	14	; select bank14
  9138  03E0  081A               	movf	26,w	;volatile
  9139  03E1  0020               	movlb	0	; select bank0
  9140  03E2  02D3               	subwf	_packet_sample,f
  9141  03E3  002E               	movlb	14	; select bank14
  9142  03E4  081B               	movf	27,w	;volatile
  9143  03E5  0020               	movlb	0	; select bank0
  9144  03E6  3BD4               	subwfb	_packet_sample+1,f
  9145                           
  9146                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 603:             packet_sample[1] -= AAD2RE
      +                          S0;
  9147  03E7  002F               	movlb	15	; select bank15
  9148  03E8  081A               	movf	26,w	;volatile
  9149  03E9  0020               	movlb	0	; select bank0
  9150  03EA  02D5               	subwf	_packet_sample+2,f
  9151  03EB  002F               	movlb	15	; select bank15
  9152  03EC  081B               	movf	27,w	;volatile
  9153  03ED  0020               	movlb	0	; select bank0
  9154  03EE  3BD6               	subwfb	_packet_sample+3,f
  9155                           
  9156                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 604:             if(activeSensor ==0)
  9157  03EF  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9158  03F0  1D03               	btfss	3,2
  9159  03F1  2BF9               	goto	l5566
  9160                           
  9161                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 605:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 606:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  9162  03F2  002E               	movlb	14	; select bank14
  9163  03F3  081A               	movf	26,w	;volatile
  9164  03F4  0020               	movlb	0	; select bank0
  9165  03F5  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9166  03F6  00F1               	movwf	abs@a
  9167  03F7  002E               	movlb	14	; select bank14
  9168  03F8  2BFF               	goto	L6
  9169  03F9                     l5566:	
  9170                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 608:             }
  9171                           
  9172                           
  9173                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 611:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  9174  03F9  002F               	movlb	15	; select bank15
  9175  03FA  081A               	movf	26,w	;volatile
  9176  03FB  0020               	movlb	0	; select bank0
  9177  03FC  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9178  03FD  00F1               	movwf	abs@a
  9179  03FE  002F               	movlb	15	; select bank15
  9180  03FF                     L6:	
  9181  03FF  081B               	movf	27,w	;volatile
  9182  0400  0020               	movlb	0	; select bank0
  9183  0401  3B29               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  9184  0402  00F2               	movwf	abs@a+1
  9185  0403  3197  27D0  3182   	fcall	_abs
  9186  0406  0871               	movf	?_abs,w
  9187  0407  0020               	movlb	0	; select bank0
  9188  0408  07DB               	addwf	_packet_noise,f
  9189  0409  0872               	movf	?_abs+1,w
  9190  040A  3DDC               	addwfc	_packet_noise+1,f
  9191                           
  9192                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 607:                 last_a = AAD1RES0;
  9193  040B  002E               	movlb	14	; select bank14
  9194  040C  081B               	movf	27,w	;volatile
  9195  040D  0020               	movlb	0	; select bank0
  9196  040E  00A9               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  9197  040F  002E               	movlb	14	; select bank14
  9198  0410  081A               	movf	26,w	;volatile
  9199  0411  0020               	movlb	0	; select bank0
  9200  0412  00A8               	movwf	Sensor_Acq_ExecutePacket@last_a
  9201  0413                     l5570:	
  9202                           
  9203                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:         if (packet_counter == 0)
  9204  0413  082C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  9205  0414  1903               	btfsc	3,2
  9206                           
  9207                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 618:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 620:             sensor_globalFlags.done = (uint8_t)1;
  9208  0415  1469               	bsf	_sensor_globalFlags,0	;volatile
  9209                           
  9210                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 622:         packet_counter--;
  9211  0416  3001               	movlw	1
  9212  0417  02AC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  9213                           
  9214                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 624:         if (sensor_globalFlags.check !
      +                          = 0)
  9215  0418  1CE9               	btfss	_sensor_globalFlags,1	;volatile
  9216  0419  2C1C               	goto	l303
  9217                           
  9218                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 625:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 626:             sensor_globalFlags.error = 1;
  9219  041A  1569               	bsf	_sensor_globalFlags,2	;volatile
  9220                           
  9221                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:             sensor_globalFlags.done = 
      +                          1;
  9222  041B  1469               	bsf	_sensor_globalFlags,0	;volatile
  9223  041C                     l303:	
  9224                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 628:         }
  9225                           
  9226                           
  9227                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 629:         sensor_globalFlags.check = 1;
  9228  041C  14E9               	bsf	_sensor_globalFlags,1	;volatile
  9229                           
  9230                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 630:     } while(sensor_globalFlags.done ==
      +                           0);
  9231  041D  1C69               	btfss	_sensor_globalFlags,0	;volatile
  9232  041E  2B70               	goto	l5534
  9233                           
  9234                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 632:     TMR2_StopTimer();
  9235  041F  3195  25C3  3182   	fcall	_TMR2_StopTimer
  9236                           
  9237                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:     ADCOMCON = ADCOMCON_temp;
  9238  0422  0020               	movlb	0	; select bank0
  9239  0423  0821               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  9240  0424  002E               	movlb	14	; select bank14
  9241  0425  0092               	movwf	18	;volatile
  9242                           
  9243                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:     AD1CON2 = AD1CON2_temp;
  9244  0426  0020               	movlb	0	; select bank0
  9245  0427  0822               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  9246  0428  002E               	movlb	14	; select bank14
  9247  0429  0093               	movwf	19	;volatile
  9248                           
  9249                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 635:     AD2CON2 = AD2CON2_temp;
  9250  042A  0020               	movlb	0	; select bank0
  9251  042B  0823               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  9252  042C  002F               	movlb	15	; select bank15
  9253  042D  0093               	movwf	19	;volatile
  9254                           
  9255                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:     if(sensor_globalFlags.error)
  9256  042E  0020               	movlb	0	; select bank0
  9257  042F  1D69               	btfss	_sensor_globalFlags,2	;volatile
  9258  0430  2C33               	goto	l305
  9259                           
  9260                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 638:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 639:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  9261  0431  30FB               	movlw	251
  9262  0432  0008               	return
  9263  0433                     l305:	
  9264                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 640:     }
  9265                           
  9266                           
  9267                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:     if(sensor_globalFlags.interrupted)
  9268  0433  1DE9               	btfss	_sensor_globalFlags,3	;volatile
  9269  0434  2C37               	goto	l5598
  9270                           
  9271                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 644:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  9272  0435  30FA               	movlw	250
  9273  0436  0008               	return
  9274  0437                     l5598:	
  9275                           
  9276                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 648:     if (sensor1ForceEnabled)
  9277  0437  0824               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  9278  0438  1903               	btfsc	3,2
  9279  0439  2C3F               	goto	l5602
  9280                           
  9281                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:         sensor_adc1->enabled = 0;
  9282  043A  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9283  043B  3E08               	addlw	8
  9284  043C  0086               	movwf	6
  9285  043D  0187               	clrf	7
  9286  043E  1181               	bcf	1,3
  9287  043F                     l5602:	
  9288                           
  9289                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if (sensor2ForceEnabled)
  9290  043F  0825               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  9291  0440  1903               	btfsc	3,2
  9292  0441  2C47               	goto	l5606
  9293                           
  9294                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:         sensor_adc2->enabled = 0;
  9295  0442  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9296  0443  3E08               	addlw	8
  9297  0444  0086               	movwf	6
  9298  0445  0187               	clrf	7
  9299  0446  1181               	bcf	1,3
  9300  0447                     l5606:	
  9301                           
  9302                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 655:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  9303  0447  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9304  0448  3196  26D4  3182   	fcall	_Sensor_isEnabled
  9305  044B  3A00               	xorlw	0
  9306  044C  1903               	skipnz
  9307  044D  2C5B               	goto	l5612
  9308  044E  0020               	movlb	0	; select bank0
  9309  044F  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9310  0450  3196  264F  3182   	fcall	_Sensor_isCalibrated
  9311  0453  3A00               	xorlw	0
  9312  0454  1D03               	skipz
  9313  0455  2C5B               	goto	l5612
  9314                           
  9315                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 656:         Sensor_autoCalibration(sensor_
      +                          adc1);
  9316  0456  0020               	movlb	0	; select bank0
  9317  0457  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9318  0458  318F  2776  3182   	fcall	_Sensor_autoCalibration
  9319  045B                     l5612:	
  9320                           
  9321                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  9322  045B  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9323  045C  3196  26D4  3182   	fcall	_Sensor_isEnabled
  9324  045F  3A00               	xorlw	0
  9325  0460  1903               	skipnz
  9326  0461  2C6D               	goto	l5618
  9327  0462  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9328  0463  3196  264F  3182   	fcall	_Sensor_isCalibrated
  9329  0466  3A00               	xorlw	0
  9330  0467  1D03               	skipz
  9331  0468  2C6D               	goto	l5618
  9332                           
  9333                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 659:         Sensor_autoCalibration(sensor_
      +                          adc2);
  9334  0469  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9335  046A  318F  2776  3182   	fcall	_Sensor_autoCalibration
  9336  046D                     l5618:	
  9337                           
  9338                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 661:     AD1PRECON = 0;
  9339  046D  002E               	movlb	14	; select bank14
  9340  046E  0196               	clrf	22	;volatile
  9341                           
  9342                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 662:     AD2PRECON = 0;
  9343  046F  002F               	movlb	15	; select bank15
  9344  0470  0196               	clrf	22	;volatile
  9345                           
  9346                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 663:     AD1ACQCON = 0;
  9347  0471  002E               	movlb	14	; select bank14
  9348  0472  0197               	clrf	23	;volatile
  9349                           
  9350                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 664:     AD2ACQCON = 0;
  9351  0473  002F               	movlb	15	; select bank15
  9352  0474  0197               	clrf	23	;volatile
  9353                           
  9354                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:     AD1CON0bits.ADON = 0;
  9355  0475  002E               	movlb	14	; select bank14
  9356  0476  1011               	bcf	17,0	;volatile
  9357                           
  9358                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 666:     AD2CON0bits.ADON = 0;
  9359  0477  002F               	movlb	15	; select bank15
  9360  0478  1011               	bcf	17,0	;volatile
  9361  0479  2B0D               	goto	l5458
  9362  047A                     __end_of_Sensor_Acq_ExecutePacket:	
  9363                           
  9364                           	psect	text49
  9365  15C3                     __ptext49:	
  9366 ;; *************** function _TMR2_StopTimer *****************
  9367 ;; Defined at:
  9368 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;		None
  9371 ;; Auto vars:     Size  Location     Type
  9372 ;;		None
  9373 ;; Return value:  Size  Location     Type
  9374 ;;                  1    wreg      void 
  9375 ;; Registers used:
  9376 ;;		None
  9377 ;; Tracked objects:
  9378 ;;		On entry : 0/0
  9379 ;;		On exit  : 0/0
  9380 ;;		Unchanged: 0/0
  9381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9382 ;;      Params:         0       0       0       0       0       0       0       0
  9383 ;;      Locals:         0       0       0       0       0       0       0       0
  9384 ;;      Temps:          0       0       0       0       0       0       0       0
  9385 ;;      Totals:         0       0       0       0       0       0       0       0
  9386 ;;Total ram usage:        0 bytes
  9387 ;; Hardware stack levels used:    1
  9388 ;; Hardware stack levels required when called:    4
  9389 ;; This function calls:
  9390 ;;		Nothing
  9391 ;; This function is called by:
  9392 ;;		_Sensor_Acq_ExecutePacket
  9393 ;; This function uses a non-reentrant model
  9394 ;;
  9395                           
  9396                           
  9397                           ;psect for function _TMR2_StopTimer
  9398  15C3                     _TMR2_StopTimer:	
  9399                           
  9400                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  9401                           
  9402                           ;incstack = 0
  9403                           ; Regs used in _TMR2_StopTimer: []
  9404  15C3  0020               	movlb	0	; select bank0
  9405  15C4  111C               	bcf	28,2	;volatile
  9406  15C5  0008               	return
  9407  15C6                     __end_of_TMR2_StopTimer:	
  9408                           
  9409                           	psect	text50
  9410  15C0                     __ptext50:	
  9411 ;; *************** function _TMR2_StartTimer *****************
  9412 ;; Defined at:
  9413 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  9414 ;; Parameters:    Size  Location     Type
  9415 ;;		None
  9416 ;; Auto vars:     Size  Location     Type
  9417 ;;		None
  9418 ;; Return value:  Size  Location     Type
  9419 ;;                  1    wreg      void 
  9420 ;; Registers used:
  9421 ;;		None
  9422 ;; Tracked objects:
  9423 ;;		On entry : 0/0
  9424 ;;		On exit  : 0/0
  9425 ;;		Unchanged: 0/0
  9426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9427 ;;      Params:         0       0       0       0       0       0       0       0
  9428 ;;      Locals:         0       0       0       0       0       0       0       0
  9429 ;;      Temps:          0       0       0       0       0       0       0       0
  9430 ;;      Totals:         0       0       0       0       0       0       0       0
  9431 ;;Total ram usage:        0 bytes
  9432 ;; Hardware stack levels used:    1
  9433 ;; Hardware stack levels required when called:    4
  9434 ;; This function calls:
  9435 ;;		Nothing
  9436 ;; This function is called by:
  9437 ;;		_Sensor_Acq_ExecutePacket
  9438 ;; This function uses a non-reentrant model
  9439 ;;
  9440                           
  9441                           
  9442                           ;psect for function _TMR2_StartTimer
  9443  15C0                     _TMR2_StartTimer:	
  9444                           
  9445                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  9446                           
  9447                           ;incstack = 0
  9448                           ; Regs used in _TMR2_StartTimer: []
  9449  15C0  0020               	movlb	0	; select bank0
  9450  15C1  151C               	bsf	28,2	;volatile
  9451  15C2  0008               	return
  9452  15C3                     __end_of_TMR2_StartTimer:	
  9453                           
  9454                           	psect	text51
  9455  15E4                     __ptext51:	
  9456 ;; *************** function _TMR2_LoadPeriodRegister *****************
  9457 ;; Defined at:
  9458 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;  periodVal       1    wreg     unsigned char 
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;  periodVal       1    1[COMMON] unsigned char 
  9463 ;; Return value:  Size  Location     Type
  9464 ;;                  1    wreg      void 
  9465 ;; Registers used:
  9466 ;;		wreg
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9472 ;;      Params:         0       0       0       0       0       0       0       0
  9473 ;;      Locals:         1       0       0       0       0       0       0       0
  9474 ;;      Temps:          0       0       0       0       0       0       0       0
  9475 ;;      Totals:         1       0       0       0       0       0       0       0
  9476 ;;Total ram usage:        1 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:    4
  9479 ;; This function calls:
  9480 ;;		Nothing
  9481 ;; This function is called by:
  9482 ;;		_Sensor_Acq_ExecutePacket
  9483 ;; This function uses a non-reentrant model
  9484 ;;
  9485                           
  9486                           
  9487                           ;psect for function _TMR2_LoadPeriodRegister
  9488  15E4                     _TMR2_LoadPeriodRegister:	
  9489                           
  9490                           ;incstack = 0
  9491                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  9492                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  9493  15E4  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  9494                           
  9495                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  9496  15E5  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  9497  15E6  0020               	movlb	0	; select bank0
  9498  15E7  009B               	movwf	27	;volatile
  9499  15E8  0008               	return
  9500  15E9                     __end_of_TMR2_LoadPeriodRegister:	
  9501                           
  9502                           	psect	text52
  9503  047A                     __ptext52:	
  9504 ;; *************** function _Sensor_loadADCSettings *****************
  9505 ;; Defined at:
  9506 ;;		line 428 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9507 ;; Parameters:    Size  Location     Type
  9508 ;;  sensor          1    wreg     PTR struct .
  9509 ;;		 -> mtouch_sensor(18), 
  9510 ;;  adc_index       1    2[COMMON] unsigned char 
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;  sensor          1    9[COMMON] PTR struct .
  9513 ;;		 -> mtouch_sensor(18), 
  9514 ;;  addressOffse    1    8[COMMON] unsigned char 
  9515 ;; Return value:  Size  Location     Type
  9516 ;;                  1    wreg      void 
  9517 ;; Registers used:
  9518 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9519 ;; Tracked objects:
  9520 ;;		On entry : 0/0
  9521 ;;		On exit  : 0/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9524 ;;      Params:         1       0       0       0       0       0       0       0
  9525 ;;      Locals:         4       0       0       0       0       0       0       0
  9526 ;;      Temps:          3       0       0       0       0       0       0       0
  9527 ;;      Totals:         8       0       0       0       0       0       0       0
  9528 ;;Total ram usage:        8 bytes
  9529 ;; Hardware stack levels used:    1
  9530 ;; Hardware stack levels required when called:    5
  9531 ;; This function calls:
  9532 ;;		_Sensor_isCalibrated
  9533 ;;		_Sensor_isCalibratingAcqTime
  9534 ;; This function is called by:
  9535 ;;		_Sensor_Acq_ExecutePacket
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           
  9540                           ;psect for function _Sensor_loadADCSettings
  9541  047A                     _Sensor_loadADCSettings:	
  9542                           
  9543                           ;incstack = 0
  9544                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9545                           ;Sensor_loadADCSettings@sensor stored from wreg
  9546  047A  00F9               	movwf	Sensor_loadADCSettings@sensor
  9547                           
  9548                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 429
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 430:     if (sensor == ((void*)0))
  9549  047B  0879               	movf	Sensor_loadADCSettings@sensor,w
  9550  047C  1903               	btfsc	3,2
  9551  047D  0008               	return
  9552                           
  9553                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 433:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  9554  047E  0872               	movf	Sensor_loadADCSettings@adc_index,w
  9555  047F  1D03               	btfss	3,2
  9556  0480  2C84               	goto	l3720
  9557  0481  01F6               	clrf	_Sensor_loadADCSettings$560
  9558  0482  01F7               	clrf	_Sensor_loadADCSettings$560+1
  9559  0483  2C88               	goto	l257
  9560  0484                     l3720:	
  9561  0484  3080               	movlw	128
  9562  0485  00F6               	movwf	_Sensor_loadADCSettings$560
  9563  0486  3000               	movlw	0
  9564  0487  00F7               	movwf	_Sensor_loadADCSettings$560+1
  9565  0488                     l257:	
  9566  0488  0876               	movf	_Sensor_loadADCSettings$560,w
  9567  0489  00F3               	movwf	??_Sensor_loadADCSettings
  9568  048A  0873               	movf	??_Sensor_loadADCSettings,w
  9569  048B  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  9570                           
  9571                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 435:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  9572  048C  0A79               	incf	Sensor_loadADCSettings@sensor,w
  9573  048D  0086               	movwf	6
  9574  048E  0187               	clrf	7
  9575  048F  0801               	movf	1,w
  9576  0490  00F3               	movwf	??_Sensor_loadADCSettings
  9577  0491  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9578  0492  3E11               	addlw	17
  9579  0493  00F4               	movwf	??_Sensor_loadADCSettings+1
  9580  0494  01F5               	clrf	??_Sensor_loadADCSettings+2
  9581  0495  3007               	movlw	7
  9582  0496  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9583  0497  0874               	movf	??_Sensor_loadADCSettings+1,w
  9584  0498  0086               	movwf	6
  9585  0499  0875               	movf	??_Sensor_loadADCSettings+2,w
  9586  049A  0087               	movwf	7
  9587  049B  0873               	movf	??_Sensor_loadADCSettings,w
  9588  049C  0081               	movwf	1
  9589                           
  9590                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 436:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  9591  049D  0879               	movf	Sensor_loadADCSettings@sensor,w
  9592  049E  3E05               	addlw	5
  9593  049F  0086               	movwf	6
  9594  04A0  0187               	clrf	7
  9595  04A1  0801               	movf	1,w
  9596  04A2  00F3               	movwf	??_Sensor_loadADCSettings
  9597  04A3  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9598  04A4  3E19               	addlw	25
  9599  04A5  00F4               	movwf	??_Sensor_loadADCSettings+1
  9600  04A6  01F5               	clrf	??_Sensor_loadADCSettings+2
  9601  04A7  3007               	movlw	7
  9602  04A8  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9603  04A9  0874               	movf	??_Sensor_loadADCSettings+1,w
  9604  04AA  0086               	movwf	6
  9605  04AB  0875               	movf	??_Sensor_loadADCSettings+2,w
  9606  04AC  0087               	movwf	7
  9607  04AD  0873               	movf	??_Sensor_loadADCSettings,w
  9608  04AE  0081               	movwf	1
  9609                           
  9610                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  9611  04AF  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9612  04B0  3E13               	addlw	19
  9613  04B1  00F3               	movwf	??_Sensor_loadADCSettings
  9614  04B2  01F4               	clrf	??_Sensor_loadADCSettings+1
  9615  04B3  3007               	movlw	7
  9616  04B4  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9617  04B5  0873               	movf	??_Sensor_loadADCSettings,w
  9618  04B6  0086               	movwf	6
  9619  04B7  0874               	movf	??_Sensor_loadADCSettings+1,w
  9620  04B8  0087               	movwf	7
  9621  04B9  3050               	movlw	80
  9622  04BA  0081               	movwf	1
  9623                           
  9624                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 438:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  9625  04BB  30FE               	movlw	254
  9626  04BC  00F3               	movwf	??_Sensor_loadADCSettings
  9627  04BD  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9628  04BE  3E18               	addlw	24
  9629  04BF  0086               	movwf	6
  9630  04C0  0187               	clrf	7
  9631  04C1  3007               	movlw	7
  9632  04C2  3D87               	addwfc	7,f
  9633  04C3  0873               	movf	??_Sensor_loadADCSettings,w
  9634  04C4  0581               	andwf	1,f
  9635                           
  9636                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 440:     if (Sensor_isCalibrated(sensor))
  9637  04C5  0879               	movf	Sensor_loadADCSettings@sensor,w
  9638  04C6  3196  264F  3184   	fcall	_Sensor_isCalibrated
  9639  04C9  3A00               	xorlw	0
  9640  04CA  1903               	skipnz
  9641  04CB  2CDF               	goto	l3734
  9642                           
  9643                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 441:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 442:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  9644  04CC  0879               	movf	Sensor_loadADCSettings@sensor,w
  9645  04CD  3E02               	addlw	2
  9646  04CE  0086               	movwf	6
  9647  04CF  0187               	clrf	7
  9648  04D0  0801               	movf	1,w
  9649  04D1  00F3               	movwf	??_Sensor_loadADCSettings
  9650  04D2  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9651  04D3  3E16               	addlw	22
  9652  04D4  00F4               	movwf	??_Sensor_loadADCSettings+1
  9653  04D5  01F5               	clrf	??_Sensor_loadADCSettings+2
  9654  04D6  3007               	movlw	7
  9655  04D7  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9656  04D8  0874               	movf	??_Sensor_loadADCSettings+1,w
  9657  04D9  0086               	movwf	6
  9658  04DA  0875               	movf	??_Sensor_loadADCSettings+2,w
  9659  04DB  0087               	movwf	7
  9660  04DC  0873               	movf	??_Sensor_loadADCSettings,w
  9661  04DD  0081               	movwf	1
  9662  04DE  2CF2               	goto	l3738
  9663  04DF                     l3734:	
  9664                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     }
  9665                           
  9666                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 443:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  9667                           
  9668                           
  9669                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 447:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  9670  04DF  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9671  04E0  3E16               	addlw	22
  9672  04E1  00F3               	movwf	??_Sensor_loadADCSettings
  9673  04E2  01F4               	clrf	??_Sensor_loadADCSettings+1
  9674  04E3  3007               	movlw	7
  9675  04E4  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9676  04E5  0873               	movf	??_Sensor_loadADCSettings,w
  9677  04E6  0086               	movwf	6
  9678  04E7  0874               	movf	??_Sensor_loadADCSettings+1,w
  9679  04E8  0087               	movwf	7
  9680  04E9  3020               	movlw	32
  9681  04EA  0081               	movwf	1
  9682                           
  9683                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 448:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  9684  04EB  0879               	movf	Sensor_loadADCSettings@sensor,w
  9685  04EC  3196  263F  3184   	fcall	_Sensor_isCalibratingAcqTime
  9686  04EF  3A00               	xorlw	0
  9687  04F0  1903               	skipnz
  9688  04F1  2D04               	goto	l3740
  9689  04F2                     l3738:	
  9690                           
  9691                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 449:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  9692  04F2  0879               	movf	Sensor_loadADCSettings@sensor,w
  9693  04F3  3E03               	addlw	3
  9694  04F4  0086               	movwf	6
  9695  04F5  0187               	clrf	7
  9696  04F6  0801               	movf	1,w
  9697  04F7  00F3               	movwf	??_Sensor_loadADCSettings
  9698  04F8  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9699  04F9  3E17               	addlw	23
  9700  04FA  00F4               	movwf	??_Sensor_loadADCSettings+1
  9701  04FB  01F5               	clrf	??_Sensor_loadADCSettings+2
  9702  04FC  3007               	movlw	7
  9703  04FD  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9704  04FE  0874               	movf	??_Sensor_loadADCSettings+1,w
  9705  04FF  0086               	movwf	6
  9706  0500  0875               	movf	??_Sensor_loadADCSettings+2,w
  9707  0501  0087               	movwf	7
  9708  0502  0873               	movf	??_Sensor_loadADCSettings,w
  9709  0503  2D0F               	goto	L7
  9710  0504                     l3740:	
  9711                           
  9712                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 451:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  9713  0504  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9714  0505  3E17               	addlw	23
  9715  0506  00F3               	movwf	??_Sensor_loadADCSettings
  9716  0507  01F4               	clrf	??_Sensor_loadADCSettings+1
  9717  0508  3007               	movlw	7
  9718  0509  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9719  050A  0873               	movf	??_Sensor_loadADCSettings,w
  9720  050B  0086               	movwf	6
  9721  050C  0874               	movf	??_Sensor_loadADCSettings+1,w
  9722  050D  0087               	movwf	7
  9723  050E  3020               	movlw	32
  9724  050F                     L7:	
  9725  050F  0081               	movwf	1
  9726                           
  9727                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 454:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  9728                           
  9729                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:     }
  9730  0510  0879               	movf	Sensor_loadADCSettings@sensor,w
  9731  0511  3E04               	addlw	4
  9732  0512  0086               	movwf	6
  9733  0513  0187               	clrf	7
  9734  0514  0801               	movf	1,w
  9735  0515  00F3               	movwf	??_Sensor_loadADCSettings
  9736  0516  01F4               	clrf	??_Sensor_loadADCSettings+1
  9737  0517  3009               	movlw	9
  9738  0518                     u2275:	
  9739  0518  35F3               	lslf	??_Sensor_loadADCSettings,f
  9740  0519  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  9741  051A  0B89               	decfsz	9,f
  9742  051B  2D18               	goto	u2275
  9743  051C  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  9744  051D  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  9745  051E  0086               	movwf	6
  9746  051F  0187               	clrf	7
  9747  0520  0873               	movf	??_Sensor_loadADCSettings,w
  9748  0521  3FC0               	movwi [0]fsr1
  9749  0522  0874               	movf	??_Sensor_loadADCSettings+1,w
  9750  0523  3FC1               	movwi [1]fsr1
  9751  0524  0008               	return
  9752  0525                     __end_of_Sensor_loadADCSettings:	
  9753                           
  9754                           	psect	text53
  9755  164F                     __ptext53:	
  9756 ;; *************** function _Sensor_isCalibrated *****************
  9757 ;; Defined at:
  9758 ;;		line 911 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9759 ;; Parameters:    Size  Location     Type
  9760 ;;  sensor          1    wreg     PTR struct .
  9761 ;;		 -> mtouch_sensor(18), 
  9762 ;; Auto vars:     Size  Location     Type
  9763 ;;  sensor          1    1[COMMON] PTR struct .
  9764 ;;		 -> mtouch_sensor(18), 
  9765 ;; Return value:  Size  Location     Type
  9766 ;;                  1    wreg      _Bool 
  9767 ;; Registers used:
  9768 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9769 ;; Tracked objects:
  9770 ;;		On entry : 0/0
  9771 ;;		On exit  : 0/0
  9772 ;;		Unchanged: 0/0
  9773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9774 ;;      Params:         0       0       0       0       0       0       0       0
  9775 ;;      Locals:         1       0       0       0       0       0       0       0
  9776 ;;      Temps:          0       0       0       0       0       0       0       0
  9777 ;;      Totals:         1       0       0       0       0       0       0       0
  9778 ;;Total ram usage:        1 bytes
  9779 ;; Hardware stack levels used:    1
  9780 ;; Hardware stack levels required when called:    4
  9781 ;; This function calls:
  9782 ;;		Nothing
  9783 ;; This function is called by:
  9784 ;;		_Sensor_Acquisition
  9785 ;;		_Sensor_loadADCSettings
  9786 ;;		_Sensor_Acq_ExecutePacket
  9787 ;; This function uses a non-reentrant model
  9788 ;;
  9789                           
  9790                           
  9791                           ;psect for function _Sensor_isCalibrated
  9792  164F                     _Sensor_isCalibrated:	
  9793                           
  9794                           ;incstack = 0
  9795                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  9796                           ;Sensor_isCalibrated@sensor stored from wreg
  9797  164F  00F1               	movwf	Sensor_isCalibrated@sensor
  9798                           
  9799                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 911: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          912: {;mcc_generated_files/mtouch/mtouch_sensor.c: 913:     return (_Bool)sensor->calibr
      +                          ated;
  9800  1650  0871               	movf	Sensor_isCalibrated@sensor,w
  9801  1651  3E08               	addlw	8
  9802  1652  0086               	movwf	6
  9803  1653  0187               	clrf	7
  9804  1654  0C01               	rrf	1,w
  9805  1655  0C89               	rrf	9,f
  9806  1656  3901               	andlw	1
  9807  1657  0008               	return
  9808  1658                     __end_of_Sensor_isCalibrated:	
  9809                           
  9810                           	psect	text54
  9811  16D4                     __ptext54:	
  9812 ;; *************** function _Sensor_isEnabled *****************
  9813 ;; Defined at:
  9814 ;;		line 846 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9815 ;; Parameters:    Size  Location     Type
  9816 ;;  sensor          1    wreg     PTR struct .
  9817 ;;		 -> mtouch_sensor(18), 
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;  sensor          1    2[COMMON] PTR struct .
  9820 ;;		 -> mtouch_sensor(18), 
  9821 ;; Return value:  Size  Location     Type
  9822 ;;                  1    wreg      _Bool 
  9823 ;; Registers used:
  9824 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9825 ;; Tracked objects:
  9826 ;;		On entry : 0/0
  9827 ;;		On exit  : 0/0
  9828 ;;		Unchanged: 0/0
  9829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9830 ;;      Params:         0       0       0       0       0       0       0       0
  9831 ;;      Locals:         1       0       0       0       0       0       0       0
  9832 ;;      Temps:          1       0       0       0       0       0       0       0
  9833 ;;      Totals:         2       0       0       0       0       0       0       0
  9834 ;;Total ram usage:        2 bytes
  9835 ;; Hardware stack levels used:    1
  9836 ;; Hardware stack levels required when called:    4
  9837 ;; This function calls:
  9838 ;;		Nothing
  9839 ;; This function is called by:
  9840 ;;		_Sensor_Service
  9841 ;;		_Sensor_postAcquisitionProcess
  9842 ;;		_Sensor_Acq_ExecutePacket
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           
  9847                           ;psect for function _Sensor_isEnabled
  9848  16D4                     _Sensor_isEnabled:	
  9849                           
  9850                           ;incstack = 0
  9851                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  9852                           ;Sensor_isEnabled@sensor stored from wreg
  9853  16D4  00F2               	movwf	Sensor_isEnabled@sensor
  9854                           
  9855                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 846: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 847: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 848:     if(sensor!=((void*)0))
  9856  16D5  0872               	movf	Sensor_isEnabled@sensor,w
  9857  16D6  1903               	btfsc	3,2
  9858  16D7  2EE2               	goto	l3698
  9859                           
  9860                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 849:         return (_Bool)sensor->enabled;
  9861  16D8  0872               	movf	Sensor_isEnabled@sensor,w
  9862  16D9  3E08               	addlw	8
  9863  16DA  0086               	movwf	6
  9864  16DB  0187               	clrf	7
  9865  16DC  0C01               	rrf	1,w
  9866  16DD  00F1               	movwf	??_Sensor_isEnabled
  9867  16DE  0CF1               	rrf	??_Sensor_isEnabled,f
  9868  16DF  0C71               	rrf	??_Sensor_isEnabled,w
  9869  16E0  3901               	andlw	1
  9870  16E1  0008               	return
  9871  16E2                     l3698:	
  9872                           
  9873                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 851:         return 0;
  9874  16E2  3000               	movlw	0
  9875  16E3  0008               	return
  9876  16E4                     __end_of_Sensor_isEnabled:	
  9877                           
  9878                           	psect	text55
  9879  167D                     __ptext55:	
  9880 ;; *************** function _Sensor_isActive *****************
  9881 ;; Defined at:
  9882 ;;		line 873 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9883 ;; Parameters:    Size  Location     Type
  9884 ;;  sensor          1    wreg     PTR struct .
  9885 ;;		 -> mtouch_sensor(18), 
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;  sensor          1    1[COMMON] PTR struct .
  9888 ;;		 -> mtouch_sensor(18), 
  9889 ;; Return value:  Size  Location     Type
  9890 ;;                  1    wreg      _Bool 
  9891 ;; Registers used:
  9892 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9893 ;; Tracked objects:
  9894 ;;		On entry : 0/0
  9895 ;;		On exit  : 0/0
  9896 ;;		Unchanged: 0/0
  9897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9898 ;;      Params:         0       0       0       0       0       0       0       0
  9899 ;;      Locals:         1       0       0       0       0       0       0       0
  9900 ;;      Temps:          0       0       0       0       0       0       0       0
  9901 ;;      Totals:         1       0       0       0       0       0       0       0
  9902 ;;Total ram usage:        1 bytes
  9903 ;; Hardware stack levels used:    1
  9904 ;; Hardware stack levels required when called:    4
  9905 ;; This function calls:
  9906 ;;		Nothing
  9907 ;; This function is called by:
  9908 ;;		_Sensor_Acquisition
  9909 ;;		_Sensor_Acq_ExecutePacket
  9910 ;; This function uses a non-reentrant model
  9911 ;;
  9912                           
  9913                           
  9914                           ;psect for function _Sensor_isActive
  9915  167D                     _Sensor_isActive:	
  9916                           
  9917                           ;incstack = 0
  9918                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  9919                           ;Sensor_isActive@sensor stored from wreg
  9920  167D  00F1               	movwf	Sensor_isActive@sensor
  9921                           
  9922                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 873: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 874:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 875:     if(sensor == ((void*)0))
  9923  167E  0871               	movf	Sensor_isActive@sensor,w
  9924  167F  1D03               	btfss	3,2
  9925  1680  2E83               	goto	l3708
  9926                           
  9927                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 876:         return 0;
  9928  1681  3000               	movlw	0
  9929  1682  0008               	return
  9930  1683                     l3708:	
  9931                           
  9932                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 878:     return (_Bool)sensor->active;
  9933  1683  0871               	movf	Sensor_isActive@sensor,w
  9934  1684  3E08               	addlw	8
  9935  1685  0086               	movwf	6
  9936  1686  0187               	clrf	7
  9937  1687  0C01               	rrf	1,w
  9938  1688  3901               	andlw	1
  9939  1689  0008               	return
  9940  168A                     __end_of_Sensor_isActive:	
  9941                           
  9942                           	psect	text56
  9943  0F76                     __ptext56:	
  9944 ;; *************** function _Sensor_autoCalibration *****************
  9945 ;; Defined at:
  9946 ;;		line 679 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9947 ;; Parameters:    Size  Location     Type
  9948 ;;  sensor          1    wreg     PTR struct .
  9949 ;;		 -> mtouch_sensor(18), 
  9950 ;; Auto vars:     Size  Location     Type
  9951 ;;  sensor          1   10[COMMON] PTR struct .
  9952 ;;		 -> mtouch_sensor(18), 
  9953 ;;  adcIndex        1    9[COMMON] unsigned char 
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  1    wreg      void 
  9956 ;; Registers used:
  9957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9963 ;;      Params:         0       0       0       0       0       0       0       0
  9964 ;;      Locals:         2       0       0       0       0       0       0       0
  9965 ;;      Temps:          4       0       0       0       0       0       0       0
  9966 ;;      Totals:         6       0       0       0       0       0       0       0
  9967 ;;Total ram usage:        6 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    5
  9970 ;; This function calls:
  9971 ;;		_Sensor_getScanGroupIndex
  9972 ;;		_Sensor_isCalibratingAcqTime
  9973 ;;		_Sensor_setCalibratAcqTime
  9974 ;;		_Sensor_setCalibrated
  9975 ;;		_abs
  9976 ;; This function is called by:
  9977 ;;		_Sensor_Acq_ExecutePacket
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           
  9982                           ;psect for function _Sensor_autoCalibration
  9983  0F76                     _Sensor_autoCalibration:	
  9984                           
  9985                           ;incstack = 0
  9986                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9987                           ;Sensor_autoCalibration@sensor stored from wreg
  9988  0F76  00FA               	movwf	Sensor_autoCalibration@sensor
  9989                           
  9990                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 679: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 680: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 681:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  9991  0F77  087A               	movf	Sensor_autoCalibration@sensor,w
  9992  0F78  318A  2265  318F   	fcall	_Sensor_getScanGroupIndex
  9993  0F7B  00F5               	movwf	??_Sensor_autoCalibration
  9994  0F7C  0875               	movf	??_Sensor_autoCalibration,w
  9995  0F7D  00F9               	movwf	Sensor_autoCalibration@adcIndex
  9996                           
  9997                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 683:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  9998  0F7E  087A               	movf	Sensor_autoCalibration@sensor,w
  9999  0F7F  3196  263F  318F   	fcall	_Sensor_isCalibratingAcqTime
 10000  0F82  3A00               	xorlw	0
 10001  0F83  1D03               	skipz
 10002  0F84  2FB5               	goto	l3760
 10003                           
 10004                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 684:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 685:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
 10005  0F85  3579               	lslf	Sensor_autoCalibration@adcIndex,w
 10006  0F86  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
 10007  0F87  0086               	movwf	6
 10008  0F88  0187               	clrf	7
 10009  0F89  3F40               	moviw [0]fsr1
 10010  0F8A  00F5               	movwf	??_Sensor_autoCalibration
 10011  0F8B  3F41               	moviw [1]fsr1
 10012  0F8C  00F6               	movwf	??_Sensor_autoCalibration+1
 10013  0F8D  087A               	movf	Sensor_autoCalibration@sensor,w
 10014  0F8E  3E04               	addlw	4
 10015  0F8F  0086               	movwf	6
 10016  0F90  0187               	clrf	7
 10017  0F91  0801               	movf	1,w
 10018  0F92  00F7               	movwf	??_Sensor_autoCalibration+2
 10019  0F93  01F8               	clrf	??_Sensor_autoCalibration+3
 10020  0F94  3009               	movlw	9
 10021  0F95                     u2295:	
 10022  0F95  35F7               	lslf	??_Sensor_autoCalibration+2,f
 10023  0F96  0DF8               	rlf	??_Sensor_autoCalibration+3,f
 10024  0F97  0B89               	decfsz	9,f
 10025  0F98  2F95               	goto	u2295
 10026  0F99  0876               	movf	??_Sensor_autoCalibration+1,w
 10027  0F9A  0278               	subwf	??_Sensor_autoCalibration+3,w
 10028  0F9B  1D03               	skipz
 10029  0F9C  2F9F               	goto	u2305
 10030  0F9D  0875               	movf	??_Sensor_autoCalibration,w
 10031  0F9E  0277               	subwf	??_Sensor_autoCalibration+2,w
 10032  0F9F                     u2305:	
 10033  0F9F  1803               	skipnc
 10034  0FA0  2FB1               	goto	l3758
 10035                           
 10036                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 686:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 687:             if(++(sensor->addcap) >= (uint8_t)0x0F)
 10037  0FA1  3001               	movlw	1
 10038  0FA2  00F5               	movwf	??_Sensor_autoCalibration
 10039  0FA3  087A               	movf	Sensor_autoCalibration@sensor,w
 10040  0FA4  3E05               	addlw	5
 10041  0FA5  0086               	movwf	6
 10042  0FA6  0187               	clrf	7
 10043  0FA7  0875               	movf	??_Sensor_autoCalibration,w
 10044  0FA8  0781               	addwf	1,f
 10045  0FA9  300F               	movlw	15
 10046  0FAA  0201               	subwf	1,w
 10047  0FAB  1C03               	skipc
 10048  0FAC  0008               	return
 10049                           
 10050                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
 10051  0FAD  087A               	movf	Sensor_autoCalibration@sensor,w
 10052  0FAE  3196  2670         	fcall	_Sensor_setCalibratAcqTime
 10053  0FB0  0008               	return
 10054  0FB1                     l3758:	
 10055                           
 10056                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 691:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 692:              Sensor_setCalibratAcqTime(sensor);
 10057  0FB1  087A               	movf	Sensor_autoCalibration@sensor,w
 10058  0FB2  3196  2670         	fcall	_Sensor_setCalibratAcqTime
 10059  0FB4  0008               	return
 10060  0FB5                     l3760:	
 10061                           
 10062                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 696:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 697:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 10063  0FB5  087A               	movf	Sensor_autoCalibration@sensor,w
 10064  0FB6  3E04               	addlw	4
 10065  0FB7  0086               	movwf	6
 10066  0FB8  0187               	clrf	7
 10067  0FB9  0801               	movf	1,w
 10068  0FBA  00F5               	movwf	??_Sensor_autoCalibration
 10069  0FBB  01F6               	clrf	??_Sensor_autoCalibration+1
 10070  0FBC  35F5               	lslf	??_Sensor_autoCalibration,f
 10071  0FBD  0DF6               	rlf	??_Sensor_autoCalibration+1,f
 10072  0FBE  087A               	movf	Sensor_autoCalibration@sensor,w
 10073  0FBF  3E06               	addlw	6
 10074  0FC0  0086               	movwf	6
 10075  0FC1  0187               	clrf	7
 10076  0FC2  3579               	lslf	Sensor_autoCalibration@adcIndex,w
 10077  0FC3  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
 10078  0FC4  0084               	movwf	4
 10079  0FC5  0185               	clrf	5
 10080  0FC6  3F40               	moviw [0]fsr1
 10081  0FC7  0200               	subwf	0,w
 10082  0FC8  00F1               	movwf	abs@a
 10083  0FC9  3101               	addfsr 0,1
 10084  0FCA  3F41               	moviw [1]fsr1
 10085  0FCB  3B00               	subwfb	0,w
 10086  0FCC  00F2               	movwf	abs@a+1
 10087  0FCD  3197  27D0  318F   	fcall	_abs
 10088  0FD0  0876               	movf	??_Sensor_autoCalibration+1,w
 10089  0FD1  0272               	subwf	?_abs+1,w
 10090  0FD2  1D03               	skipz
 10091  0FD3  2FD6               	goto	u2325
 10092  0FD4  0875               	movf	??_Sensor_autoCalibration,w
 10093  0FD5  0271               	subwf	?_abs,w
 10094  0FD6                     u2325:	
 10095  0FD6  1803               	skipnc
 10096  0FD7  2FE4               	goto	l3766
 10097                           
 10098                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 698:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 699:             sensor->precharge_time = (mtouch_sensor_time_t)32;
 10099  0FD8  3020               	movlw	32
 10100  0FD9  00F5               	movwf	??_Sensor_autoCalibration
 10101  0FDA  087A               	movf	Sensor_autoCalibration@sensor,w
 10102  0FDB  3E02               	addlw	2
 10103  0FDC  0086               	movwf	6
 10104  0FDD  0187               	clrf	7
 10105  0FDE  0875               	movf	??_Sensor_autoCalibration,w
 10106  0FDF  0081               	movwf	1
 10107                           
 10108                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:             Sensor_setCalibrated(senso
      +                          r);
 10109  0FE0  087A               	movf	Sensor_autoCalibration@sensor,w
 10110  0FE1  3196  2658         	fcall	_Sensor_setCalibrated
 10111                           
 10112                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 701:         }
 10113  0FE3  0008               	return
 10114  0FE4                     l3766:	
 10115                           
 10116                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 703:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 707:             sensor->acquisition_time += (uint8_t)2;
 10117  0FE4  3002               	movlw	2
 10118  0FE5  00F5               	movwf	??_Sensor_autoCalibration
 10119  0FE6  087A               	movf	Sensor_autoCalibration@sensor,w
 10120  0FE7  3E03               	addlw	3
 10121  0FE8  0086               	movwf	6
 10122  0FE9  0187               	clrf	7
 10123  0FEA  0875               	movf	??_Sensor_autoCalibration,w
 10124  0FEB  0781               	addwf	1,f
 10125                           
 10126                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 708:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
 10127  0FEC  087A               	movf	Sensor_autoCalibration@sensor,w
 10128  0FED  3E03               	addlw	3
 10129  0FEE  0086               	movwf	6
 10130  0FEF  0187               	clrf	7
 10131  0FF0  3020               	movlw	32
 10132  0FF1  0201               	subwf	1,w
 10133  0FF2  1C03               	skipc
 10134  0FF3  0008               	return
 10135                           
 10136                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 709:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 710:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
 10137  0FF4  3020               	movlw	32
 10138  0FF5  00F5               	movwf	??_Sensor_autoCalibration
 10139  0FF6  087A               	movf	Sensor_autoCalibration@sensor,w
 10140  0FF7  3E02               	addlw	2
 10141  0FF8  0086               	movwf	6
 10142  0FF9  0187               	clrf	7
 10143  0FFA  0875               	movf	??_Sensor_autoCalibration,w
 10144  0FFB  0081               	movwf	1
 10145                           
 10146                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 711:                 Sensor_setCalibrated(s
      +                          ensor);
 10147  0FFC  087A               	movf	Sensor_autoCalibration@sensor,w
 10148  0FFD  3196  2658         	fcall	_Sensor_setCalibrated
 10149  0FFF  0008               	return
 10150  1000                     __end_of_Sensor_autoCalibration:	
 10151                           
 10152                           	psect	text57
 10153  17D0                     __ptext57:	
 10154 ;; *************** function _abs *****************
 10155 ;; Defined at:
 10156 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 10157 ;; Parameters:    Size  Location     Type
 10158 ;;  a               2    1[COMMON] int 
 10159 ;; Auto vars:     Size  Location     Type
 10160 ;;		None
 10161 ;; Return value:  Size  Location     Type
 10162 ;;                  2    1[COMMON] int 
 10163 ;; Registers used:
 10164 ;;		wreg, status,2, status,0
 10165 ;; Tracked objects:
 10166 ;;		On entry : 0/0
 10167 ;;		On exit  : 0/0
 10168 ;;		Unchanged: 0/0
 10169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10170 ;;      Params:         2       0       0       0       0       0       0       0
 10171 ;;      Locals:         0       0       0       0       0       0       0       0
 10172 ;;      Temps:          2       0       0       0       0       0       0       0
 10173 ;;      Totals:         4       0       0       0       0       0       0       0
 10174 ;;Total ram usage:        4 bytes
 10175 ;; Hardware stack levels used:    1
 10176 ;; Hardware stack levels required when called:    4
 10177 ;; This function calls:
 10178 ;;		Nothing
 10179 ;; This function is called by:
 10180 ;;		_Sensor_postAcquisitionProcess
 10181 ;;		_Sensor_Acq_ExecutePacket
 10182 ;;		_Sensor_autoCalibration
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           
 10186                           
 10187                           ;psect for function _abs
 10188  17D0                     _abs:	
 10189                           
 10190                           ;incstack = 0
 10191                           ; Regs used in _abs: [wreg+status,2+status,0]
 10192  17D0  0872               	movf	abs@a+1,w
 10193  17D1  3A80               	xorlw	128
 10194  17D2  00F3               	movwf	??_abs
 10195  17D3  3080               	movlw	128
 10196  17D4  0273               	subwf	??_abs,w
 10197  17D5  1D03               	skipz
 10198  17D6  2FD9               	goto	u2165
 10199  17D7  3001               	movlw	1
 10200  17D8  0271               	subwf	abs@a,w
 10201  17D9                     u2165:	
 10202  17D9  1803               	skipnc
 10203  17DA  0008               	return
 10204  17DB  0971               	comf	abs@a,w
 10205  17DC  00F3               	movwf	??_abs
 10206  17DD  0972               	comf	abs@a+1,w
 10207  17DE  00F4               	movwf	??_abs+1
 10208  17DF  0AF3               	incf	??_abs,f
 10209  17E0  1903               	skipnz
 10210  17E1  0AF4               	incf	??_abs+1,f
 10211  17E2  0873               	movf	??_abs,w
 10212  17E3  00F1               	movwf	?_abs
 10213  17E4  0874               	movf	??_abs+1,w
 10214  17E5  00F2               	movwf	?_abs+1
 10215  17E6  0008               	return
 10216  17E7                     __end_of_abs:	
 10217                           
 10218                           	psect	text58
 10219  1658                     __ptext58:	
 10220 ;; *************** function _Sensor_setCalibrated *****************
 10221 ;; Defined at:
 10222 ;;		line 916 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10223 ;; Parameters:    Size  Location     Type
 10224 ;;  sensor          1    wreg     PTR struct .
 10225 ;;		 -> mtouch_sensor(18), 
 10226 ;; Auto vars:     Size  Location     Type
 10227 ;;  sensor          1    1[COMMON] PTR struct .
 10228 ;;		 -> mtouch_sensor(18), 
 10229 ;; Return value:  Size  Location     Type
 10230 ;;                  1    wreg      void 
 10231 ;; Registers used:
 10232 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10233 ;; Tracked objects:
 10234 ;;		On entry : 0/0
 10235 ;;		On exit  : 0/0
 10236 ;;		Unchanged: 0/0
 10237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10238 ;;      Params:         0       0       0       0       0       0       0       0
 10239 ;;      Locals:         1       0       0       0       0       0       0       0
 10240 ;;      Temps:          0       0       0       0       0       0       0       0
 10241 ;;      Totals:         1       0       0       0       0       0       0       0
 10242 ;;Total ram usage:        1 bytes
 10243 ;; Hardware stack levels used:    1
 10244 ;; Hardware stack levels required when called:    4
 10245 ;; This function calls:
 10246 ;;		Nothing
 10247 ;; This function is called by:
 10248 ;;		_Sensor_autoCalibration
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           
 10253                           ;psect for function _Sensor_setCalibrated
 10254  1658                     _Sensor_setCalibrated:	
 10255                           
 10256                           ;incstack = 0
 10257                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 10258                           ;Sensor_setCalibrated@sensor stored from wreg
 10259  1658  00F1               	movwf	Sensor_setCalibrated@sensor
 10260                           
 10261                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 916: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          917: {;mcc_generated_files/mtouch/mtouch_sensor.c: 918:     sensor->calibrated = 1;
 10262  1659  0871               	movf	Sensor_setCalibrated@sensor,w
 10263  165A  3E08               	addlw	8
 10264  165B  0086               	movwf	6
 10265  165C  0187               	clrf	7
 10266  165D  1501               	bsf	1,2
 10267                           
 10268                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 919:     sensor->acqTime_cal = 0;
 10269  165E  0871               	movf	Sensor_setCalibrated@sensor,w
 10270  165F  3E08               	addlw	8
 10271  1660  0086               	movwf	6
 10272  1661  0187               	clrf	7
 10273  1662  1201               	bcf	1,4
 10274  1663  0008               	return
 10275  1664                     __end_of_Sensor_setCalibrated:	
 10276                           
 10277                           	psect	text59
 10278  1670                     __ptext59:	
 10279 ;; *************** function _Sensor_setCalibratAcqTime *****************
 10280 ;; Defined at:
 10281 ;;		line 922 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10282 ;; Parameters:    Size  Location     Type
 10283 ;;  sensor          1    wreg     PTR struct .
 10284 ;;		 -> mtouch_sensor(18), 
 10285 ;; Auto vars:     Size  Location     Type
 10286 ;;  sensor          1    1[COMMON] PTR struct .
 10287 ;;		 -> mtouch_sensor(18), 
 10288 ;; Return value:  Size  Location     Type
 10289 ;;                  1    wreg      void 
 10290 ;; Registers used:
 10291 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10292 ;; Tracked objects:
 10293 ;;		On entry : 0/0
 10294 ;;		On exit  : 0/0
 10295 ;;		Unchanged: 0/0
 10296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10297 ;;      Params:         0       0       0       0       0       0       0       0
 10298 ;;      Locals:         1       0       0       0       0       0       0       0
 10299 ;;      Temps:          0       0       0       0       0       0       0       0
 10300 ;;      Totals:         1       0       0       0       0       0       0       0
 10301 ;;Total ram usage:        1 bytes
 10302 ;; Hardware stack levels used:    1
 10303 ;; Hardware stack levels required when called:    4
 10304 ;; This function calls:
 10305 ;;		Nothing
 10306 ;; This function is called by:
 10307 ;;		_Sensor_autoCalibration
 10308 ;; This function uses a non-reentrant model
 10309 ;;
 10310                           
 10311                           
 10312                           ;psect for function _Sensor_setCalibratAcqTime
 10313  1670                     _Sensor_setCalibratAcqTime:	
 10314                           
 10315                           ;incstack = 0
 10316                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10317                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 10318  1670  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
 10319                           
 10320                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 922: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 923: {;mcc_generated_files/mtouch/mtouch_sensor.c: 924:     sensor->acqTime_cal = 1
      +                          ;
 10321  1671  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 10322  1672  3E08               	addlw	8
 10323  1673  0086               	movwf	6
 10324  1674  0187               	clrf	7
 10325  1675  1601               	bsf	1,4
 10326                           
 10327                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
 10328  1676  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 10329  1677  3E03               	addlw	3
 10330  1678  0086               	movwf	6
 10331  1679  0187               	clrf	7
 10332  167A  0181               	clrf	1
 10333  167B  0A81               	incf	1,f
 10334  167C  0008               	return
 10335  167D                     __end_of_Sensor_setCalibratAcqTime:	
 10336                           
 10337                           	psect	text60
 10338  163F                     __ptext60:	
 10339 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 10340 ;; Defined at:
 10341 ;;		line 928 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10342 ;; Parameters:    Size  Location     Type
 10343 ;;  sensor          1    wreg     PTR struct .
 10344 ;;		 -> mtouch_sensor(18), 
 10345 ;; Auto vars:     Size  Location     Type
 10346 ;;  sensor          1    1[COMMON] PTR struct .
 10347 ;;		 -> mtouch_sensor(18), 
 10348 ;; Return value:  Size  Location     Type
 10349 ;;                  1    wreg      _Bool 
 10350 ;; Registers used:
 10351 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10352 ;; Tracked objects:
 10353 ;;		On entry : 0/0
 10354 ;;		On exit  : 0/0
 10355 ;;		Unchanged: 0/0
 10356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10357 ;;      Params:         0       0       0       0       0       0       0       0
 10358 ;;      Locals:         1       0       0       0       0       0       0       0
 10359 ;;      Temps:          0       0       0       0       0       0       0       0
 10360 ;;      Totals:         1       0       0       0       0       0       0       0
 10361 ;;Total ram usage:        1 bytes
 10362 ;; Hardware stack levels used:    1
 10363 ;; Hardware stack levels required when called:    4
 10364 ;; This function calls:
 10365 ;;		Nothing
 10366 ;; This function is called by:
 10367 ;;		_Sensor_loadADCSettings
 10368 ;;		_Sensor_autoCalibration
 10369 ;; This function uses a non-reentrant model
 10370 ;;
 10371                           
 10372                           
 10373                           ;psect for function _Sensor_isCalibratingAcqTime
 10374  163F                     _Sensor_isCalibratingAcqTime:	
 10375                           
 10376                           ;incstack = 0
 10377                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10378                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 10379  163F  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
 10380                           
 10381                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 929: {;mcc_generated_files/mtouch/mtouch_sensor.c: 930:     return (_Bool)sensor
      +                          ->acqTime_cal;
 10382  1640  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
 10383  1641  3E08               	addlw	8
 10384  1642  0086               	movwf	6
 10385  1643  0187               	clrf	7
 10386  1644  0E01               	swapf	1,w
 10387  1645  3901               	andlw	1
 10388  1646  0008               	return
 10389  1647                     __end_of_Sensor_isCalibratingAcqTime:	
 10390                           
 10391                           	psect	text61
 10392  0A65                     __ptext61:	
 10393 ;; *************** function _Sensor_getScanGroupIndex *****************
 10394 ;; Defined at:
 10395 ;;		line 345 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10396 ;; Parameters:    Size  Location     Type
 10397 ;;  sensor          1    wreg     PTR struct .
 10398 ;;		 -> mtouch_sensor(18), 
 10399 ;; Auto vars:     Size  Location     Type
 10400 ;;  sensor          1    3[COMMON] PTR struct .
 10401 ;;		 -> mtouch_sensor(18), 
 10402 ;;  sensorGroup     1    4[COMMON] unsigned char 
 10403 ;; Return value:  Size  Location     Type
 10404 ;;                  1    wreg      unsigned char 
 10405 ;; Registers used:
 10406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10407 ;; Tracked objects:
 10408 ;;		On entry : 0/0
 10409 ;;		On exit  : 0/0
 10410 ;;		Unchanged: 0/0
 10411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10412 ;;      Params:         0       0       0       0       0       0       0       0
 10413 ;;      Locals:         2       0       0       0       0       0       0       0
 10414 ;;      Temps:          2       0       0       0       0       0       0       0
 10415 ;;      Totals:         4       0       0       0       0       0       0       0
 10416 ;;Total ram usage:        4 bytes
 10417 ;; Hardware stack levels used:    1
 10418 ;; Hardware stack levels required when called:    4
 10419 ;; This function calls:
 10420 ;;		Nothing
 10421 ;; This function is called by:
 10422 ;;		_Sensor_postAcquisitionProcess
 10423 ;;		_Sensor_autoCalibration
 10424 ;;		_Sensor_RawSample_Update
 10425 ;; This function uses a non-reentrant model
 10426 ;;
 10427                           
 10428                           
 10429                           ;psect for function _Sensor_getScanGroupIndex
 10430  0A65                     _Sensor_getScanGroupIndex:	
 10431                           
 10432                           ;incstack = 0
 10433                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
 10434                           ;Sensor_getScanGroupIndex@sensor stored from wreg
 10435  0A65  00F3               	movwf	Sensor_getScanGroupIndex@sensor
 10436                           
 10437                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 345: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 346: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 347:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 348:     for(sensorGroup = 0; sensorGroup < 1u; sensorGroup++)
 10438  0A66  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
 10439  0A67                     l3630:	
 10440                           
 10441                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 349:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 350:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
 10442  0A67  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10443  0A68  00F1               	movwf	??_Sensor_getScanGroupIndex
 10444  0A69  01F2               	clrf	??_Sensor_getScanGroupIndex+1
 10445  0A6A  35F1               	lslf	??_Sensor_getScanGroupIndex,f
 10446  0A6B  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
 10447  0A6C  302B               	movlw	low (_sensor_scan_group| (0+32768))
 10448  0A6D  0771               	addwf	??_Sensor_getScanGroupIndex,w
 10449  0A6E  0084               	movwf	4
 10450  0A6F  3098               	movlw	high (_sensor_scan_group| (0+32768))
 10451  0A70  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
 10452  0A71  0085               	movwf	5
 10453  0A72  0800               	movf	0,w	;code access
 10454  0A73  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
 10455  0A74  1D03               	skipz
 10456  0A75  2A78               	goto	l3636
 10457  0A76                     l3632:	
 10458                           
 10459                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:             return 0;
 10460  0A76  3000               	movlw	0
 10461  0A77  0008               	return
 10462  0A78                     l3636:	
 10463                           
 10464                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 352:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
 10465  0A78  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10466  0A79  00F1               	movwf	??_Sensor_getScanGroupIndex
 10467  0A7A  01F2               	clrf	??_Sensor_getScanGroupIndex+1
 10468  0A7B  35F1               	lslf	??_Sensor_getScanGroupIndex,f
 10469  0A7C  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
 10470  0A7D  302C               	movlw	low ((_sensor_scan_group+1)| (0+32768))
 10471  0A7E  0771               	addwf	??_Sensor_getScanGroupIndex,w
 10472  0A7F  0084               	movwf	4
 10473  0A80  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
 10474  0A81  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
 10475  0A82  0085               	movwf	5
 10476  0A83  0800               	movf	0,w	;code access
 10477  0A84  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
 10478  0A85  1D03               	skipz
 10479  0A86  2A89               	goto	l3642
 10480                           
 10481                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 353:             return 1;
 10482  0A87  3001               	movlw	1
 10483  0A88  0008               	return
 10484  0A89                     l3642:	
 10485                           
 10486                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 354:     }
 10487  0A89  3001               	movlw	1
 10488  0A8A  00F1               	movwf	??_Sensor_getScanGroupIndex
 10489  0A8B  0871               	movf	??_Sensor_getScanGroupIndex,w
 10490  0A8C  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
 10491  0A8D  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10492  0A8E  1D03               	btfss	3,2
 10493  0A8F  2A76               	goto	l3632
 10494  0A90  2A67               	goto	l3630
 10495  0A91                     __end_of_Sensor_getScanGroupIndex:	
 10496                           
 10497                           	psect	text62
 10498  16C4                     __ptext62:	
 10499 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 10500 ;; Defined at:
 10501 ;;		line 230 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;		None
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;		None
 10506 ;; Return value:  Size  Location     Type
 10507 ;;                  1    wreg      void 
 10508 ;; Registers used:
 10509 ;;		wreg, status,2, status,0
 10510 ;; Tracked objects:
 10511 ;;		On entry : 0/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10515 ;;      Params:         0       0       0       0       0       0       0       0
 10516 ;;      Locals:         0       0       0       0       0       0       0       0
 10517 ;;      Temps:          0       0       0       0       0       0       0       0
 10518 ;;      Totals:         0       0       0       0       0       0       0       0
 10519 ;;Total ram usage:        0 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    4
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_MTOUCH_Initialize
 10526 ;;		_Sensor_Acq_ExecutePacket
 10527 ;; This function uses a non-reentrant model
 10528 ;;
 10529                           
 10530                           
 10531                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 10532  16C4                     _MTOUCH_Sensor_Scan_Initialize:	
 10533                           
 10534                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 232:     T2CONbits.T2CKPS = 0x0;
 10535                           
 10536                           ;incstack = 0
 10537                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 10538  16C4  30FC               	movlw	-4
 10539  16C5  0020               	movlb	0	; select bank0
 10540  16C6  059C               	andwf	28,f	;volatile
 10541                           
 10542                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 234:     AD1CON0 = (uint8_t)0;
 10543  16C7  002E               	movlb	14	; select bank14
 10544  16C8  0191               	clrf	17	;volatile
 10545                           
 10546                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 235:     AD2CON0 = (uint8_t)0;
 10547  16C9  002F               	movlb	15	; select bank15
 10548  16CA  0191               	clrf	17	;volatile
 10549                           
 10550                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 236:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
 10551  16CB  3090               	movlw	144
 10552  16CC  002E               	movlb	14	; select bank14
 10553  16CD  0092               	movwf	18	;volatile
 10554                           
 10555                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 237:     AD1CON3 = (uint8_t)0b01000000;
 10556  16CE  3040               	movlw	64
 10557  16CF  0094               	movwf	20	;volatile
 10558                           
 10559                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 238:     AD2CON3 = (uint8_t)0b01000000;
 10560  16D0  3040               	movlw	64
 10561  16D1  002F               	movlb	15	; select bank15
 10562  16D2  0094               	movwf	20	;volatile
 10563  16D3  0008               	return
 10564  16D4                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 10565                           
 10566                           	psect	text63
 10567  16B4                     __ptext63:	
 10568 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 10569 ;; Defined at:
 10570 ;;		line 181 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10571 ;; Parameters:    Size  Location     Type
 10572 ;;		None
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;  button          1   14[BANK0 ] enum E3068
 10575 ;; Return value:  Size  Location     Type
 10576 ;;                  1    wreg      void 
 10577 ;; Registers used:
 10578 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10584 ;;      Params:         0       0       0       0       0       0       0       0
 10585 ;;      Locals:         0       1       0       0       0       0       0       0
 10586 ;;      Temps:          0       1       0       0       0       0       0       0
 10587 ;;      Totals:         0       2       0       0       0       0       0       0
 10588 ;;Total ram usage:        2 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    9
 10591 ;; This function calls:
 10592 ;;		_Button_Service
 10593 ;; This function is called by:
 10594 ;;		_MTOUCH_Service_Mainloop
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           
 10599                           ;psect for function _MTOUCH_Button_ServiceAll
 10600  16B4                     _MTOUCH_Button_ServiceAll:	
 10601                           
 10602                           ;mcc_generated_files/mtouch/mtouch_button.c: 183:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 186:     for (button = 0; button < 2u; button
      +                          ++)
 10603                           
 10604                           ;incstack = 0
 10605                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10606  16B4  0020               	movlb	0	; select bank0
 10607  16B5  01AE               	clrf	MTOUCH_Button_ServiceAll@button
 10608  16B6                     l6044:	
 10609                           
 10610                           ;mcc_generated_files/mtouch/mtouch_button.c: 187:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 188:         Button_Service(button);
 10611  16B6  082E               	movf	MTOUCH_Button_ServiceAll@button,w
 10612  16B7  318D  2503  3196   	fcall	_Button_Service
 10613                           
 10614                           ;mcc_generated_files/mtouch/mtouch_button.c: 189:     }
 10615  16BA  3001               	movlw	1
 10616  16BB  0020               	movlb	0	; select bank0
 10617  16BC  00AD               	movwf	??_MTOUCH_Button_ServiceAll
 10618  16BD  082D               	movf	??_MTOUCH_Button_ServiceAll,w
 10619  16BE  07AE               	addwf	MTOUCH_Button_ServiceAll@button,f
 10620  16BF  3002               	movlw	2
 10621  16C0  022E               	subwf	MTOUCH_Button_ServiceAll@button,w
 10622  16C1  1803               	btfsc	3,0
 10623  16C2  0008               	return
 10624  16C3  2EB6               	goto	l6044
 10625  16C4                     __end_of_MTOUCH_Button_ServiceAll:	
 10626                           
 10627                           	psect	text64
 10628  0D03                     __ptext64:	
 10629 ;; *************** function _Button_Service *****************
 10630 ;; Defined at:
 10631 ;;		line 192 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10632 ;; Parameters:    Size  Location     Type
 10633 ;;  name            1    wreg     enum E3068
 10634 ;; Auto vars:     Size  Location     Type
 10635 ;;  name            1   11[BANK0 ] enum E3068
 10636 ;;  button          1   12[BANK0 ] PTR struct .
 10637 ;;		 -> mtouch_button(32), 
 10638 ;; Return value:  Size  Location     Type
 10639 ;;                  1    wreg      void 
 10640 ;; Registers used:
 10641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10642 ;; Tracked objects:
 10643 ;;		On entry : 0/0
 10644 ;;		On exit  : 0/0
 10645 ;;		Unchanged: 0/0
 10646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10647 ;;      Params:         0       0       0       0       0       0       0       0
 10648 ;;      Locals:         0       2       0       0       0       0       0       0
 10649 ;;      Temps:          0       2       0       0       0       0       0       0
 10650 ;;      Totals:         0       4       0       0       0       0       0       0
 10651 ;;Total ram usage:        4 bytes
 10652 ;; Hardware stack levels used:    1
 10653 ;; Hardware stack levels required when called:    8
 10654 ;; This function calls:
 10655 ;;		_Button_Deviation_Update
 10656 ;;		_Button_Reading_Update
 10657 ;;		_Button_State_Initializing
 10658 ;;		_Button_State_NotPressed
 10659 ;;		_Button_State_Pressed
 10660 ;;		_MTOUCH_Button_Initialize
 10661 ;;		_MTOUCH_Sensor_isCalibrated
 10662 ;;		_MTOUCH_Sensor_wasSampled
 10663 ;; This function is called by:
 10664 ;;		_MTOUCH_Button_ServiceAll
 10665 ;; This function uses a non-reentrant model
 10666 ;;
 10667                           
 10668                           
 10669                           ;psect for function _Button_Service
 10670  0D03                     _Button_Service:	
 10671                           
 10672                           ;incstack = 0
 10673                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10674                           ;Button_Service@name stored from wreg
 10675  0D03  0020               	movlb	0	; select bank0
 10676  0D04  00AB               	movwf	Button_Service@name
 10677                           
 10678                           ;mcc_generated_files/mtouch/mtouch_button.c: 192: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 193: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 194:     mtouch_button_t* button = &mtouch_button[name];
 10679  0D05  082B               	movf	Button_Service@name,w
 10680  0D06  00A9               	movwf	??_Button_Service
 10681  0D07  3003               	movlw	3
 10682  0D08                     u5035:	
 10683  0D08  35A9               	lslf	??_Button_Service,f
 10684  0D09  3EFF               	addlw	-1
 10685  0D0A  1D03               	skipz
 10686  0D0B  2D08               	goto	u5035
 10687  0D0C  3529               	lslf	??_Button_Service,w
 10688  0D0D  3E40               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 10689  0D0E  00AA               	movwf	??_Button_Service+1
 10690  0D0F  082A               	movf	??_Button_Service+1,w
 10691  0D10  00AC               	movwf	Button_Service@button
 10692                           
 10693                           ;mcc_generated_files/mtouch/mtouch_button.c: 196:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
 10694  0D11  0A2C               	incf	Button_Service@button,w
 10695  0D12  0086               	movwf	6
 10696  0D13  3001               	movlw	1	; select bank2/3
 10697  0D14  0087               	movwf	7
 10698  0D15  0801               	movf	1,w
 10699  0D16  3196  2698  318D   	fcall	_MTOUCH_Sensor_wasSampled
 10700  0D19  3A00               	xorlw	0
 10701  0D1A  1903               	skipnz
 10702  0D1B  0008               	return
 10703  0D1C  0020               	movlb	0	; select bank0
 10704  0D1D  0A2C               	incf	Button_Service@button,w
 10705  0D1E  0086               	movwf	6
 10706  0D1F  3001               	movlw	1	; select bank2/3
 10707  0D20  0087               	movwf	7
 10708  0D21  0801               	movf	1,w
 10709  0D22  3197  274D  318D   	fcall	_MTOUCH_Sensor_isCalibrated
 10710  0D25  3A00               	xorlw	0
 10711  0D26  1903               	skipnz
 10712  0D27  0008               	return
 10713                           
 10714                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 198:         Button_Reading_Update(button);
 10715  0D28  0020               	movlb	0	; select bank0
 10716  0D29  082C               	movf	Button_Service@button,w
 10717  0D2A  3196  268A  318D   	fcall	_Button_Reading_Update
 10718                           
 10719                           ;mcc_generated_files/mtouch/mtouch_button.c: 199:         Button_Deviation_Update(button
      +                          );
 10720  0D2D  0020               	movlb	0	; select bank0
 10721  0D2E  082C               	movf	Button_Service@button,w
 10722  0D2F  318E  26EF  318D   	fcall	_Button_Deviation_Update
 10723                           
 10724                           ;mcc_generated_files/mtouch/mtouch_button.c: 201:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
 10725  0D32  0020               	movlb	0	; select bank0
 10726  0D33  082C               	movf	Button_Service@button,w
 10727  0D34  3E02               	addlw	2
 10728  0D35  0086               	movwf	6
 10729  0D36  3001               	movlw	1	; select bank2/3
 10730  0D37  0087               	movwf	7
 10731  0D38  3003               	movlw	3
 10732  0D39  0201               	subwf	1,w
 10733  0D3A  1C03               	skipc
 10734  0D3B  2D44               	goto	l5998
 10735                           
 10736                           ;mcc_generated_files/mtouch/mtouch_button.c: 202:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 203:             MTOUCH_Button_Initialize(button->name);
 10737  0D3C  082C               	movf	Button_Service@button,w
 10738  0D3D  0086               	movwf	6
 10739  0D3E  3001               	movlw	1	; select bank2/3
 10740  0D3F  0087               	movwf	7
 10741  0D40  0801               	movf	1,w
 10742  0D41  318B  23B8  318D   	fcall	_MTOUCH_Button_Initialize
 10743  0D44                     l5998:	
 10744                           
 10745                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
 10746  0D44  0020               	movlb	0	; select bank0
 10747  0D45  082C               	movf	Button_Service@button,w
 10748  0D46  00A9               	movwf	??_Button_Service
 10749  0D47  0829               	movf	??_Button_Service,w
 10750  0D48  00A4               	movwf	Button_State_Pressed@button
 10751  0D49  082C               	movf	Button_Service@button,w
 10752  0D4A  3E02               	addlw	2
 10753  0D4B  0086               	movwf	6
 10754  0D4C  3001               	movlw	1	; select bank2/3
 10755  0D4D  0087               	movwf	7
 10756  0D4E  3501               	lslf	1,w
 10757  0D4F  3EC4               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 10758  0D50  0086               	movwf	6
 10759  0D51  0187               	clrf	7
 10760  0D52  3F41               	moviw [1]fsr1
 10761  0D53  008A               	movwf	10
 10762  0D54  3F40               	moviw [0]fsr1
 10763  0D55  000A               	callw
 10764  0D56  318D               	pagesel	$
 10765  0D57  0008               	return
 10766  0D58                     __end_of_Button_Service:	
 10767                           
 10768                           	psect	text65
 10769  1698                     __ptext65:	
 10770 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 10771 ;; Defined at:
 10772 ;;		line 950 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10773 ;; Parameters:    Size  Location     Type
 10774 ;;  sensor          1    wreg     enum E2854
 10775 ;; Auto vars:     Size  Location     Type
 10776 ;;  sensor          1    6[COMMON] enum E2854
 10777 ;; Return value:  Size  Location     Type
 10778 ;;                  1    wreg      _Bool 
 10779 ;; Registers used:
 10780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10781 ;; Tracked objects:
 10782 ;;		On entry : 0/0
 10783 ;;		On exit  : 0/0
 10784 ;;		Unchanged: 0/0
 10785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10786 ;;      Params:         0       0       0       0       0       0       0       0
 10787 ;;      Locals:         1       0       0       0       0       0       0       0
 10788 ;;      Temps:          1       0       0       0       0       0       0       0
 10789 ;;      Totals:         2       0       0       0       0       0       0       0
 10790 ;;Total ram usage:        2 bytes
 10791 ;; Hardware stack levels used:    1
 10792 ;; Hardware stack levels required when called:    5
 10793 ;; This function calls:
 10794 ;;		___bmul
 10795 ;; This function is called by:
 10796 ;;		_Button_Service
 10797 ;; This function uses a non-reentrant model
 10798 ;;
 10799                           
 10800                           
 10801                           ;psect for function _MTOUCH_Sensor_wasSampled
 10802  1698                     _MTOUCH_Sensor_wasSampled:	
 10803                           
 10804                           ;incstack = 0
 10805                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10806                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 10807  1698  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
 10808                           
 10809                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 950: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 951: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 952:     return (_Bool)mtouch_sensor[sensor].sampled;
 10810  1699  3009               	movlw	9
 10811  169A  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
 10812  169B  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
 10813  169C  00F1               	movwf	___bmul@multiplicand
 10814  169D  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 10815  169E  3196  26E4         	fcall	___bmul
 10816  16A0  3ED6               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
 10817  16A1  0086               	movwf	6
 10818  16A2  0187               	clrf	7
 10819  16A3  0801               	movf	1,w
 10820  16A4  3901               	andlw	1
 10821  16A5  0008               	return
 10822  16A6                     __end_of_MTOUCH_Sensor_wasSampled:	
 10823                           
 10824                           	psect	text66
 10825  174D                     __ptext66:	
 10826 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 10827 ;; Defined at:
 10828 ;;		line 903 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10829 ;; Parameters:    Size  Location     Type
 10830 ;;  sensor          1    wreg     enum E2854
 10831 ;; Auto vars:     Size  Location     Type
 10832 ;;  sensor          1    6[COMMON] enum E2854
 10833 ;; Return value:  Size  Location     Type
 10834 ;;                  1    wreg      _Bool 
 10835 ;; Registers used:
 10836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10842 ;;      Params:         0       0       0       0       0       0       0       0
 10843 ;;      Locals:         1       0       0       0       0       0       0       0
 10844 ;;      Temps:          1       0       0       0       0       0       0       0
 10845 ;;      Totals:         2       0       0       0       0       0       0       0
 10846 ;;Total ram usage:        2 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    5
 10849 ;; This function calls:
 10850 ;;		___bmul
 10851 ;; This function is called by:
 10852 ;;		_Button_Service
 10853 ;; This function uses a non-reentrant model
 10854 ;;
 10855                           
 10856                           
 10857                           ;psect for function _MTOUCH_Sensor_isCalibrated
 10858  174D                     _MTOUCH_Sensor_isCalibrated:	
 10859                           
 10860                           ;incstack = 0
 10861                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10862                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 10863  174D  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
 10864                           
 10865                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 903: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 904: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 905:     if(sensor < 2u)
 10866  174E  3002               	movlw	2
 10867  174F  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
 10868  1750  1803               	skipnc
 10869  1751  2F60               	goto	l5806
 10870                           
 10871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 906:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
 10872  1752  3009               	movlw	9
 10873  1753  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
 10874  1754  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
 10875  1755  00F1               	movwf	___bmul@multiplicand
 10876  1756  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 10877  1757  3196  26E4         	fcall	___bmul
 10878  1759  3ED6               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
 10879  175A  0086               	movwf	6
 10880  175B  0187               	clrf	7
 10881  175C  0C01               	rrf	1,w
 10882  175D  0C89               	rrf	9,f
 10883  175E  3901               	andlw	1
 10884  175F  0008               	return
 10885  1760                     l5806:	
 10886                           
 10887                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 908:         return 0;
 10888  1760  3000               	movlw	0
 10889  1761  0008               	return
 10890  1762                     __end_of_MTOUCH_Sensor_isCalibrated:	
 10891                           
 10892                           	psect	text67
 10893  05CD                     __ptext67:	
 10894 ;; *************** function _Button_State_NotPressed *****************
 10895 ;; Defined at:
 10896 ;;		line 229 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10897 ;; Parameters:    Size  Location     Type
 10898 ;;  button          1    4[BANK0 ] PTR struct .
 10899 ;;		 -> mtouch_button(32), 
 10900 ;; Auto vars:     Size  Location     Type
 10901 ;;		None
 10902 ;; Return value:  Size  Location     Type
 10903 ;;                  1    wreg      void 
 10904 ;; Registers used:
 10905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10906 ;; Tracked objects:
 10907 ;;		On entry : 0/0
 10908 ;;		On exit  : 0/0
 10909 ;;		Unchanged: 0/0
 10910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10911 ;;      Params:         0       1       0       0       0       0       0       0
 10912 ;;      Locals:         0       0       0       0       0       0       0       0
 10913 ;;      Temps:          0       2       0       0       0       0       0       0
 10914 ;;      Totals:         0       3       0       0       0       0       0       0
 10915 ;;Total ram usage:        3 bytes
 10916 ;; Hardware stack levels used:    1
 10917 ;; Hardware stack levels required when called:    7
 10918 ;; This function calls:
 10919 ;;		_Button_Baseline_Update
 10920 ;;		_Button_DefaultCallback
 10921 ;;		_MTOUCH_Button_Initialize
 10922 ;;		_myButtonPressedCallback
 10923 ;; This function is called by:
 10924 ;;		_Button_Service
 10925 ;; This function uses a non-reentrant model
 10926 ;;
 10927                           
 10928                           
 10929                           ;psect for function _Button_State_NotPressed
 10930  05CD                     _Button_State_NotPressed:	
 10931                           
 10932                           ;mcc_generated_files/mtouch/mtouch_button.c: 229: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 230: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 232:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 10933                           
 10934                           ;incstack = 0
 10935                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10936  05CD  0020               	movlb	0	; select bank0
 10937  05CE  0824               	movf	Button_State_NotPressed@button,w
 10938  05CF  3E09               	addlw	9
 10939  05D0  0086               	movwf	6
 10940  05D1  3001               	movlw	1	; select bank2/3
 10941  05D2  0087               	movwf	7
 10942  05D3  0801               	movf	1,w
 10943  05D4  3A80               	xorlw	128
 10944  05D5  00A5               	movwf	??_Button_State_NotPressed
 10945  05D6  0824               	movf	Button_State_NotPressed@button,w
 10946  05D7  3E0E               	addlw	14
 10947  05D8  0086               	movwf	6
 10948  05D9  3001               	movlw	1	; select bank2/3
 10949  05DA  0087               	movwf	7
 10950  05DB  0301               	decf	1,w
 10951  05DC  3AFF               	xorlw	255
 10952  05DD  3A80               	xorlw	128
 10953  05DE  02A5               	subwf	??_Button_State_NotPressed,f
 10954  05DF  1803               	skipnc
 10955  05E0  2E0C               	goto	l5856
 10956                           
 10957                           ;mcc_generated_files/mtouch/mtouch_button.c: 233:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 234:         (button->counter)++;
 10958  05E1  0824               	movf	Button_State_NotPressed@button,w
 10959  05E2  3E0A               	addlw	10
 10960  05E3  0086               	movwf	6
 10961  05E4  3001               	movlw	1	; select bank2/3
 10962  05E5  0087               	movwf	7
 10963  05E6  3001               	movlw	1
 10964  05E7  0781               	addwf	1,f
 10965  05E8  3141               	addfsr 1,1
 10966  05E9  1803               	skipnc
 10967  05EA  0A81               	incf	1,f
 10968                           
 10969                           ;mcc_generated_files/mtouch/mtouch_button.c: 235:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 10970  05EB  0824               	movf	Button_State_NotPressed@button,w
 10971  05EC  3E0A               	addlw	10
 10972  05ED  0086               	movwf	6
 10973  05EE  3001               	movlw	1	; select bank2/3
 10974  05EF  0087               	movwf	7
 10975  05F0  3F40               	moviw [0]fsr1
 10976  05F1  00A5               	movwf	??_Button_State_NotPressed
 10977  05F2  3F41               	moviw [1]fsr1
 10978  05F3  00A6               	movwf	??_Button_State_NotPressed+1
 10979  05F4  3000               	movlw	0
 10980  05F5  0226               	subwf	??_Button_State_NotPressed+1,w
 10981  05F6  3041               	movlw	65
 10982  05F7  1903               	skipnz
 10983  05F8  0225               	subwf	??_Button_State_NotPressed,w
 10984  05F9  1C03               	skipc
 10985  05FA  2E4E               	goto	l522
 10986                           
 10987                           ;mcc_generated_files/mtouch/mtouch_button.c: 236:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 237:             button->counter = (mtouch_button_statecounter_t)0;
 10988  05FB  0824               	movf	Button_State_NotPressed@button,w
 10989  05FC  3E0A               	addlw	10
 10990  05FD  0086               	movwf	6
 10991  05FE  3001               	movlw	1	; select bank2/3
 10992  05FF  0087               	movwf	7
 10993  0600  3000               	movlw	0
 10994  0601  3FC0               	movwi [0]fsr1
 10995  0602  3FC1               	movwi [1]fsr1
 10996                           
 10997                           ;mcc_generated_files/mtouch/mtouch_button.c: 238:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 10998  0603  0824               	movf	Button_State_NotPressed@button,w
 10999  0604  0086               	movwf	6
 11000  0605  3001               	movlw	1	; select bank2/3
 11001  0606  0087               	movwf	7
 11002  0607  0801               	movf	1,w
 11003  0608  318B  23B8  3185   	fcall	_MTOUCH_Button_Initialize
 11004  060B  2E4E               	goto	l522
 11005  060C                     l5856:	
 11006  060C  0824               	movf	Button_State_NotPressed@button,w
 11007  060D  3E09               	addlw	9
 11008  060E  0086               	movwf	6
 11009  060F  3001               	movlw	1	; select bank2/3
 11010  0610  0087               	movwf	7
 11011  0611  0801               	movf	1,w
 11012  0612  00A5               	movwf	??_Button_State_NotPressed
 11013  0613  01A6               	clrf	??_Button_State_NotPressed+1
 11014  0614  1BA5               	btfsc	??_Button_State_NotPressed,7
 11015  0615  03A6               	decf	??_Button_State_NotPressed+1,f
 11016  0616  0824               	movf	Button_State_NotPressed@button,w
 11017  0617  3E0E               	addlw	14
 11018  0618  0086               	movwf	6
 11019  0619  3001               	movlw	1	; select bank2/3
 11020  061A  0087               	movwf	7
 11021  061B  0826               	movf	??_Button_State_NotPressed+1,w
 11022  061C  3A80               	xorlw	128
 11023  061D  3C80               	sublw	128
 11024  061E  1D03               	skipz
 11025  061F  2E22               	goto	u4905
 11026  0620  0825               	movf	??_Button_State_NotPressed,w
 11027  0621  0201               	subwf	1,w
 11028  0622                     u4905:	
 11029  0622  1803               	skipnc
 11030  0623  2E45               	goto	l5862
 11031                           
 11032                           ;mcc_generated_files/mtouch/mtouch_button.c: 243:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 245:         button->state = MTOUCH_BUTTON_STATE_pressed;
 11033  0624  3002               	movlw	2
 11034  0625  0020               	movlb	0	; select bank0
 11035  0626  00A5               	movwf	??_Button_State_NotPressed
 11036  0627  0824               	movf	Button_State_NotPressed@button,w
 11037  0628  3E02               	addlw	2
 11038  0629  0086               	movwf	6
 11039  062A  3001               	movlw	1	; select bank2/3
 11040  062B  0087               	movwf	7
 11041  062C  0825               	movf	??_Button_State_NotPressed,w
 11042  062D  0081               	movwf	1
 11043                           
 11044                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11045  062E  0824               	movf	Button_State_NotPressed@button,w
 11046  062F  3E0A               	addlw	10
 11047  0630  0086               	movwf	6
 11048  0631  3001               	movlw	1	; select bank2/3
 11049  0632  0087               	movwf	7
 11050  0633  3000               	movlw	0
 11051  0634  3FC0               	movwi [0]fsr1
 11052  0635  3FC1               	movwi [1]fsr1
 11053                           
 11054                           ;mcc_generated_files/mtouch/mtouch_button.c: 247:         callback_pressed(button->name)
      +                          ;
 11055  0636  0824               	movf	Button_State_NotPressed@button,w
 11056  0637  0086               	movwf	6
 11057  0638  3001               	movlw	1	; select bank2/3
 11058  0639  0087               	movwf	7
 11059  063A  0801               	movf	1,w
 11060  063B  00A5               	movwf	??_Button_State_NotPressed
 11061  063C  0825               	movf	??_Button_State_NotPressed,w
 11062  063D  00F4               	movwf	myButtonPressedCallback@button
 11063  063E  0021               	movlb	1	; select bank1
 11064  063F  084B               	movf	(_callback_pressed+1)^(0+128),w
 11065  0640  008A               	movwf	10
 11066  0641  084A               	movf	_callback_pressed^(0+128),w
 11067  0642  000A               	callw
 11068  0643  3185               	pagesel	$
 11069                           
 11070                           ;mcc_generated_files/mtouch/mtouch_button.c: 248:     }
 11071  0644  2E4E               	goto	l522
 11072  0645                     l5862:	
 11073                           
 11074                           ;mcc_generated_files/mtouch/mtouch_button.c: 250:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 252:         button->counter = (mtouch_button_statecounter_t)0;
 11075  0645  0020               	movlb	0	; select bank0
 11076  0646  0824               	movf	Button_State_NotPressed@button,w
 11077  0647  3E0A               	addlw	10
 11078  0648  0086               	movwf	6
 11079  0649  3001               	movlw	1	; select bank2/3
 11080  064A  0087               	movwf	7
 11081  064B  3000               	movlw	0
 11082  064C  3FC0               	movwi [0]fsr1
 11083  064D  3FC1               	movwi [1]fsr1
 11084  064E                     l522:	
 11085                           
 11086                           ;mcc_generated_files/mtouch/mtouch_button.c: 257:     (button->baseline_count)++;
 11087  064E  0020               	movlb	0	; select bank0
 11088  064F  0824               	movf	Button_State_NotPressed@button,w
 11089  0650  3E0C               	addlw	12
 11090  0651  0086               	movwf	6
 11091  0652  3001               	movlw	1	; select bank2/3
 11092  0653  0087               	movwf	7
 11093  0654  3001               	movlw	1
 11094  0655  0781               	addwf	1,f
 11095  0656  3141               	addfsr 1,1
 11096  0657  1803               	skipnc
 11097  0658  0A81               	incf	1,f
 11098                           
 11099                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 11100  0659  0824               	movf	Button_State_NotPressed@button,w
 11101  065A  3E0C               	addlw	12
 11102  065B  0086               	movwf	6
 11103  065C  3001               	movlw	1	; select bank2/3
 11104  065D  0087               	movwf	7
 11105  065E  0016               	moviw fsr1++
 11106  065F  3A40               	xorlw	64
 11107  0660  00A5               	movwf	??_Button_State_NotPressed
 11108  0661  0016               	moviw fsr1++
 11109  0662  04A5               	iorwf	??_Button_State_NotPressed,f
 11110  0663  1D03               	btfss	3,2
 11111  0664  0008               	return
 11112                           
 11113                           ;mcc_generated_files/mtouch/mtouch_button.c: 259:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 260:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 11114  0665  0824               	movf	Button_State_NotPressed@button,w
 11115  0666  3E0C               	addlw	12
 11116  0667  0086               	movwf	6
 11117  0668  3001               	movlw	1	; select bank2/3
 11118  0669  0087               	movwf	7
 11119  066A  3000               	movlw	0
 11120  066B  3FC0               	movwi [0]fsr1
 11121  066C  3FC1               	movwi [1]fsr1
 11122                           
 11123                           ;mcc_generated_files/mtouch/mtouch_button.c: 261:         Button_Baseline_Update(button)
      +                          ;
 11124  066D  0824               	movf	Button_State_NotPressed@button,w
 11125  066E  3187  2704         	fcall	_Button_Baseline_Update
 11126  0670  0008               	return
 11127  0671                     __end_of_Button_State_NotPressed:	
 11128                           
 11129                           	psect	text68
 11130  0DB4                     __ptext68:	
 11131 ;; *************** function _Button_State_Initializing *****************
 11132 ;; Defined at:
 11133 ;;		line 209 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11134 ;; Parameters:    Size  Location     Type
 11135 ;;  button          1    4[BANK0 ] PTR struct .
 11136 ;;		 -> mtouch_button(32), 
 11137 ;; Auto vars:     Size  Location     Type
 11138 ;;		None
 11139 ;; Return value:  Size  Location     Type
 11140 ;;                  1    wreg      void 
 11141 ;; Registers used:
 11142 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11143 ;; Tracked objects:
 11144 ;;		On entry : 0/0
 11145 ;;		On exit  : 0/0
 11146 ;;		Unchanged: 0/0
 11147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11148 ;;      Params:         0       1       0       0       0       0       0       0
 11149 ;;      Locals:         0       0       0       0       0       0       0       0
 11150 ;;      Temps:          0       4       0       0       0       0       0       0
 11151 ;;      Totals:         0       5       0       0       0       0       0       0
 11152 ;;Total ram usage:        5 bytes
 11153 ;; Hardware stack levels used:    1
 11154 ;; Hardware stack levels required when called:    7
 11155 ;; This function calls:
 11156 ;;		_Button_Baseline_Initialize
 11157 ;;		_Button_Baseline_Update
 11158 ;; This function is called by:
 11159 ;;		_Button_Service
 11160 ;; This function uses a non-reentrant model
 11161 ;;
 11162                           
 11163                           
 11164                           ;psect for function _Button_State_Initializing
 11165  0DB4                     _Button_State_Initializing:	
 11166                           
 11167                           ;mcc_generated_files/mtouch/mtouch_button.c: 209: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 210: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 212:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 11168                           
 11169                           ;incstack = 0
 11170                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11171  0DB4  0020               	movlb	0	; select bank0
 11172  0DB5  0824               	movf	Button_State_Initializing@button,w
 11173  0DB6  3E0A               	addlw	10
 11174  0DB7  0086               	movwf	6
 11175  0DB8  3001               	movlw	1	; select bank2/3
 11176  0DB9  0087               	movwf	7
 11177  0DBA  3F40               	moviw [0]fsr1
 11178  0DBB  00A5               	movwf	??_Button_State_Initializing
 11179  0DBC  3F41               	moviw [1]fsr1
 11180  0DBD  00A6               	movwf	??_Button_State_Initializing+1
 11181  0DBE  3000               	movlw	0
 11182  0DBF  0226               	subwf	??_Button_State_Initializing+1,w
 11183  0DC0  3009               	movlw	9
 11184  0DC1  1903               	skipnz
 11185  0DC2  0225               	subwf	??_Button_State_Initializing,w
 11186  0DC3  1803               	skipnc
 11187  0DC4  2DCA               	goto	l5840
 11188                           
 11189                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 214:         Button_Baseline_Initialize(button);
 11190  0DC5  0824               	movf	Button_State_Initializing@button,w
 11191  0DC6  318A  2291  318D   	fcall	_Button_Baseline_Initialize
 11192                           
 11193                           ;mcc_generated_files/mtouch/mtouch_button.c: 215:     } else {
 11194  0DC9  2DCE               	goto	l5842
 11195  0DCA                     l5840:	
 11196                           
 11197                           ;mcc_generated_files/mtouch/mtouch_button.c: 216:         Button_Baseline_Update(button)
      +                          ;
 11198  0DCA  0824               	movf	Button_State_Initializing@button,w
 11199  0DCB  3187  2704  318D   	fcall	_Button_Baseline_Update
 11200  0DCE                     l5842:	
 11201                           
 11202                           ;mcc_generated_files/mtouch/mtouch_button.c: 220:     (button->counter)++;
 11203  0DCE  0020               	movlb	0	; select bank0
 11204  0DCF  0824               	movf	Button_State_Initializing@button,w
 11205  0DD0  3E0A               	addlw	10
 11206  0DD1  0086               	movwf	6
 11207  0DD2  3001               	movlw	1	; select bank2/3
 11208  0DD3  0087               	movwf	7
 11209  0DD4  3001               	movlw	1
 11210  0DD5  0781               	addwf	1,f
 11211  0DD6  3141               	addfsr 1,1
 11212  0DD7  1803               	skipnc
 11213  0DD8  0A81               	incf	1,f
 11214                           
 11215                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 11216  0DD9  0824               	movf	Button_State_Initializing@button,w
 11217  0DDA  3E0A               	addlw	10
 11218  0DDB  0086               	movwf	6
 11219  0DDC  3001               	movlw	1	; select bank2/3
 11220  0DDD  0087               	movwf	7
 11221  0DDE  3F40               	moviw [0]fsr1
 11222  0DDF  00A5               	movwf	??_Button_State_Initializing
 11223  0DE0  3F41               	moviw [1]fsr1
 11224  0DE1  00A6               	movwf	??_Button_State_Initializing+1
 11225  0DE2  3000               	movlw	0
 11226  0DE3  0226               	subwf	??_Button_State_Initializing+1,w
 11227  0DE4  3010               	movlw	16
 11228  0DE5  1903               	skipnz
 11229  0DE6  0225               	subwf	??_Button_State_Initializing,w
 11230  0DE7  1C03               	skipc
 11231  0DE8  0008               	return
 11232                           
 11233                           ;mcc_generated_files/mtouch/mtouch_button.c: 222:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 223:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 11234  0DE9  0824               	movf	Button_State_Initializing@button,w
 11235  0DEA  3E05               	addlw	5
 11236  0DEB  0086               	movwf	6
 11237  0DEC  3001               	movlw	1	; select bank2/3
 11238  0DED  0087               	movwf	7
 11239  0DEE  3F40               	moviw [0]fsr1
 11240  0DEF  00A5               	movwf	??_Button_State_Initializing
 11241  0DF0  3F41               	moviw [1]fsr1
 11242  0DF1  00A6               	movwf	??_Button_State_Initializing+1
 11243  0DF2  3F42               	moviw [2]fsr1
 11244  0DF3  00A7               	movwf	??_Button_State_Initializing+2
 11245  0DF4  3F43               	moviw [3]fsr1
 11246  0DF5  00A8               	movwf	??_Button_State_Initializing+3
 11247  0DF6  3004               	movlw	4
 11248  0DF7                     u4875:	
 11249  0DF7  36A8               	lsrf	??_Button_State_Initializing+3,f
 11250  0DF8  0CA7               	rrf	??_Button_State_Initializing+2,f
 11251  0DF9  0CA6               	rrf	??_Button_State_Initializing+1,f
 11252  0DFA  0CA5               	rrf	??_Button_State_Initializing,f
 11253  0DFB  0B89               	decfsz	9,f
 11254  0DFC  2DF7               	goto	u4875
 11255  0DFD  0824               	movf	Button_State_Initializing@button,w
 11256  0DFE  3E03               	addlw	3
 11257  0DFF  0086               	movwf	6
 11258  0E00  3001               	movlw	1	; select bank2/3
 11259  0E01  0087               	movwf	7
 11260  0E02  0825               	movf	??_Button_State_Initializing,w
 11261  0E03  3FC0               	movwi [0]fsr1
 11262  0E04  0826               	movf	??_Button_State_Initializing+1,w
 11263  0E05  3FC1               	movwi [1]fsr1
 11264                           
 11265                           ;mcc_generated_files/mtouch/mtouch_button.c: 224:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 11266  0E06  0824               	movf	Button_State_Initializing@button,w
 11267  0E07  3E02               	addlw	2
 11268  0E08  0086               	movwf	6
 11269  0E09  3001               	movlw	1	; select bank2/3
 11270  0E0A  0087               	movwf	7
 11271  0E0B  0181               	clrf	1
 11272  0E0C  0A81               	incf	1,f
 11273                           
 11274                           ;mcc_generated_files/mtouch/mtouch_button.c: 225:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11275  0E0D  0824               	movf	Button_State_Initializing@button,w
 11276  0E0E  3E0A               	addlw	10
 11277  0E0F  0086               	movwf	6
 11278  0E10  3001               	movlw	1	; select bank2/3
 11279  0E11  0087               	movwf	7
 11280  0E12  3000               	movlw	0
 11281  0E13  3FC0               	movwi [0]fsr1
 11282  0E14  3FC1               	movwi [1]fsr1
 11283  0E15  0008               	return
 11284  0E16                     __end_of_Button_State_Initializing:	
 11285                           
 11286                           	psect	text69
 11287  0793                     __ptext69:	
 11288 ;; *************** function _Button_State_Pressed *****************
 11289 ;; Defined at:
 11290 ;;		line 265 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11291 ;; Parameters:    Size  Location     Type
 11292 ;;  button          1    4[BANK0 ] PTR struct .
 11293 ;;		 -> mtouch_button(32), 
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;		None
 11296 ;; Return value:  Size  Location     Type
 11297 ;;                  1    wreg      void 
 11298 ;; Registers used:
 11299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11300 ;; Tracked objects:
 11301 ;;		On entry : 0/0
 11302 ;;		On exit  : 0/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11305 ;;      Params:         0       1       0       0       0       0       0       0
 11306 ;;      Locals:         0       0       0       0       0       0       0       0
 11307 ;;      Temps:          0       2       0       0       0       0       0       0
 11308 ;;      Totals:         0       3       0       0       0       0       0       0
 11309 ;;Total ram usage:        3 bytes
 11310 ;; Hardware stack levels used:    1
 11311 ;; Hardware stack levels required when called:    7
 11312 ;; This function calls:
 11313 ;;		_Button_DefaultCallback
 11314 ;;		_MTOUCH_Button_Initialize
 11315 ;;		_myButtonReleasedCallback
 11316 ;; This function is called by:
 11317 ;;		_Button_Service
 11318 ;; This function uses a non-reentrant model
 11319 ;;
 11320                           
 11321                           
 11322                           ;psect for function _Button_State_Pressed
 11323  0793                     _Button_State_Pressed:	
 11324                           
 11325                           ;mcc_generated_files/mtouch/mtouch_button.c: 265: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 266: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 268:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 11326                           
 11327                           ;incstack = 0
 11328                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11329  0793  0020               	movlb	0	; select bank0
 11330  0794  0824               	movf	Button_State_Pressed@button,w
 11331  0795  3E0A               	addlw	10
 11332  0796  0086               	movwf	6
 11333  0797  3001               	movlw	1	; select bank2/3
 11334  0798  0087               	movwf	7
 11335  0799  3F40               	moviw [0]fsr1
 11336  079A  00A5               	movwf	??_Button_State_Pressed
 11337  079B  3F41               	moviw [1]fsr1
 11338  079C  00A6               	movwf	??_Button_State_Pressed+1
 11339  079D  3007               	movlw	7
 11340  079E  0226               	subwf	??_Button_State_Pressed+1,w
 11341  079F  30D0               	movlw	208
 11342  07A0  1903               	skipnz
 11343  07A1  0225               	subwf	??_Button_State_Pressed,w
 11344  07A2  1C03               	skipc
 11345  07A3  2FBB               	goto	l5872
 11346                           
 11347                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 270:         MTOUCH_Button_Initialize(button->name);
 11348  07A4  0824               	movf	Button_State_Pressed@button,w
 11349  07A5  0086               	movwf	6
 11350  07A6  3001               	movlw	1	; select bank2/3
 11351  07A7  0087               	movwf	7
 11352  07A8  0801               	movf	1,w
 11353  07A9  318B  23B8  3187   	fcall	_MTOUCH_Button_Initialize
 11354                           
 11355                           ;mcc_generated_files/mtouch/mtouch_button.c: 271:         callback_notPressed(button->na
      +                          me);
 11356  07AC  0020               	movlb	0	; select bank0
 11357  07AD  0824               	movf	Button_State_Pressed@button,w
 11358  07AE  0086               	movwf	6
 11359  07AF  3001               	movlw	1	; select bank2/3
 11360  07B0  0087               	movwf	7
 11361  07B1  0801               	movf	1,w
 11362  07B2  00A5               	movwf	??_Button_State_Pressed
 11363  07B3  0825               	movf	??_Button_State_Pressed,w
 11364  07B4  00F4               	movwf	myButtonReleasedCallback@button
 11365  07B5  086D               	movf	_callback_notPressed+1,w
 11366  07B6  008A               	movwf	10
 11367  07B7  086C               	movf	_callback_notPressed,w
 11368  07B8  000A               	callw
 11369  07B9  3187               	pagesel	$
 11370                           
 11371                           ;mcc_generated_files/mtouch/mtouch_button.c: 272:     }
 11372  07BA  0008               	return
 11373  07BB                     l5872:	
 11374  07BB  0824               	movf	Button_State_Pressed@button,w
 11375  07BC  3E09               	addlw	9
 11376  07BD  0086               	movwf	6
 11377  07BE  3001               	movlw	1	; select bank2/3
 11378  07BF  0087               	movwf	7
 11379  07C0  0801               	movf	1,w
 11380  07C1  3A80               	xorlw	128
 11381  07C2  00A5               	movwf	??_Button_State_Pressed
 11382  07C3  0824               	movf	Button_State_Pressed@button,w
 11383  07C4  3E0E               	addlw	14
 11384  07C5  0086               	movwf	6
 11385  07C6  3001               	movlw	1	; select bank2/3
 11386  07C7  0087               	movwf	7
 11387  07C8  0824               	movf	Button_State_Pressed@button,w
 11388  07C9  3E0E               	addlw	14
 11389  07CA  0084               	movwf	4
 11390  07CB  3001               	movlw	1	; select bank2/3
 11391  07CC  0085               	movwf	5
 11392  07CD  3600               	lsrf	0,w
 11393  07CE  0201               	subwf	1,w
 11394  07CF  3A80               	xorlw	128
 11395  07D0  02A5               	subwf	??_Button_State_Pressed,f
 11396  07D1  1803               	skipnc
 11397  07D2  0008               	return
 11398                           
 11399                           ;mcc_generated_files/mtouch/mtouch_button.c: 276:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 277:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 11400  07D3  0824               	movf	Button_State_Pressed@button,w
 11401  07D4  3E02               	addlw	2
 11402  07D5  0086               	movwf	6
 11403  07D6  3001               	movlw	1	; select bank2/3
 11404  07D7  0087               	movwf	7
 11405  07D8  0181               	clrf	1
 11406  07D9  0A81               	incf	1,f
 11407                           
 11408                           ;mcc_generated_files/mtouch/mtouch_button.c: 278:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11409  07DA  0824               	movf	Button_State_Pressed@button,w
 11410  07DB  3E0A               	addlw	10
 11411  07DC  0086               	movwf	6
 11412  07DD  3001               	movlw	1	; select bank2/3
 11413  07DE  0087               	movwf	7
 11414  07DF  3000               	movlw	0
 11415  07E0  3FC0               	movwi [0]fsr1
 11416  07E1  3FC1               	movwi [1]fsr1
 11417                           
 11418                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 11419  07E2  0824               	movf	Button_State_Pressed@button,w
 11420  07E3  3E0C               	addlw	12
 11421  07E4  0086               	movwf	6
 11422  07E5  3001               	movlw	1	; select bank2/3
 11423  07E6  0087               	movwf	7
 11424  07E7  30FF               	movlw	255
 11425  07E8  3FC0               	movwi [0]fsr1
 11426  07E9  30FB               	movlw	251
 11427  07EA  3FC1               	movwi [1]fsr1
 11428                           
 11429                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:         callback_notPressed(button->na
      +                          me);
 11430  07EB  0824               	movf	Button_State_Pressed@button,w
 11431  07EC  0086               	movwf	6
 11432  07ED  3001               	movlw	1	; select bank2/3
 11433  07EE  0087               	movwf	7
 11434  07EF  0801               	movf	1,w
 11435  07F0  00A5               	movwf	??_Button_State_Pressed
 11436  07F1  0825               	movf	??_Button_State_Pressed,w
 11437  07F2  00F4               	movwf	myButtonReleasedCallback@button
 11438  07F3  086D               	movf	_callback_notPressed+1,w
 11439  07F4  008A               	movwf	10
 11440  07F5  086C               	movf	_callback_notPressed,w
 11441  07F6  000A               	callw
 11442  07F7  3187               	pagesel	$
 11443  07F8  0008               	return
 11444  07F9                     __end_of_Button_State_Pressed:	
 11445                           
 11446                           	psect	text70
 11447  08C2                     __ptext70:	
 11448 ;; *************** function _myButtonPressedCallback *****************
 11449 ;; Defined at:
 11450 ;;		line 184 in file "main.c"
 11451 ;; Parameters:    Size  Location     Type
 11452 ;;  button          1    4[COMMON] enum E2912
 11453 ;; Auto vars:     Size  Location     Type
 11454 ;;		None
 11455 ;; Return value:  Size  Location     Type
 11456 ;;                  1    wreg      void 
 11457 ;; Registers used:
 11458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11459 ;; Tracked objects:
 11460 ;;		On entry : 0/0
 11461 ;;		On exit  : 0/0
 11462 ;;		Unchanged: 0/0
 11463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11464 ;;      Params:         1       0       0       0       0       0       0       0
 11465 ;;      Locals:         0       0       0       0       0       0       0       0
 11466 ;;      Temps:          0       0       0       0       0       0       0       0
 11467 ;;      Totals:         1       0       0       0       0       0       0       0
 11468 ;;Total ram usage:        1 bytes
 11469 ;; Hardware stack levels used:    1
 11470 ;; Hardware stack levels required when called:    6
 11471 ;; This function calls:
 11472 ;;		_LED_PROCESS
 11473 ;;		_RELAY_PROCESS
 11474 ;; This function is called by:
 11475 ;;		_main
 11476 ;;		_Button_State_NotPressed
 11477 ;; This function uses a non-reentrant model
 11478 ;;
 11479                           
 11480                           
 11481                           ;psect for function _myButtonPressedCallback
 11482  08C2                     _myButtonPressedCallback:	
 11483                           
 11484                           ;main.c: 184: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 185:
      +                           {;main.c: 186:     count_conf = 0;
 11485                           
 11486                           ;incstack = 0
 11487                           ; Regs used in _myButtonPressedCallback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11488  08C2  0021               	movlb	1	; select bank1
 11489  08C3  01C2               	clrf	_count_conf^(0+128)
 11490  08C4  01C3               	clrf	(_count_conf+1)^(0+128)
 11491                           
 11492                           ;main.c: 187:     if(config_status == 0)
 11493  08C5  0020               	movlb	0	; select bank0
 11494  08C6  0861               	movf	_config_status,w
 11495  08C7  1D03               	btfss	3,2
 11496  08C8  0008               	return
 11497                           
 11498                           ;main.c: 188:     {;main.c: 189:         if(button == 0) last_touch_status.full_status ^
      +                          = 0b00000001;
 11499  08C9  0874               	movf	myButtonPressedCallback@button,w
 11500  08CA  1D03               	btfss	3,2
 11501  08CB  28D0               	goto	l4192
 11502  08CC  3001               	movlw	1
 11503  08CD  06D9               	xorwf	_last_touch_status,f
 11504  08CE  3000               	movlw	0
 11505  08CF  06DA               	xorwf	_last_touch_status+1,f
 11506  08D0                     l4192:	
 11507                           
 11508                           ;main.c: 190:         if(button == 1) last_touch_status.full_status ^= 0b00000010;
 11509  08D0  0374               	decf	myButtonPressedCallback@button,w
 11510  08D1  1D03               	btfss	3,2
 11511  08D2  28D7               	goto	l4196
 11512  08D3  3002               	movlw	2
 11513  08D4  06D9               	xorwf	_last_touch_status,f
 11514  08D5  3000               	movlw	0
 11515  08D6  06DA               	xorwf	_last_touch_status+1,f
 11516  08D7                     l4196:	
 11517                           
 11518                           ;main.c: 191:         LED_PROCESS(last_touch_status.full_status);
 11519  08D7  0859               	movf	_last_touch_status,w
 11520  08D8  318A  22EE  3188   	fcall	_LED_PROCESS
 11521                           
 11522                           ;main.c: 192:         RELAY_PROCESS(last_touch_status.full_status);
 11523  08DB  0020               	movlb	0	; select bank0
 11524  08DC  0859               	movf	_last_touch_status,w
 11525  08DD  3189  21E8         	fcall	_RELAY_PROCESS
 11526  08DF  0008               	return
 11527  08E0                     __end_of_myButtonPressedCallback:	
 11528                           
 11529                           	psect	text71
 11530  15B8                     __ptext71:	
 11531 ;; *************** function _Button_DefaultCallback *****************
 11532 ;; Defined at:
 11533 ;;		line 519 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11534 ;; Parameters:    Size  Location     Type
 11535 ;;  button          1    4[COMMON] enum E3068
 11536 ;; Auto vars:     Size  Location     Type
 11537 ;;		None
 11538 ;; Return value:  Size  Location     Type
 11539 ;;                  1    wreg      void 
 11540 ;; Registers used:
 11541 ;;		None
 11542 ;; Tracked objects:
 11543 ;;		On entry : 0/0
 11544 ;;		On exit  : 0/0
 11545 ;;		Unchanged: 0/0
 11546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11547 ;;      Params:         1       0       0       0       0       0       0       0
 11548 ;;      Locals:         0       0       0       0       0       0       0       0
 11549 ;;      Temps:          0       0       0       0       0       0       0       0
 11550 ;;      Totals:         1       0       0       0       0       0       0       0
 11551 ;;Total ram usage:        1 bytes
 11552 ;; Hardware stack levels used:    1
 11553 ;; Hardware stack levels required when called:    4
 11554 ;; This function calls:
 11555 ;;		Nothing
 11556 ;; This function is called by:
 11557 ;;		_Button_State_NotPressed
 11558 ;;		_Button_State_Pressed
 11559 ;; This function uses a non-reentrant model
 11560 ;;
 11561                           
 11562                           
 11563                           ;psect for function _Button_DefaultCallback
 11564  15B8                     _Button_DefaultCallback:	
 11565                           
 11566                           ;incstack = 0
 11567                           ; Regs used in _Button_DefaultCallback: []
 11568  15B8  0008               	return
 11569  15B9                     __end_of_Button_DefaultCallback:	
 11570                           
 11571                           	psect	text72
 11572  17E7                     __ptext72:	
 11573 ;; *************** function _myButtonReleasedCallback *****************
 11574 ;; Defined at:
 11575 ;;		line 195 in file "main.c"
 11576 ;; Parameters:    Size  Location     Type
 11577 ;;  button          1    4[COMMON] enum E2912
 11578 ;; Auto vars:     Size  Location     Type
 11579 ;;		None
 11580 ;; Return value:  Size  Location     Type
 11581 ;;                  1    wreg      void 
 11582 ;; Registers used:
 11583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11584 ;; Tracked objects:
 11585 ;;		On entry : 0/0
 11586 ;;		On exit  : 0/0
 11587 ;;		Unchanged: 0/0
 11588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11589 ;;      Params:         1       0       0       0       0       0       0       0
 11590 ;;      Locals:         0       0       0       0       0       0       0       0
 11591 ;;      Temps:          0       0       0       0       0       0       0       0
 11592 ;;      Totals:         1       0       0       0       0       0       0       0
 11593 ;;Total ram usage:        1 bytes
 11594 ;; Hardware stack levels used:    1
 11595 ;; Hardware stack levels required when called:    5
 11596 ;; This function calls:
 11597 ;;		_MTOUCH_Button_isPressed
 11598 ;; This function is called by:
 11599 ;;		_main
 11600 ;;		_Button_State_Pressed
 11601 ;; This function uses a non-reentrant model
 11602 ;;
 11603                           
 11604                           
 11605                           ;psect for function _myButtonReleasedCallback
 11606  17E7                     _myButtonReleasedCallback:	
 11607                           
 11608                           ;main.c: 195: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 196
      +                          : {;main.c: 197:     count_conf = 0;
 11609                           
 11610                           ;incstack = 0
 11611                           ; Regs used in _myButtonReleasedCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11612  17E7  0021               	movlb	1	; select bank1
 11613  17E8  01C2               	clrf	_count_conf^(0+128)
 11614  17E9  01C3               	clrf	(_count_conf+1)^(0+128)
 11615                           
 11616                           ;main.c: 198:     if(config_status == 0)
 11617  17EA  0020               	movlb	0	; select bank0
 11618  17EB  0861               	movf	_config_status,w
 11619  17EC  1D03               	btfss	3,2
 11620  17ED  0008               	return
 11621                           
 11622                           ;main.c: 199:     {;main.c: 201:         if(MTOUCH_Button_isPressed(0)==0&&MTOUCH_Button
      +                          _isPressed(1)==0)
 11623  17EE  3000               	movlw	0
 11624  17EF  3188  2018  3197   	fcall	_MTOUCH_Button_isPressed
 11625  17F2  3A00               	xorlw	0
 11626  17F3  1D03               	skipz
 11627  17F4  0008               	return
 11628  17F5  3001               	movlw	1
 11629  17F6  3188  2018  3197   	fcall	_MTOUCH_Button_isPressed
 11630  17F9  3A00               	xorlw	0
 11631  17FA  1D03               	skipz
 11632  17FB  0008               	return
 11633                           
 11634                           ;main.c: 202:         {;main.c: 203:             update_state_flag = 1;
 11635  17FC  0020               	movlb	0	; select bank0
 11636  17FD  01DD               	clrf	_update_state_flag
 11637  17FE  0ADD               	incf	_update_state_flag,f
 11638  17FF  0008               	return
 11639  1800                     __end_of_myButtonReleasedCallback:	
 11640                           
 11641                           	psect	text73
 11642  0818                     __ptext73:	
 11643 ;; *************** function _MTOUCH_Button_isPressed *****************
 11644 ;; Defined at:
 11645 ;;		line 366 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11646 ;; Parameters:    Size  Location     Type
 11647 ;;  name            1    wreg     enum E3068
 11648 ;; Auto vars:     Size  Location     Type
 11649 ;;  name            1    2[COMMON] enum E3068
 11650 ;; Return value:  Size  Location     Type
 11651 ;;                  1    wreg      _Bool 
 11652 ;; Registers used:
 11653 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11654 ;; Tracked objects:
 11655 ;;		On entry : 0/0
 11656 ;;		On exit  : 0/0
 11657 ;;		Unchanged: 0/0
 11658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11659 ;;      Params:         0       0       0       0       0       0       0       0
 11660 ;;      Locals:         1       0       0       0       0       0       0       0
 11661 ;;      Temps:          1       0       0       0       0       0       0       0
 11662 ;;      Totals:         2       0       0       0       0       0       0       0
 11663 ;;Total ram usage:        2 bytes
 11664 ;; Hardware stack levels used:    1
 11665 ;; Hardware stack levels required when called:    4
 11666 ;; This function calls:
 11667 ;;		Nothing
 11668 ;; This function is called by:
 11669 ;;		_main
 11670 ;;		_myButtonReleasedCallback
 11671 ;;		_touch_example
 11672 ;;		_MTOUCH_Button_Buttonmask_Get
 11673 ;; This function uses a non-reentrant model
 11674 ;;
 11675                           
 11676                           
 11677                           ;psect for function _MTOUCH_Button_isPressed
 11678  0818                     _MTOUCH_Button_isPressed:	
 11679                           
 11680                           ;incstack = 0
 11681                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 11682                           ;MTOUCH_Button_isPressed@name stored from wreg
 11683  0818  00F2               	movwf	MTOUCH_Button_isPressed@name
 11684                           
 11685                           ;mcc_generated_files/mtouch/mtouch_button.c: 366: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 367: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 368:     if(name < 2u)
 11686  0819  3002               	movlw	2
 11687  081A  0272               	subwf	MTOUCH_Button_isPressed@name,w
 11688  081B  1803               	skipnc
 11689  081C  2831               	goto	l3812
 11690                           
 11691                           ;mcc_generated_files/mtouch/mtouch_button.c: 369:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 11692  081D  0872               	movf	MTOUCH_Button_isPressed@name,w
 11693  081E  00F1               	movwf	??_MTOUCH_Button_isPressed
 11694  081F  3003               	movlw	3
 11695  0820                     u2395:	
 11696  0820  35F1               	lslf	??_MTOUCH_Button_isPressed,f
 11697  0821  3EFF               	addlw	-1
 11698  0822  1D03               	skipz
 11699  0823  2820               	goto	u2395
 11700  0824  3571               	lslf	??_MTOUCH_Button_isPressed,w
 11701  0825  3E42               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 11702  0826  0086               	movwf	6
 11703  0827  3001               	movlw	1	; select bank2/3
 11704  0828  0087               	movwf	7
 11705  0829  3002               	movlw	2
 11706  082A  0601               	xorwf	1,w
 11707  082B  1D03               	btfss	3,2
 11708  082C  282F               	goto	u2400
 11709  082D  3001               	movlw	1
 11710  082E  0008               	return
 11711  082F                     u2400:	
 11712  082F  3000               	movlw	0
 11713  0830  0008               	return
 11714  0831                     l3812:	
 11715                           
 11716                           ;mcc_generated_files/mtouch/mtouch_button.c: 371:         return 0;
 11717  0831  3000               	movlw	0
 11718  0832  0008               	return
 11719  0833                     __end_of_MTOUCH_Button_isPressed:	
 11720                           
 11721                           	psect	text74
 11722  0BB8                     __ptext74:	
 11723 ;; *************** function _MTOUCH_Button_Initialize *****************
 11724 ;; Defined at:
 11725 ;;		line 151 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11726 ;; Parameters:    Size  Location     Type
 11727 ;;  name            1    wreg     enum E3068
 11728 ;; Auto vars:     Size  Location     Type
 11729 ;;  name            1    9[COMMON] enum E3068
 11730 ;;  button          1   10[COMMON] PTR struct .
 11731 ;;		 -> mtouch_button(32), 
 11732 ;; Return value:  Size  Location     Type
 11733 ;;                  1    wreg      void 
 11734 ;; Registers used:
 11735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11736 ;; Tracked objects:
 11737 ;;		On entry : 0/0
 11738 ;;		On exit  : 0/0
 11739 ;;		Unchanged: 0/0
 11740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11741 ;;      Params:         0       0       0       0       0       0       0       0
 11742 ;;      Locals:         2       0       0       0       0       0       0       0
 11743 ;;      Temps:          2       0       0       0       0       0       0       0
 11744 ;;      Totals:         4       0       0       0       0       0       0       0
 11745 ;;Total ram usage:        4 bytes
 11746 ;; Hardware stack levels used:    1
 11747 ;; Hardware stack levels required when called:    6
 11748 ;; This function calls:
 11749 ;;		_MTOUCH_Sensor_Calibrate
 11750 ;; This function is called by:
 11751 ;;		_MTOUCH_Button_InitializeAll
 11752 ;;		_Button_Service
 11753 ;;		_Button_State_NotPressed
 11754 ;;		_Button_State_Pressed
 11755 ;; This function uses a non-reentrant model
 11756 ;;
 11757                           
 11758                           
 11759                           ;psect for function _MTOUCH_Button_Initialize
 11760  0BB8                     _MTOUCH_Button_Initialize:	
 11761                           
 11762                           ;incstack = 0
 11763                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11764                           ;MTOUCH_Button_Initialize@name stored from wreg
 11765  0BB8  00F9               	movwf	MTOUCH_Button_Initialize@name
 11766                           
 11767                           ;mcc_generated_files/mtouch/mtouch_button.c: 151: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 152: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 153:     mtouch_button_t* button = &mtouch_button[name];
 11768  0BB9  0879               	movf	MTOUCH_Button_Initialize@name,w
 11769  0BBA  00F7               	movwf	??_MTOUCH_Button_Initialize
 11770  0BBB  3003               	movlw	3
 11771  0BBC                     u4685:	
 11772  0BBC  35F7               	lslf	??_MTOUCH_Button_Initialize,f
 11773  0BBD  3EFF               	addlw	-1
 11774  0BBE  1D03               	skipz
 11775  0BBF  2BBC               	goto	u4685
 11776  0BC0  3577               	lslf	??_MTOUCH_Button_Initialize,w
 11777  0BC1  3E40               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 11778  0BC2  00F8               	movwf	??_MTOUCH_Button_Initialize+1
 11779  0BC3  0878               	movf	??_MTOUCH_Button_Initialize+1,w
 11780  0BC4  00FA               	movwf	MTOUCH_Button_Initialize@button
 11781                           
 11782                           ;mcc_generated_files/mtouch/mtouch_button.c: 155:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 11783  0BC5  087A               	movf	MTOUCH_Button_Initialize@button,w
 11784  0BC6  3E02               	addlw	2
 11785  0BC7  0086               	movwf	6
 11786  0BC8  3001               	movlw	1	; select bank2/3
 11787  0BC9  0087               	movwf	7
 11788  0BCA  0181               	clrf	1
 11789                           
 11790                           ;mcc_generated_files/mtouch/mtouch_button.c: 156:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 11791  0BCB  087A               	movf	MTOUCH_Button_Initialize@button,w
 11792  0BCC  3E05               	addlw	5
 11793  0BCD  0086               	movwf	6
 11794  0BCE  3001               	movlw	1	; select bank2/3
 11795  0BCF  0087               	movwf	7
 11796  0BD0  3000               	movlw	0
 11797  0BD1  3FC0               	movwi [0]fsr1
 11798  0BD2  3000               	movlw	0
 11799  0BD3  3FC1               	movwi [1]fsr1
 11800  0BD4  3FC2               	movwi [2]fsr1
 11801  0BD5  3FC3               	movwi [3]fsr1
 11802                           
 11803                           ;mcc_generated_files/mtouch/mtouch_button.c: 157:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 11804  0BD6  087A               	movf	MTOUCH_Button_Initialize@button,w
 11805  0BD7  3E0A               	addlw	10
 11806  0BD8  0086               	movwf	6
 11807  0BD9  3001               	movlw	1	; select bank2/3
 11808  0BDA  0087               	movwf	7
 11809  0BDB  3000               	movlw	0
 11810  0BDC  3FC0               	movwi [0]fsr1
 11811  0BDD  3FC1               	movwi [1]fsr1
 11812                           
 11813                           ;mcc_generated_files/mtouch/mtouch_button.c: 158:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 11814  0BDE  087A               	movf	MTOUCH_Button_Initialize@button,w
 11815  0BDF  3E0C               	addlw	12
 11816  0BE0  0086               	movwf	6
 11817  0BE1  3001               	movlw	1	; select bank2/3
 11818  0BE2  0087               	movwf	7
 11819  0BE3  3000               	movlw	0
 11820  0BE4  3FC0               	movwi [0]fsr1
 11821  0BE5  3FC1               	movwi [1]fsr1
 11822                           
 11823                           ;mcc_generated_files/mtouch/mtouch_button.c: 160:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 11824  0BE6  0A7A               	incf	MTOUCH_Button_Initialize@button,w
 11825  0BE7  0086               	movwf	6
 11826  0BE8  3001               	movlw	1	; select bank2/3
 11827  0BE9  0087               	movwf	7
 11828  0BEA  0801               	movf	1,w
 11829  0BEB  3196  26F5         	fcall	_MTOUCH_Sensor_Calibrate
 11830  0BED  0008               	return
 11831  0BEE                     __end_of_MTOUCH_Button_Initialize:	
 11832                           
 11833                           	psect	text75
 11834  16F5                     __ptext75:	
 11835 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 11836 ;; Defined at:
 11837 ;;		line 895 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11838 ;; Parameters:    Size  Location     Type
 11839 ;;  sensor          1    wreg     enum E2854
 11840 ;; Auto vars:     Size  Location     Type
 11841 ;;  sensor          1    6[COMMON] enum E2854
 11842 ;; Return value:  Size  Location     Type
 11843 ;;                  1    wreg      void 
 11844 ;; Registers used:
 11845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11846 ;; Tracked objects:
 11847 ;;		On entry : 0/0
 11848 ;;		On exit  : 0/0
 11849 ;;		Unchanged: 0/0
 11850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11851 ;;      Params:         0       0       0       0       0       0       0       0
 11852 ;;      Locals:         1       0       0       0       0       0       0       0
 11853 ;;      Temps:          1       0       0       0       0       0       0       0
 11854 ;;      Totals:         2       0       0       0       0       0       0       0
 11855 ;;Total ram usage:        2 bytes
 11856 ;; Hardware stack levels used:    1
 11857 ;; Hardware stack levels required when called:    5
 11858 ;; This function calls:
 11859 ;;		___bmul
 11860 ;; This function is called by:
 11861 ;;		_MTOUCH_Sensor_Initialize
 11862 ;;		_MTOUCH_Button_Initialize
 11863 ;; This function uses a non-reentrant model
 11864 ;;
 11865                           
 11866                           
 11867                           ;psect for function _MTOUCH_Sensor_Calibrate
 11868  16F5                     _MTOUCH_Sensor_Calibrate:	
 11869                           
 11870                           ;incstack = 0
 11871                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11872                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 11873  16F5  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
 11874                           
 11875                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 895: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 896: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 897:     if(sensor < 2u)
 11876  16F6  3002               	movlw	2
 11877  16F7  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 11878  16F8  1803               	skipnc
 11879  16F9  0008               	return
 11880                           
 11881                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 898:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 899:         mtouch_sensor[sensor].calibrated = 0;
 11882  16FA  3009               	movlw	9
 11883  16FB  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
 11884  16FC  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
 11885  16FD  00F1               	movwf	___bmul@multiplicand
 11886  16FE  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 11887  16FF  3196  26E4         	fcall	___bmul
 11888  1701  3ED6               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
 11889  1702  0086               	movwf	6
 11890  1703  0187               	clrf	7
 11891  1704  1101               	bcf	1,2
 11892  1705  0008               	return
 11893  1706                     __end_of_MTOUCH_Sensor_Calibrate:	
 11894                           
 11895                           	psect	text76
 11896  0704                     __ptext76:	
 11897 ;; *************** function _Button_Baseline_Update *****************
 11898 ;; Defined at:
 11899 ;;		line 473 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11900 ;; Parameters:    Size  Location     Type
 11901 ;;  button          1    wreg     PTR struct .
 11902 ;;		 -> mtouch_button(32), 
 11903 ;; Auto vars:     Size  Location     Type
 11904 ;;  button          1    7[COMMON] PTR struct .
 11905 ;;		 -> mtouch_button(32), 
 11906 ;; Return value:  Size  Location     Type
 11907 ;;                  1    wreg      void 
 11908 ;; Registers used:
 11909 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11910 ;; Tracked objects:
 11911 ;;		On entry : 0/0
 11912 ;;		On exit  : 0/0
 11913 ;;		Unchanged: 0/0
 11914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11915 ;;      Params:         0       0       0       0       0       0       0       0
 11916 ;;      Locals:         1       0       0       0       0       0       0       0
 11917 ;;      Temps:          6       0       0       0       0       0       0       0
 11918 ;;      Totals:         7       0       0       0       0       0       0       0
 11919 ;;Total ram usage:        7 bytes
 11920 ;; Hardware stack levels used:    1
 11921 ;; Hardware stack levels required when called:    4
 11922 ;; This function calls:
 11923 ;;		Nothing
 11924 ;; This function is called by:
 11925 ;;		_Button_State_Initializing
 11926 ;;		_Button_State_NotPressed
 11927 ;; This function uses a non-reentrant model
 11928 ;;
 11929                           
 11930                           
 11931                           ;psect for function _Button_Baseline_Update
 11932  0704                     _Button_Baseline_Update:	
 11933                           
 11934                           ;incstack = 0
 11935                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 11936                           ;Button_Baseline_Update@button stored from wreg
 11937  0704  00F7               	movwf	Button_Baseline_Update@button
 11938                           
 11939                           ;mcc_generated_files/mtouch/mtouch_button.c: 473: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 474: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 475:     if (GIE == (uint8_t)1)
 11940  0705  1F8B               	btfss	11,7	;volatile
 11941  0706  2F4E               	goto	l4174
 11942                           
 11943                           ;mcc_generated_files/mtouch/mtouch_button.c: 476:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 477:         GIE = (uint8_t)0;
 11944  0707  138B               	bcf	11,7	;volatile
 11945                           
 11946                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 11947  0708  0877               	movf	Button_Baseline_Update@button,w
 11948  0709  3E05               	addlw	5
 11949  070A  0086               	movwf	6
 11950  070B  3001               	movlw	1	; select bank2/3
 11951  070C  0087               	movwf	7
 11952  070D  3F40               	moviw [0]fsr1
 11953  070E  00F1               	movwf	??_Button_Baseline_Update
 11954  070F  3F41               	moviw [1]fsr1
 11955  0710  00F2               	movwf	??_Button_Baseline_Update+1
 11956  0711  3F42               	moviw [2]fsr1
 11957  0712  00F3               	movwf	??_Button_Baseline_Update+2
 11958  0713  3F43               	moviw [3]fsr1
 11959  0714  00F4               	movwf	??_Button_Baseline_Update+3
 11960  0715  3004               	movlw	4
 11961  0716                     u2945:	
 11962  0716  36F4               	lsrf	??_Button_Baseline_Update+3,f
 11963  0717  0CF3               	rrf	??_Button_Baseline_Update+2,f
 11964  0718  0CF2               	rrf	??_Button_Baseline_Update+1,f
 11965  0719  0CF1               	rrf	??_Button_Baseline_Update,f
 11966  071A  0B89               	decfsz	9,f
 11967  071B  2F16               	goto	u2945
 11968  071C  0877               	movf	Button_Baseline_Update@button,w
 11969  071D  3E05               	addlw	5
 11970  071E  0086               	movwf	6
 11971  071F  3001               	movlw	1	; select bank2/3
 11972  0720  0087               	movwf	7
 11973  0721  0871               	movf	??_Button_Baseline_Update,w
 11974  0722  0281               	subwf	1,f
 11975  0723  3141               	addfsr 1,1
 11976  0724  0872               	movf	??_Button_Baseline_Update+1,w
 11977  0725  3B81               	subwfb	1,f
 11978  0726  3141               	addfsr 1,1
 11979  0727  0873               	movf	??_Button_Baseline_Update+2,w
 11980  0728  3B81               	subwfb	1,f
 11981  0729  3141               	addfsr 1,1
 11982  072A  0874               	movf	??_Button_Baseline_Update+3,w
 11983  072B  3B81               	subwfb	1,f
 11984  072C  317D               	addfsr 1,-3
 11985                           
 11986                           ;mcc_generated_files/mtouch/mtouch_button.c: 479:         button->baseline += button->re
      +                          ading;
 11987  072D  0877               	movf	Button_Baseline_Update@button,w
 11988  072E  3E03               	addlw	3
 11989  072F  0086               	movwf	6
 11990  0730  3001               	movlw	1	; select bank2/3
 11991  0731  0087               	movwf	7
 11992  0732  3F40               	moviw [0]fsr1
 11993  0733  00F1               	movwf	??_Button_Baseline_Update
 11994  0734  3F41               	moviw [1]fsr1
 11995  0735  00F2               	movwf	??_Button_Baseline_Update+1
 11996  0736  0871               	movf	??_Button_Baseline_Update,w
 11997  0737  00F3               	movwf	??_Button_Baseline_Update+2
 11998  0738  0872               	movf	??_Button_Baseline_Update+1,w
 11999  0739  00F4               	movwf	??_Button_Baseline_Update+3
 12000  073A  01F5               	clrf	??_Button_Baseline_Update+4
 12001  073B  01F6               	clrf	??_Button_Baseline_Update+5
 12002  073C  0877               	movf	Button_Baseline_Update@button,w
 12003  073D  3E05               	addlw	5
 12004  073E  0086               	movwf	6
 12005  073F  3001               	movlw	1	; select bank2/3
 12006  0740  0087               	movwf	7
 12007  0741  0873               	movf	??_Button_Baseline_Update+2,w
 12008  0742  0781               	addwf	1,f
 12009  0743  3141               	addfsr 1,1
 12010  0744  0874               	movf	??_Button_Baseline_Update+3,w
 12011  0745  3D81               	addwfc	1,f
 12012  0746  3141               	addfsr 1,1
 12013  0747  0875               	movf	??_Button_Baseline_Update+4,w
 12014  0748  3D81               	addwfc	1,f
 12015  0749  3141               	addfsr 1,1
 12016  074A  0876               	movf	??_Button_Baseline_Update+5,w
 12017  074B  3D81               	addwfc	1,f
 12018                           
 12019                           ;mcc_generated_files/mtouch/mtouch_button.c: 480:         GIE = (uint8_t)1;
 12020  074C  178B               	bsf	11,7	;volatile
 12021                           
 12022                           ;mcc_generated_files/mtouch/mtouch_button.c: 481:     }
 12023  074D  0008               	return
 12024  074E                     l4174:	
 12025                           
 12026                           ;mcc_generated_files/mtouch/mtouch_button.c: 483:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 484:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 12027  074E  0877               	movf	Button_Baseline_Update@button,w
 12028  074F  3E05               	addlw	5
 12029  0750  0086               	movwf	6
 12030  0751  3001               	movlw	1	; select bank2/3
 12031  0752  0087               	movwf	7
 12032  0753  3F40               	moviw [0]fsr1
 12033  0754  00F1               	movwf	??_Button_Baseline_Update
 12034  0755  3F41               	moviw [1]fsr1
 12035  0756  00F2               	movwf	??_Button_Baseline_Update+1
 12036  0757  3F42               	moviw [2]fsr1
 12037  0758  00F3               	movwf	??_Button_Baseline_Update+2
 12038  0759  3F43               	moviw [3]fsr1
 12039  075A  00F4               	movwf	??_Button_Baseline_Update+3
 12040  075B  3004               	movlw	4
 12041  075C                     u2955:	
 12042  075C  36F4               	lsrf	??_Button_Baseline_Update+3,f
 12043  075D  0CF3               	rrf	??_Button_Baseline_Update+2,f
 12044  075E  0CF2               	rrf	??_Button_Baseline_Update+1,f
 12045  075F  0CF1               	rrf	??_Button_Baseline_Update,f
 12046  0760  0B89               	decfsz	9,f
 12047  0761  2F5C               	goto	u2955
 12048  0762  0877               	movf	Button_Baseline_Update@button,w
 12049  0763  3E05               	addlw	5
 12050  0764  0086               	movwf	6
 12051  0765  3001               	movlw	1	; select bank2/3
 12052  0766  0087               	movwf	7
 12053  0767  0871               	movf	??_Button_Baseline_Update,w
 12054  0768  0281               	subwf	1,f
 12055  0769  3141               	addfsr 1,1
 12056  076A  0872               	movf	??_Button_Baseline_Update+1,w
 12057  076B  3B81               	subwfb	1,f
 12058  076C  3141               	addfsr 1,1
 12059  076D  0873               	movf	??_Button_Baseline_Update+2,w
 12060  076E  3B81               	subwfb	1,f
 12061  076F  3141               	addfsr 1,1
 12062  0770  0874               	movf	??_Button_Baseline_Update+3,w
 12063  0771  3B81               	subwfb	1,f
 12064  0772  317D               	addfsr 1,-3
 12065                           
 12066                           ;mcc_generated_files/mtouch/mtouch_button.c: 485:         button->baseline += button->re
      +                          ading;
 12067  0773  0877               	movf	Button_Baseline_Update@button,w
 12068  0774  3E03               	addlw	3
 12069  0775  0086               	movwf	6
 12070  0776  3001               	movlw	1	; select bank2/3
 12071  0777  0087               	movwf	7
 12072  0778  3F40               	moviw [0]fsr1
 12073  0779  00F1               	movwf	??_Button_Baseline_Update
 12074  077A  3F41               	moviw [1]fsr1
 12075  077B  00F2               	movwf	??_Button_Baseline_Update+1
 12076  077C  0871               	movf	??_Button_Baseline_Update,w
 12077  077D  00F3               	movwf	??_Button_Baseline_Update+2
 12078  077E  0872               	movf	??_Button_Baseline_Update+1,w
 12079  077F  00F4               	movwf	??_Button_Baseline_Update+3
 12080  0780  01F5               	clrf	??_Button_Baseline_Update+4
 12081  0781  01F6               	clrf	??_Button_Baseline_Update+5
 12082  0782  0877               	movf	Button_Baseline_Update@button,w
 12083  0783  3E05               	addlw	5
 12084  0784  0086               	movwf	6
 12085  0785  3001               	movlw	1	; select bank2/3
 12086  0786  0087               	movwf	7
 12087  0787  0873               	movf	??_Button_Baseline_Update+2,w
 12088  0788  0781               	addwf	1,f
 12089  0789  3141               	addfsr 1,1
 12090  078A  0874               	movf	??_Button_Baseline_Update+3,w
 12091  078B  3D81               	addwfc	1,f
 12092  078C  3141               	addfsr 1,1
 12093  078D  0875               	movf	??_Button_Baseline_Update+4,w
 12094  078E  3D81               	addwfc	1,f
 12095  078F  3141               	addfsr 1,1
 12096  0790  0876               	movf	??_Button_Baseline_Update+5,w
 12097  0791  3D81               	addwfc	1,f
 12098  0792  0008               	return
 12099  0793                     __end_of_Button_Baseline_Update:	
 12100                           
 12101                           	psect	text77
 12102  0A91                     __ptext77:	
 12103 ;; *************** function _Button_Baseline_Initialize *****************
 12104 ;; Defined at:
 12105 ;;		line 467 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12106 ;; Parameters:    Size  Location     Type
 12107 ;;  button          1    wreg     PTR struct .
 12108 ;;		 -> mtouch_button(32), 
 12109 ;; Auto vars:     Size  Location     Type
 12110 ;;  button          1    9[COMMON] PTR struct .
 12111 ;;		 -> mtouch_button(32), 
 12112 ;; Return value:  Size  Location     Type
 12113 ;;                  1    wreg      void 
 12114 ;; Registers used:
 12115 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12116 ;; Tracked objects:
 12117 ;;		On entry : 0/0
 12118 ;;		On exit  : 0/0
 12119 ;;		Unchanged: 0/0
 12120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12121 ;;      Params:         0       0       0       0       0       0       0       0
 12122 ;;      Locals:         1       0       0       0       0       0       0       0
 12123 ;;      Temps:          0       4       0       0       0       0       0       0
 12124 ;;      Totals:         1       4       0       0       0       0       0       0
 12125 ;;Total ram usage:        5 bytes
 12126 ;; Hardware stack levels used:    1
 12127 ;; Hardware stack levels required when called:    6
 12128 ;; This function calls:
 12129 ;;		_MTOUCH_Sensor_RawSample_Get
 12130 ;; This function is called by:
 12131 ;;		_Button_State_Initializing
 12132 ;; This function uses a non-reentrant model
 12133 ;;
 12134                           
 12135                           
 12136                           ;psect for function _Button_Baseline_Initialize
 12137  0A91                     _Button_Baseline_Initialize:	
 12138                           
 12139                           ;incstack = 0
 12140                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12141                           ;Button_Baseline_Initialize@button stored from wreg
 12142  0A91  00F9               	movwf	Button_Baseline_Initialize@button
 12143                           
 12144                           ;mcc_generated_files/mtouch/mtouch_button.c: 467: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 468: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 469:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 12145  0A92  0A79               	incf	Button_Baseline_Initialize@button,w
 12146  0A93  0086               	movwf	6
 12147  0A94  3001               	movlw	1	; select bank2/3
 12148  0A95  0087               	movwf	7
 12149  0A96  0801               	movf	1,w
 12150  0A97  3197  27B9  318A   	fcall	_MTOUCH_Sensor_RawSample_Get
 12151  0A9A  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12152  0A9B  0020               	movlb	0	; select bank0
 12153  0A9C  00A0               	movwf	??_Button_Baseline_Initialize
 12154  0A9D  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12155  0A9E  00A1               	movwf	??_Button_Baseline_Initialize+1
 12156  0A9F  01A2               	clrf	??_Button_Baseline_Initialize+2
 12157  0AA0  01A3               	clrf	??_Button_Baseline_Initialize+3
 12158  0AA1  0879               	movf	Button_Baseline_Initialize@button,w
 12159  0AA2  3E05               	addlw	5
 12160  0AA3  0086               	movwf	6
 12161  0AA4  3001               	movlw	1	; select bank2/3
 12162  0AA5  0087               	movwf	7
 12163  0AA6  0820               	movf	??_Button_Baseline_Initialize,w
 12164  0AA7  3FC0               	movwi [0]fsr1
 12165  0AA8  0821               	movf	??_Button_Baseline_Initialize+1,w
 12166  0AA9  3FC1               	movwi [1]fsr1
 12167  0AAA  0822               	movf	??_Button_Baseline_Initialize+2,w
 12168  0AAB  3FC2               	movwi [2]fsr1
 12169  0AAC  0823               	movf	??_Button_Baseline_Initialize+3,w
 12170  0AAD  3FC3               	movwi [3]fsr1
 12171                           
 12172                           ;mcc_generated_files/mtouch/mtouch_button.c: 470:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 12173  0AAE  0879               	movf	Button_Baseline_Initialize@button,w
 12174  0AAF  3E05               	addlw	5
 12175  0AB0  0086               	movwf	6
 12176  0AB1  3001               	movlw	1	; select bank2/3
 12177  0AB2  0087               	movwf	7
 12178  0AB3  3004               	movlw	4
 12179  0AB4                     u4695:	
 12180  0AB4  3581               	lslf	1,f
 12181  0AB5  3141               	addfsr 1,1
 12182  0AB6  0D81               	rlf	1,f
 12183  0AB7  3141               	addfsr 1,1
 12184  0AB8  0D81               	rlf	1,f
 12185  0AB9  3141               	addfsr 1,1
 12186  0ABA  0D81               	rlf	1,f
 12187  0ABB  317D               	addfsr 1,-3
 12188  0ABC  0B89               	decfsz	9,f
 12189  0ABD  2AB4               	goto	u4695
 12190  0ABE  0008               	return
 12191  0ABF                     __end_of_Button_Baseline_Initialize:	
 12192                           
 12193                           	psect	text78
 12194  168A                     __ptext78:	
 12195 ;; *************** function _Button_Reading_Update *****************
 12196 ;; Defined at:
 12197 ;;		line 440 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12198 ;; Parameters:    Size  Location     Type
 12199 ;;  button          1    wreg     PTR struct .
 12200 ;;		 -> mtouch_button(32), 
 12201 ;; Auto vars:     Size  Location     Type
 12202 ;;  button          1    0[BANK0 ] PTR struct .
 12203 ;;		 -> mtouch_button(32), 
 12204 ;; Return value:  Size  Location     Type
 12205 ;;                  1    wreg      void 
 12206 ;; Registers used:
 12207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12208 ;; Tracked objects:
 12209 ;;		On entry : 0/0
 12210 ;;		On exit  : 0/0
 12211 ;;		Unchanged: 0/0
 12212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12213 ;;      Params:         0       0       0       0       0       0       0       0
 12214 ;;      Locals:         0       1       0       0       0       0       0       0
 12215 ;;      Temps:          0       0       0       0       0       0       0       0
 12216 ;;      Totals:         0       1       0       0       0       0       0       0
 12217 ;;Total ram usage:        1 bytes
 12218 ;; Hardware stack levels used:    1
 12219 ;; Hardware stack levels required when called:    7
 12220 ;; This function calls:
 12221 ;;		_Button_Reading_Update_Helper
 12222 ;; This function is called by:
 12223 ;;		_Button_Service
 12224 ;; This function uses a non-reentrant model
 12225 ;;
 12226                           
 12227                           
 12228                           ;psect for function _Button_Reading_Update
 12229  168A                     _Button_Reading_Update:	
 12230                           
 12231                           ;incstack = 0
 12232                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12233                           ;Button_Reading_Update@button stored from wreg
 12234  168A  0020               	movlb	0	; select bank0
 12235  168B  00A0               	movwf	Button_Reading_Update@button
 12236                           
 12237                           ;mcc_generated_files/mtouch/mtouch_button.c: 440: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 441: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 442:     if (GIE == (uint8_t) 1)
 12238  168C  1F8B               	btfss	11,7	;volatile
 12239  168D  2E94               	goto	l5834
 12240                           
 12241                           ;mcc_generated_files/mtouch/mtouch_button.c: 443:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 444:         GIE = (uint8_t) 0;
 12242  168E  138B               	bcf	11,7	;volatile
 12243                           
 12244                           ;mcc_generated_files/mtouch/mtouch_button.c: 445:         Button_Reading_Update_Helper(b
      +                          utton);
 12245  168F  0820               	movf	Button_Reading_Update@button,w
 12246  1690  318C  2466         	fcall	_Button_Reading_Update_Helper
 12247                           
 12248                           ;mcc_generated_files/mtouch/mtouch_button.c: 446:         GIE = (uint8_t) 1;
 12249  1692  178B               	bsf	11,7	;volatile
 12250                           
 12251                           ;mcc_generated_files/mtouch/mtouch_button.c: 447:     }
 12252  1693  0008               	return
 12253  1694                     l5834:	
 12254                           
 12255                           ;mcc_generated_files/mtouch/mtouch_button.c: 449:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 450:         Button_Reading_Update_Helper(button);
 12256  1694  0820               	movf	Button_Reading_Update@button,w
 12257  1695  318C  2466         	fcall	_Button_Reading_Update_Helper
 12258  1697  0008               	return
 12259  1698                     __end_of_Button_Reading_Update:	
 12260                           
 12261                           	psect	text79
 12262  0C66                     __ptext79:	
 12263 ;; *************** function _Button_Reading_Update_Helper *****************
 12264 ;; Defined at:
 12265 ;;		line 454 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12266 ;; Parameters:    Size  Location     Type
 12267 ;;  button          1    wreg     PTR struct .
 12268 ;;		 -> mtouch_button(32), 
 12269 ;; Auto vars:     Size  Location     Type
 12270 ;;  button          1   11[COMMON] PTR struct .
 12271 ;;		 -> mtouch_button(32), 
 12272 ;; Return value:  Size  Location     Type
 12273 ;;                  1    wreg      void 
 12274 ;; Registers used:
 12275 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12276 ;; Tracked objects:
 12277 ;;		On entry : 0/0
 12278 ;;		On exit  : 0/0
 12279 ;;		Unchanged: 0/0
 12280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12281 ;;      Params:         0       0       0       0       0       0       0       0
 12282 ;;      Locals:         1       0       0       0       0       0       0       0
 12283 ;;      Temps:          2       0       0       0       0       0       0       0
 12284 ;;      Totals:         3       0       0       0       0       0       0       0
 12285 ;;Total ram usage:        3 bytes
 12286 ;; Hardware stack levels used:    1
 12287 ;; Hardware stack levels required when called:    6
 12288 ;; This function calls:
 12289 ;;		_MTOUCH_Sensor_RawSample_Get
 12290 ;; This function is called by:
 12291 ;;		_Button_Reading_Update
 12292 ;; This function uses a non-reentrant model
 12293 ;;
 12294                           
 12295                           
 12296                           ;psect for function _Button_Reading_Update_Helper
 12297  0C66                     _Button_Reading_Update_Helper:	
 12298                           
 12299                           ;incstack = 0
 12300                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12301                           ;Button_Reading_Update_Helper@button stored from wreg
 12302  0C66  00FB               	movwf	Button_Reading_Update_Helper@button
 12303                           
 12304                           ;mcc_generated_files/mtouch/mtouch_button.c: 454: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 455: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 456:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 12305  0C67  087B               	movf	Button_Reading_Update_Helper@button,w
 12306  0C68  3E02               	addlw	2
 12307  0C69  0086               	movwf	6
 12308  0C6A  3001               	movlw	1	; select bank2/3
 12309  0C6B  0087               	movwf	7
 12310  0C6C  0801               	movf	1,w
 12311  0C6D  1903               	btfsc	3,2
 12312  0C6E  2CA2               	goto	l5736
 12313                           
 12314                           ;mcc_generated_files/mtouch/mtouch_button.c: 457:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 458:         button->reading -= button->reading>>((uint8_t)2u);
 12315  0C6F  087B               	movf	Button_Reading_Update_Helper@button,w
 12316  0C70  3E03               	addlw	3
 12317  0C71  0086               	movwf	6
 12318  0C72  3001               	movlw	1	; select bank2/3
 12319  0C73  0087               	movwf	7
 12320  0C74  3F40               	moviw [0]fsr1
 12321  0C75  00F9               	movwf	??_Button_Reading_Update_Helper
 12322  0C76  3F41               	moviw [1]fsr1
 12323  0C77  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12324  0C78  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12325  0C79  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12326  0C7A  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12327  0C7B  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12328  0C7C  087B               	movf	Button_Reading_Update_Helper@button,w
 12329  0C7D  3E03               	addlw	3
 12330  0C7E  0086               	movwf	6
 12331  0C7F  3001               	movlw	1	; select bank2/3
 12332  0C80  0087               	movwf	7
 12333  0C81  0879               	movf	??_Button_Reading_Update_Helper,w
 12334  0C82  0281               	subwf	1,f
 12335  0C83  3141               	addfsr 1,1
 12336  0C84  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12337  0C85  3B81               	subwfb	1,f
 12338  0C86  317F               	addfsr 1,-1
 12339                           
 12340                           ;mcc_generated_files/mtouch/mtouch_button.c: 459:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 12341  0C87  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12342  0C88  0086               	movwf	6
 12343  0C89  3001               	movlw	1	; select bank2/3
 12344  0C8A  0087               	movwf	7
 12345  0C8B  0801               	movf	1,w
 12346  0C8C  3197  27B9         	fcall	_MTOUCH_Sensor_RawSample_Get
 12347  0C8E  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12348  0C8F  00F9               	movwf	??_Button_Reading_Update_Helper
 12349  0C90  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12350  0C91  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12351  0C92  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12352  0C93  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12353  0C94  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12354  0C95  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12355  0C96  087B               	movf	Button_Reading_Update_Helper@button,w
 12356  0C97  3E03               	addlw	3
 12357  0C98  0086               	movwf	6
 12358  0C99  3001               	movlw	1	; select bank2/3
 12359  0C9A  0087               	movwf	7
 12360  0C9B  0879               	movf	??_Button_Reading_Update_Helper,w
 12361  0C9C  0781               	addwf	1,f
 12362  0C9D  3141               	addfsr 1,1
 12363  0C9E  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12364  0C9F  3D81               	addwfc	1,f
 12365  0CA0  317F               	addfsr 1,-1
 12366                           
 12367                           ;mcc_generated_files/mtouch/mtouch_button.c: 460:     }
 12368  0CA1  0008               	return
 12369  0CA2                     l5736:	
 12370                           
 12371                           ;mcc_generated_files/mtouch/mtouch_button.c: 462:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 463:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 12372  0CA2  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12373  0CA3  0086               	movwf	6
 12374  0CA4  3001               	movlw	1	; select bank2/3
 12375  0CA5  0087               	movwf	7
 12376  0CA6  0801               	movf	1,w
 12377  0CA7  3197  27B9         	fcall	_MTOUCH_Sensor_RawSample_Get
 12378  0CA9  087B               	movf	Button_Reading_Update_Helper@button,w
 12379  0CAA  3E03               	addlw	3
 12380  0CAB  0086               	movwf	6
 12381  0CAC  3001               	movlw	1	; select bank2/3
 12382  0CAD  0087               	movwf	7
 12383  0CAE  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12384  0CAF  3FC0               	movwi [0]fsr1
 12385  0CB0  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12386  0CB1  3FC1               	movwi [1]fsr1
 12387  0CB2  0008               	return
 12388  0CB3                     __end_of_Button_Reading_Update_Helper:	
 12389                           
 12390                           	psect	text80
 12391  17B9                     __ptext80:	
 12392 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 12393 ;; Defined at:
 12394 ;;		line 783 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12395 ;; Parameters:    Size  Location     Type
 12396 ;;  name            1    wreg     enum E2854
 12397 ;; Auto vars:     Size  Location     Type
 12398 ;;  name            1    8[COMMON] enum E2854
 12399 ;; Return value:  Size  Location     Type
 12400 ;;                  2    5[COMMON] unsigned short 
 12401 ;; Registers used:
 12402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12403 ;; Tracked objects:
 12404 ;;		On entry : 0/0
 12405 ;;		On exit  : 0/0
 12406 ;;		Unchanged: 0/0
 12407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12408 ;;      Params:         2       0       0       0       0       0       0       0
 12409 ;;      Locals:         1       0       0       0       0       0       0       0
 12410 ;;      Temps:          1       0       0       0       0       0       0       0
 12411 ;;      Totals:         4       0       0       0       0       0       0       0
 12412 ;;Total ram usage:        4 bytes
 12413 ;; Hardware stack levels used:    1
 12414 ;; Hardware stack levels required when called:    5
 12415 ;; This function calls:
 12416 ;;		___bmul
 12417 ;; This function is called by:
 12418 ;;		_Button_Reading_Update_Helper
 12419 ;;		_Button_Baseline_Initialize
 12420 ;; This function uses a non-reentrant model
 12421 ;;
 12422                           
 12423                           
 12424                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 12425  17B9                     _MTOUCH_Sensor_RawSample_Get:	
 12426                           
 12427                           ;incstack = 0
 12428                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12429                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 12430  17B9  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
 12431                           
 12432                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 783: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          784: {;mcc_generated_files/mtouch/mtouch_sensor.c: 785:     if (name < 2u)
 12433  17BA  3002               	movlw	2
 12434  17BB  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 12435  17BC  1803               	skipnc
 12436  17BD  2FCD               	goto	l5642
 12437                           
 12438                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 786:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 787:         return mtouch_sensor[name].rawSample;
 12439  17BE  3009               	movlw	9
 12440  17BF  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
 12441  17C0  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 12442  17C1  00F1               	movwf	___bmul@multiplicand
 12443  17C2  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 12444  17C3  3196  26E4         	fcall	___bmul
 12445  17C5  3ED4               	addlw	(low ((_mtouch_sensor| 0+6)))& (0+255)
 12446  17C6  0086               	movwf	6
 12447  17C7  0187               	clrf	7
 12448  17C8  3F40               	moviw [0]fsr1
 12449  17C9  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
 12450  17CA  3F41               	moviw [1]fsr1
 12451  17CB  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 12452  17CC  0008               	return
 12453  17CD                     l5642:	
 12454                           
 12455                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 790:         return (mtouch_sensor_sample_t
      +                          )0;
 12456  17CD  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
 12457  17CE  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 12458  17CF  0008               	return
 12459  17D0                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 12460                           
 12461                           	psect	text81
 12462  16E4                     __ptext81:	
 12463 ;; *************** function ___bmul *****************
 12464 ;; Defined at:
 12465 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 12466 ;; Parameters:    Size  Location     Type
 12467 ;;  multiplier      1    wreg     unsigned char 
 12468 ;;  multiplicand    1    1[COMMON] unsigned char 
 12469 ;; Auto vars:     Size  Location     Type
 12470 ;;  multiplier      1    4[COMMON] unsigned char 
 12471 ;;  product         1    3[COMMON] unsigned char 
 12472 ;; Return value:  Size  Location     Type
 12473 ;;                  1    wreg      unsigned char 
 12474 ;; Registers used:
 12475 ;;		wreg, status,2, status,0
 12476 ;; Tracked objects:
 12477 ;;		On entry : 0/0
 12478 ;;		On exit  : 0/0
 12479 ;;		Unchanged: 0/0
 12480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12481 ;;      Params:         1       0       0       0       0       0       0       0
 12482 ;;      Locals:         2       0       0       0       0       0       0       0
 12483 ;;      Temps:          1       0       0       0       0       0       0       0
 12484 ;;      Totals:         4       0       0       0       0       0       0       0
 12485 ;;Total ram usage:        4 bytes
 12486 ;; Hardware stack levels used:    1
 12487 ;; Hardware stack levels required when called:    4
 12488 ;; This function calls:
 12489 ;;		Nothing
 12490 ;; This function is called by:
 12491 ;;		_MTOUCH_Sensor_Initialize
 12492 ;;		_MTOUCH_Sensor_RawSample_Get
 12493 ;;		_MTOUCH_Sensor_Enable
 12494 ;;		_MTOUCH_Sensor_Calibrate
 12495 ;;		_MTOUCH_Sensor_isCalibrated
 12496 ;;		_MTOUCH_Sensor_wasSampled
 12497 ;;		_MTOUCH_Sensor_isAnySensorActive
 12498 ;;		_MTOUCH_Sensor_Disable
 12499 ;;		_MTOUCH_Sensor_isEnabled
 12500 ;;		_MTOUCH_Sensor_isActive
 12501 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 12502 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 12503 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 12504 ;;		_MTOUCH_Sensor_Oversampling_Get
 12505 ;;		_MTOUCH_Sensor_Oversampling_Set
 12506 ;; This function uses a non-reentrant model
 12507 ;;
 12508                           
 12509                           
 12510                           ;psect for function ___bmul
 12511  16E4                     ___bmul:	
 12512                           
 12513                           ;incstack = 0
 12514                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12515                           ;___bmul@multiplier stored from wreg
 12516  16E4  00F4               	movwf	___bmul@multiplier
 12517  16E5  01F3               	clrf	___bmul@product
 12518  16E6                     l5416:	
 12519  16E6  1C74               	btfss	___bmul@multiplier,0
 12520  16E7  2EEC               	goto	l5420
 12521  16E8  0871               	movf	___bmul@multiplicand,w
 12522  16E9  00F2               	movwf	??___bmul
 12523  16EA  0872               	movf	??___bmul,w
 12524  16EB  07F3               	addwf	___bmul@product,f
 12525  16EC                     l5420:	
 12526  16EC  1003               	clrc
 12527  16ED  0DF1               	rlf	___bmul@multiplicand,f
 12528  16EE  1003               	clrc
 12529  16EF  0CF4               	rrf	___bmul@multiplier,f
 12530  16F0  0874               	movf	___bmul@multiplier,w
 12531  16F1  1D03               	btfss	3,2
 12532  16F2  2EE6               	goto	l5416
 12533  16F3  0873               	movf	___bmul@product,w
 12534  16F4  0008               	return
 12535  16F5                     __end_of___bmul:	
 12536                           
 12537                           	psect	text82
 12538  0EEF                     __ptext82:	
 12539 ;; *************** function _Button_Deviation_Update *****************
 12540 ;; Defined at:
 12541 ;;		line 391 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12542 ;; Parameters:    Size  Location     Type
 12543 ;;  button          1    wreg     PTR struct .
 12544 ;;		 -> mtouch_button(32), 
 12545 ;; Auto vars:     Size  Location     Type
 12546 ;;  button          1    0[BANK0 ] PTR struct .
 12547 ;;		 -> mtouch_button(32), 
 12548 ;;  deviation       4    1[BANK0 ] long 
 12549 ;; Return value:  Size  Location     Type
 12550 ;;                  1    wreg      void 
 12551 ;; Registers used:
 12552 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12553 ;; Tracked objects:
 12554 ;;		On entry : 0/0
 12555 ;;		On exit  : 0/0
 12556 ;;		Unchanged: 0/0
 12557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12558 ;;      Params:         0       0       0       0       0       0       0       0
 12559 ;;      Locals:         0       5       0       0       0       0       0       0
 12560 ;;      Temps:         10       0       0       0       0       0       0       0
 12561 ;;      Totals:        10       5       0       0       0       0       0       0
 12562 ;;Total ram usage:       15 bytes
 12563 ;; Hardware stack levels used:    1
 12564 ;; Hardware stack levels required when called:    4
 12565 ;; This function calls:
 12566 ;;		Nothing
 12567 ;; This function is called by:
 12568 ;;		_Button_Service
 12569 ;; This function uses a non-reentrant model
 12570 ;;
 12571                           
 12572                           
 12573                           ;psect for function _Button_Deviation_Update
 12574  0EEF                     _Button_Deviation_Update:	
 12575                           
 12576                           ;incstack = 0
 12577                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12578                           ;Button_Deviation_Update@button stored from wreg
 12579  0EEF  0020               	movlb	0	; select bank0
 12580  0EF0  00A0               	movwf	Button_Deviation_Update@button
 12581                           
 12582                           ;mcc_generated_files/mtouch/mtouch_button.c: 391: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 392: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 393:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 395:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 12583  0EF1  0820               	movf	Button_Deviation_Update@button,w
 12584  0EF2  3E05               	addlw	5
 12585  0EF3  0086               	movwf	6
 12586  0EF4  3001               	movlw	1	; select bank2/3
 12587  0EF5  0087               	movwf	7
 12588  0EF6  3F40               	moviw [0]fsr1
 12589  0EF7  00F1               	movwf	??_Button_Deviation_Update
 12590  0EF8  3F41               	moviw [1]fsr1
 12591  0EF9  00F2               	movwf	??_Button_Deviation_Update+1
 12592  0EFA  3F42               	moviw [2]fsr1
 12593  0EFB  00F3               	movwf	??_Button_Deviation_Update+2
 12594  0EFC  3F43               	moviw [3]fsr1
 12595  0EFD  00F4               	movwf	??_Button_Deviation_Update+3
 12596  0EFE  3004               	movlw	4
 12597  0EFF                     u3185:	
 12598  0EFF  36F4               	lsrf	??_Button_Deviation_Update+3,f
 12599  0F00  0CF3               	rrf	??_Button_Deviation_Update+2,f
 12600  0F01  0CF2               	rrf	??_Button_Deviation_Update+1,f
 12601  0F02  0CF1               	rrf	??_Button_Deviation_Update,f
 12602  0F03  0B89               	decfsz	9,f
 12603  0F04  2EFF               	goto	u3185
 12604  0F05  0820               	movf	Button_Deviation_Update@button,w
 12605  0F06  3E03               	addlw	3
 12606  0F07  0086               	movwf	6
 12607  0F08  3001               	movlw	1	; select bank2/3
 12608  0F09  0087               	movwf	7
 12609  0F0A  3F40               	moviw [0]fsr1
 12610  0F0B  00F5               	movwf	??_Button_Deviation_Update+4
 12611  0F0C  3F41               	moviw [1]fsr1
 12612  0F0D  00F6               	movwf	??_Button_Deviation_Update+5
 12613  0F0E  0875               	movf	??_Button_Deviation_Update+4,w
 12614  0F0F  00F7               	movwf	??_Button_Deviation_Update+6
 12615  0F10  0876               	movf	??_Button_Deviation_Update+5,w
 12616  0F11  00F8               	movwf	??_Button_Deviation_Update+7
 12617  0F12  01F9               	clrf	??_Button_Deviation_Update+8
 12618  0F13  01FA               	clrf	??_Button_Deviation_Update+9
 12619  0F14  0871               	movf	??_Button_Deviation_Update,w
 12620  0F15  02F7               	subwf	??_Button_Deviation_Update+6,f
 12621  0F16  0872               	movf	??_Button_Deviation_Update+1,w
 12622  0F17  3BF8               	subwfb	??_Button_Deviation_Update+7,f
 12623  0F18  0873               	movf	??_Button_Deviation_Update+2,w
 12624  0F19  3BF9               	subwfb	??_Button_Deviation_Update+8,f
 12625  0F1A  0874               	movf	??_Button_Deviation_Update+3,w
 12626  0F1B  3BFA               	subwfb	??_Button_Deviation_Update+9,f
 12627  0F1C  087A               	movf	??_Button_Deviation_Update+9,w
 12628  0F1D  00A4               	movwf	Button_Deviation_Update@deviation+3
 12629  0F1E  0879               	movf	??_Button_Deviation_Update+8,w
 12630  0F1F  00A3               	movwf	Button_Deviation_Update@deviation+2
 12631  0F20  0878               	movf	??_Button_Deviation_Update+7,w
 12632  0F21  00A2               	movwf	Button_Deviation_Update@deviation+1
 12633  0F22  0877               	movf	??_Button_Deviation_Update+6,w
 12634  0F23  00A1               	movwf	Button_Deviation_Update@deviation
 12635                           
 12636                           ;mcc_generated_files/mtouch/mtouch_button.c: 398:     deviation = deviation >> (button->
      +                          scaling);
 12637  0F24  0821               	movf	Button_Deviation_Update@deviation,w
 12638  0F25  00F1               	movwf	??_Button_Deviation_Update
 12639  0F26  0822               	movf	Button_Deviation_Update@deviation+1,w
 12640  0F27  00F2               	movwf	??_Button_Deviation_Update+1
 12641  0F28  0823               	movf	Button_Deviation_Update@deviation+2,w
 12642  0F29  00F3               	movwf	??_Button_Deviation_Update+2
 12643  0F2A  0824               	movf	Button_Deviation_Update@deviation+3,w
 12644  0F2B  00F4               	movwf	??_Button_Deviation_Update+3
 12645  0F2C  0820               	movf	Button_Deviation_Update@button,w
 12646  0F2D  3E0F               	addlw	15
 12647  0F2E  0086               	movwf	6
 12648  0F2F  3001               	movlw	1	; select bank2/3
 12649  0F30  0087               	movwf	7
 12650  0F31  0A01               	incf	1,w
 12651  0F32  2F37               	goto	u3190
 12652  0F33                     u3195:	
 12653  0F33  37F4               	asrf	??_Button_Deviation_Update+3,f
 12654  0F34  0CF3               	rrf	??_Button_Deviation_Update+2,f
 12655  0F35  0CF2               	rrf	??_Button_Deviation_Update+1,f
 12656  0F36  0CF1               	rrf	??_Button_Deviation_Update,f
 12657  0F37                     u3190:	
 12658  0F37  0B89               	decfsz	9,f
 12659  0F38  2F33               	goto	u3195
 12660  0F39  0874               	movf	??_Button_Deviation_Update+3,w
 12661  0F3A  00A4               	movwf	Button_Deviation_Update@deviation+3
 12662  0F3B  0873               	movf	??_Button_Deviation_Update+2,w
 12663  0F3C  00A3               	movwf	Button_Deviation_Update@deviation+2
 12664  0F3D  0872               	movf	??_Button_Deviation_Update+1,w
 12665  0F3E  00A2               	movwf	Button_Deviation_Update@deviation+1
 12666  0F3F  0871               	movf	??_Button_Deviation_Update,w
 12667  0F40  00A1               	movwf	Button_Deviation_Update@deviation
 12668                           
 12669                           ;mcc_generated_files/mtouch/mtouch_button.c: 401:     if (deviation > ((0x7f)))
 12670  0F41  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 12671  0F42  2F58               	goto	l4328
 12672  0F43  0824               	movf	Button_Deviation_Update@deviation+3,w
 12673  0F44  1D03               	btfss	3,2
 12674  0F45  2F50               	goto	l4326
 12675  0F46  0823               	movf	Button_Deviation_Update@deviation+2,w
 12676  0F47  1D03               	btfss	3,2
 12677  0F48  2F50               	goto	l4326
 12678  0F49  0822               	movf	Button_Deviation_Update@deviation+1,w
 12679  0F4A  1D03               	btfss	3,2
 12680  0F4B  2F50               	goto	l4326
 12681  0F4C  3080               	movlw	128
 12682  0F4D  0221               	subwf	Button_Deviation_Update@deviation,w
 12683  0F4E  1C03               	btfss	3,0
 12684  0F4F  2F58               	goto	l4328
 12685  0F50                     l4326:	
 12686                           
 12687                           ;mcc_generated_files/mtouch/mtouch_button.c: 402:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 403:         deviation = ((0x7f));
 12688  0F50  3000               	movlw	0
 12689  0F51  00A4               	movwf	Button_Deviation_Update@deviation+3
 12690  0F52  3000               	movlw	0
 12691  0F53  00A3               	movwf	Button_Deviation_Update@deviation+2
 12692  0F54  3000               	movlw	0
 12693  0F55  00A2               	movwf	Button_Deviation_Update@deviation+1
 12694  0F56  307F               	movlw	127
 12695  0F57  00A1               	movwf	Button_Deviation_Update@deviation
 12696  0F58                     l4328:	
 12697                           
 12698                           ;mcc_generated_files/mtouch/mtouch_button.c: 405:     if (deviation < ((-1-0x7f)))
 12699  0F58  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 12700  0F59  2F6C               	goto	l4332
 12701  0F5A  3080               	movlw	128
 12702  0F5B  0221               	subwf	Button_Deviation_Update@deviation,w
 12703  0F5C  30FF               	movlw	255
 12704  0F5D  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 12705  0F5E  30FF               	movlw	255
 12706  0F5F  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 12707  0F60  30FF               	movlw	255
 12708  0F61  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 12709  0F62  1803               	btfsc	3,0
 12710  0F63  2F6C               	goto	l4332
 12711                           
 12712                           ;mcc_generated_files/mtouch/mtouch_button.c: 406:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 407:         deviation = ((-1-0x7f));
 12713  0F64  30FF               	movlw	255
 12714  0F65  00A4               	movwf	Button_Deviation_Update@deviation+3
 12715  0F66  30FF               	movlw	255
 12716  0F67  00A3               	movwf	Button_Deviation_Update@deviation+2
 12717  0F68  30FF               	movlw	255
 12718  0F69  00A2               	movwf	Button_Deviation_Update@deviation+1
 12719  0F6A  3080               	movlw	128
 12720  0F6B  00A1               	movwf	Button_Deviation_Update@deviation
 12721  0F6C                     l4332:	
 12722                           
 12723                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 12724  0F6C  0821               	movf	Button_Deviation_Update@deviation,w
 12725  0F6D  00F1               	movwf	??_Button_Deviation_Update
 12726  0F6E  0820               	movf	Button_Deviation_Update@button,w
 12727  0F6F  3E09               	addlw	9
 12728  0F70  0086               	movwf	6
 12729  0F71  3001               	movlw	1	; select bank2/3
 12730  0F72  0087               	movwf	7
 12731  0F73  0871               	movf	??_Button_Deviation_Update,w
 12732  0F74  0081               	movwf	1
 12733  0F75  0008               	return
 12734  0F76                     __end_of_Button_Deviation_Update:	
 12735                           
 12736                           	psect	text83
 12737  15F4                     __ptext83:	
 12738 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 12739 ;; Defined at:
 12740 ;;		line 520 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12741 ;; Parameters:    Size  Location     Type
 12742 ;;  callback        2    1[COMMON] PTR FTN(enum E3068,)void
 12743 ;;		 -> myButtonPressedCallback(1), 
 12744 ;; Auto vars:     Size  Location     Type
 12745 ;;		None
 12746 ;; Return value:  Size  Location     Type
 12747 ;;                  1    wreg      void 
 12748 ;; Registers used:
 12749 ;;		wreg
 12750 ;; Tracked objects:
 12751 ;;		On entry : 0/0
 12752 ;;		On exit  : 0/0
 12753 ;;		Unchanged: 0/0
 12754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12755 ;;      Params:         2       0       0       0       0       0       0       0
 12756 ;;      Locals:         0       0       0       0       0       0       0       0
 12757 ;;      Temps:          0       0       0       0       0       0       0       0
 12758 ;;      Totals:         2       0       0       0       0       0       0       0
 12759 ;;Total ram usage:        2 bytes
 12760 ;; Hardware stack levels used:    1
 12761 ;; Hardware stack levels required when called:    4
 12762 ;; This function calls:
 12763 ;;		Nothing
 12764 ;; This function is called by:
 12765 ;;		_main
 12766 ;; This function uses a non-reentrant model
 12767 ;;
 12768                           
 12769                           
 12770                           ;psect for function _MTOUCH_Button_SetPressedCallback
 12771  15F4                     _MTOUCH_Button_SetPressedCallback:	
 12772                           
 12773                           ;mcc_generated_files/mtouch/mtouch_button.c: 520: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          521: {;mcc_generated_files/mtouch/mtouch_button.c: 522:     callback_pressed = callback;
 12774                           
 12775                           ;incstack = 0
 12776                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 12777  15F4  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 12778  15F5  0021               	movlb	1	; select bank1
 12779  15F6  00CB               	movwf	(_callback_pressed+1)^(0+128)
 12780  15F7  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 12781  15F8  00CA               	movwf	_callback_pressed^(0+128)
 12782  15F9  0008               	return
 12783  15FA                     __end_of_MTOUCH_Button_SetPressedCallback:	
 12784                           
 12785                           	psect	text84
 12786  15EE                     __ptext84:	
 12787 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 12788 ;; Defined at:
 12789 ;;		line 524 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12790 ;; Parameters:    Size  Location     Type
 12791 ;;  callback        2    1[COMMON] PTR FTN(enum E3068,)void
 12792 ;;		 -> myButtonReleasedCallback(1), 
 12793 ;; Auto vars:     Size  Location     Type
 12794 ;;		None
 12795 ;; Return value:  Size  Location     Type
 12796 ;;                  1    wreg      void 
 12797 ;; Registers used:
 12798 ;;		wreg
 12799 ;; Tracked objects:
 12800 ;;		On entry : 0/0
 12801 ;;		On exit  : 0/0
 12802 ;;		Unchanged: 0/0
 12803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12804 ;;      Params:         2       0       0       0       0       0       0       0
 12805 ;;      Locals:         0       0       0       0       0       0       0       0
 12806 ;;      Temps:          0       0       0       0       0       0       0       0
 12807 ;;      Totals:         2       0       0       0       0       0       0       0
 12808 ;;Total ram usage:        2 bytes
 12809 ;; Hardware stack levels used:    1
 12810 ;; Hardware stack levels required when called:    4
 12811 ;; This function calls:
 12812 ;;		Nothing
 12813 ;; This function is called by:
 12814 ;;		_main
 12815 ;; This function uses a non-reentrant model
 12816 ;;
 12817                           
 12818                           
 12819                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 12820  15EE                     _MTOUCH_Button_SetNotPressedCallback:	
 12821                           
 12822                           ;mcc_generated_files/mtouch/mtouch_button.c: 524: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 525: {;mcc_generated_files/mtouch/mtouch_button.c: 526:     callback_notPressed = cal
      +                          lback;
 12823                           
 12824                           ;incstack = 0
 12825                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 12826  15EE  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 12827  15EF  0020               	movlb	0	; select bank0
 12828  15F0  00ED               	movwf	_callback_notPressed+1
 12829  15F1  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 12830  15F2  00EC               	movwf	_callback_notPressed
 12831  15F3  0008               	return
 12832  15F4                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 12833                           
 12834                           	psect	text85
 12835  15BD                     __ptext85:	
 12836 ;; *************** function _EUSART_is_rx_ready *****************
 12837 ;; Defined at:
 12838 ;;		line 134 in file "mcc_generated_files/eusart.c"
 12839 ;; Parameters:    Size  Location     Type
 12840 ;;		None
 12841 ;; Auto vars:     Size  Location     Type
 12842 ;;		None
 12843 ;; Return value:  Size  Location     Type
 12844 ;;                  1    wreg      unsigned char 
 12845 ;; Registers used:
 12846 ;;		wreg
 12847 ;; Tracked objects:
 12848 ;;		On entry : 0/0
 12849 ;;		On exit  : 0/0
 12850 ;;		Unchanged: 0/0
 12851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12852 ;;      Params:         0       0       0       0       0       0       0       0
 12853 ;;      Locals:         0       0       0       0       0       0       0       0
 12854 ;;      Temps:          0       0       0       0       0       0       0       0
 12855 ;;      Totals:         0       0       0       0       0       0       0       0
 12856 ;;Total ram usage:        0 bytes
 12857 ;; Hardware stack levels used:    1
 12858 ;; Hardware stack levels required when called:    4
 12859 ;; This function calls:
 12860 ;;		Nothing
 12861 ;; This function is called by:
 12862 ;;		_main
 12863 ;; This function uses a non-reentrant model
 12864 ;;
 12865                           
 12866                           
 12867                           ;psect for function _EUSART_is_rx_ready
 12868  15BD                     _EUSART_is_rx_ready:	
 12869                           
 12870                           ;mcc_generated_files/eusart.c: 136:     return eusartRxCount;
 12871                           
 12872                           ;incstack = 0
 12873                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 12874  15BD  0020               	movlb	0	; select bank0
 12875  15BE  0865               	movf	_eusartRxCount,w	;volatile
 12876  15BF  0008               	return
 12877  15C0                     __end_of_EUSART_is_rx_ready:	
 12878                           
 12879                           	psect	text86
 12880  0903                     __ptext86:	
 12881 ;; *************** function _EUSART_Read *****************
 12882 ;; Defined at:
 12883 ;;		line 148 in file "mcc_generated_files/eusart.c"
 12884 ;; Parameters:    Size  Location     Type
 12885 ;;		None
 12886 ;; Auto vars:     Size  Location     Type
 12887 ;;  readValue       1    2[COMMON] unsigned char 
 12888 ;; Return value:  Size  Location     Type
 12889 ;;                  1    wreg      unsigned char 
 12890 ;; Registers used:
 12891 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12892 ;; Tracked objects:
 12893 ;;		On entry : 0/0
 12894 ;;		On exit  : 0/0
 12895 ;;		Unchanged: 0/0
 12896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12897 ;;      Params:         0       0       0       0       0       0       0       0
 12898 ;;      Locals:         1       0       0       0       0       0       0       0
 12899 ;;      Temps:          1       0       0       0       0       0       0       0
 12900 ;;      Totals:         2       0       0       0       0       0       0       0
 12901 ;;Total ram usage:        2 bytes
 12902 ;; Hardware stack levels used:    1
 12903 ;; Hardware stack levels required when called:    4
 12904 ;; This function calls:
 12905 ;;		Nothing
 12906 ;; This function is called by:
 12907 ;;		_main
 12908 ;;		_getch
 12909 ;; This function uses a non-reentrant model
 12910 ;;
 12911                           
 12912                           
 12913                           ;psect for function _EUSART_Read
 12914  0903                     _EUSART_Read:	
 12915  0903                     l4724:	
 12916                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 12917                           
 12918                           ;incstack = 0
 12919                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 12920                           
 12921                           
 12922                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 12923  0903  0020               	movlb	0	; select bank0
 12924  0904  0865               	movf	_eusartRxCount,w	;volatile
 12925  0905  1903               	btfsc	3,2
 12926  0906  2903               	goto	l4724
 12927                           
 12928                           ;mcc_generated_files/eusart.c: 156:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 12929  0907  0866               	movf	_eusartRxTail,w	;volatile
 12930  0908  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 12931  0909  0086               	movwf	6
 12932  090A  0187               	clrf	7
 12933  090B  0801               	movf	1,w
 12934  090C  00F1               	movwf	??_EUSART_Read
 12935  090D  0871               	movf	??_EUSART_Read,w
 12936  090E  00E4               	movwf	_eusartRxLastError	;volatile
 12937                           
 12938                           ;mcc_generated_files/eusart.c: 158:     readValue = eusartRxBuffer[eusartRxTail++];
 12939  090F  0866               	movf	_eusartRxTail,w
 12940  0910  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 12941  0911  0086               	movwf	6
 12942  0912  0187               	clrf	7
 12943  0913  0801               	movf	1,w
 12944  0914  00F1               	movwf	??_EUSART_Read
 12945  0915  0871               	movf	??_EUSART_Read,w
 12946  0916  00F2               	movwf	EUSART_Read@readValue
 12947  0917  3001               	movlw	1
 12948  0918  00F1               	movwf	??_EUSART_Read
 12949  0919  0871               	movf	??_EUSART_Read,w
 12950  091A  07E6               	addwf	_eusartRxTail,f	;volatile
 12951                           
 12952                           ;mcc_generated_files/eusart.c: 159:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 12953  091B  3008               	movlw	8
 12954  091C  0266               	subwf	_eusartRxTail,w	;volatile
 12955  091D  1803               	btfsc	3,0
 12956                           
 12957                           ;mcc_generated_files/eusart.c: 160:     {;mcc_generated_files/eusart.c: 161:         eus
      +                          artRxTail = 0;
 12958  091E  01E6               	clrf	_eusartRxTail	;volatile
 12959                           
 12960                           ;mcc_generated_files/eusart.c: 163:     PIE1bits.RCIE = 0;
 12961  091F  0021               	movlb	1	; select bank1
 12962  0920  1291               	bcf	17,5	;volatile
 12963                           
 12964                           ;mcc_generated_files/eusart.c: 164:     eusartRxCount--;
 12965  0921  3001               	movlw	1
 12966  0922  0020               	movlb	0	; select bank0
 12967  0923  02E5               	subwf	_eusartRxCount,f	;volatile
 12968                           
 12969                           ;mcc_generated_files/eusart.c: 165:     PIE1bits.RCIE = 1;
 12970  0924  0021               	movlb	1	; select bank1
 12971  0925  1691               	bsf	17,5	;volatile
 12972                           
 12973                           ;mcc_generated_files/eusart.c: 167:     return readValue;
 12974  0926  0872               	movf	EUSART_Read@readValue,w
 12975  0927  0008               	return
 12976  0928                     __end_of_EUSART_Read:	
 12977                           
 12978                           	psect	text87
 12979  0E16                     __ptext87:	
 12980 ;; *************** function _DATA_PROCESS *****************
 12981 ;; Defined at:
 12982 ;;		line 217 in file "main.c"
 12983 ;; Parameters:    Size  Location     Type
 12984 ;;  x               1    wreg     unsigned char 
 12985 ;; Auto vars:     Size  Location     Type
 12986 ;;  x               1    6[COMMON] unsigned char 
 12987 ;; Return value:  Size  Location     Type
 12988 ;;                  1    wreg      void 
 12989 ;; Registers used:
 12990 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12991 ;; Tracked objects:
 12992 ;;		On entry : 0/0
 12993 ;;		On exit  : 0/0
 12994 ;;		Unchanged: 0/0
 12995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12996 ;;      Params:         0       0       0       0       0       0       0       0
 12997 ;;      Locals:         1       0       0       0       0       0       0       0
 12998 ;;      Temps:          2       0       0       0       0       0       0       0
 12999 ;;      Totals:         3       0       0       0       0       0       0       0
 13000 ;;Total ram usage:        3 bytes
 13001 ;; Hardware stack levels used:    1
 13002 ;; Hardware stack levels required when called:    6
 13003 ;; This function calls:
 13004 ;;		_LED_PROCESS
 13005 ;;		_RELAY_PROCESS
 13006 ;; This function is called by:
 13007 ;;		_main
 13008 ;; This function uses a non-reentrant model
 13009 ;;
 13010                           
 13011                           
 13012                           ;psect for function _DATA_PROCESS
 13013  0E16                     _DATA_PROCESS:	
 13014                           
 13015                           ;incstack = 0
 13016                           ; Regs used in _DATA_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13017                           ;DATA_PROCESS@x stored from wreg
 13018  0E16  00F6               	movwf	DATA_PROCESS@x
 13019                           
 13020                           ;main.c: 217: void DATA_PROCESS(char x);main.c: 218: {;main.c: 219:     timeout_count = 
      +                          0;
 13021  0E17  3000               	movlw	0
 13022  0E18  0021               	movlb	1	; select bank1
 13023  0E19  00BB               	movwf	(_timeout_count+3)^(0+128)
 13024  0E1A  3000               	movlw	0
 13025  0E1B  00BA               	movwf	(_timeout_count+2)^(0+128)
 13026  0E1C  3000               	movlw	0
 13027  0E1D  00B9               	movwf	(_timeout_count+1)^(0+128)
 13028  0E1E  3000               	movlw	0
 13029  0E1F  00B8               	movwf	_timeout_count^(0+128)
 13030                           
 13031                           ;main.c: 220:     switch(x)
 13032  0E20  2E5F               	goto	l4894
 13033  0E21                     l4862:	
 13034                           
 13035                           ;main.c: 223:         {;main.c: 224:             LED_PROCESS(0);
 13036  0E21  3000               	movlw	0
 13037  0E22  318A  22EE  318E   	fcall	_LED_PROCESS
 13038                           
 13039                           ;main.c: 225:             RELAY_PROCESS(0);
 13040  0E25  3000               	movlw	0
 13041  0E26  3189  21E8         	fcall	_RELAY_PROCESS
 13042                           
 13043                           ;main.c: 226:             check_request = 0;
 13044  0E28  0020               	movlb	0	; select bank0
 13045  0E29  01E0               	clrf	_check_request
 13046                           
 13047                           ;main.c: 227:             last_touch_status.full_status = 0;
 13048  0E2A  01D9               	clrf	_last_touch_status
 13049  0E2B  01DA               	clrf	_last_touch_status+1
 13050                           
 13051                           ;main.c: 228:             break;
 13052  0E2C  0008               	return
 13053  0E2D                     l4868:	
 13054                           
 13055                           ;main.c: 231:         {;main.c: 232:             LED_PROCESS(1);
 13056  0E2D  3001               	movlw	1
 13057  0E2E  318A  22EE  318E   	fcall	_LED_PROCESS
 13058                           
 13059                           ;main.c: 233:             RELAY_PROCESS(1);
 13060  0E31  3001               	movlw	1
 13061  0E32  3189  21E8         	fcall	_RELAY_PROCESS
 13062                           
 13063                           ;main.c: 234:             check_request = 0;
 13064  0E34  0020               	movlb	0	; select bank0
 13065  0E35  01E0               	clrf	_check_request
 13066                           
 13067                           ;main.c: 235:             last_touch_status.full_status = 1;
 13068  0E36  3001               	movlw	1
 13069  0E37  00D9               	movwf	_last_touch_status
 13070  0E38  3000               	movlw	0
 13071  0E39  00DA               	movwf	_last_touch_status+1
 13072                           
 13073                           ;main.c: 236:             break;
 13074  0E3A  0008               	return
 13075  0E3B                     l4874:	
 13076                           
 13077                           ;main.c: 239:         {;main.c: 240:             LED_PROCESS(2);
 13078  0E3B  3002               	movlw	2
 13079  0E3C  318A  22EE  318E   	fcall	_LED_PROCESS
 13080                           
 13081                           ;main.c: 241:             RELAY_PROCESS(2);
 13082  0E3F  3002               	movlw	2
 13083  0E40  3189  21E8         	fcall	_RELAY_PROCESS
 13084                           
 13085                           ;main.c: 242:             check_request = 0;
 13086  0E42  0020               	movlb	0	; select bank0
 13087  0E43  01E0               	clrf	_check_request
 13088                           
 13089                           ;main.c: 243:             last_touch_status.full_status = 2;
 13090  0E44  3002               	movlw	2
 13091  0E45  00D9               	movwf	_last_touch_status
 13092  0E46  3000               	movlw	0
 13093  0E47  00DA               	movwf	_last_touch_status+1
 13094                           
 13095                           ;main.c: 244:             break;
 13096  0E48  0008               	return
 13097  0E49                     l4880:	
 13098                           
 13099                           ;main.c: 247:         {;main.c: 248:             LED_PROCESS(3);
 13100  0E49  3003               	movlw	3
 13101  0E4A  318A  22EE  318E   	fcall	_LED_PROCESS
 13102                           
 13103                           ;main.c: 249:             RELAY_PROCESS(3);
 13104  0E4D  3003               	movlw	3
 13105  0E4E  3189  21E8         	fcall	_RELAY_PROCESS
 13106                           
 13107                           ;main.c: 250:             check_request = 0;
 13108  0E50  0020               	movlb	0	; select bank0
 13109  0E51  01E0               	clrf	_check_request
 13110                           
 13111                           ;main.c: 251:             last_touch_status.full_status = 3;
 13112  0E52  3003               	movlw	3
 13113  0E53  00D9               	movwf	_last_touch_status
 13114  0E54  3000               	movlw	0
 13115  0E55  00DA               	movwf	_last_touch_status+1
 13116                           
 13117                           ;main.c: 252:             break;
 13118  0E56  0008               	return
 13119  0E57                     l4886:	
 13120                           
 13121                           ;main.c: 255:         {;main.c: 256:             check_request = 0;
 13122  0E57  0020               	movlb	0	; select bank0
 13123  0E58  01E0               	clrf	_check_request
 13124                           
 13125                           ;main.c: 257:             update_state_flag = 1;
 13126  0E59  01DD               	clrf	_update_state_flag
 13127  0E5A  0ADD               	incf	_update_state_flag,f
 13128                           
 13129                           ;main.c: 258:             break;
 13130  0E5B  0008               	return
 13131  0E5C                     l4890:	
 13132                           
 13133                           ;main.c: 261:         {;main.c: 262:             check_request = 0;
 13134  0E5C  0020               	movlb	0	; select bank0
 13135  0E5D  01E0               	clrf	_check_request
 13136                           
 13137                           ;main.c: 263:             break;
 13138  0E5E  0008               	return
 13139  0E5F                     l4894:	
 13140  0E5F  0876               	movf	DATA_PROCESS@x,w
 13141  0E60  00F4               	movwf	??_DATA_PROCESS
 13142  0E61  01F5               	clrf	??_DATA_PROCESS+1
 13143                           
 13144                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13145                           ; Switch size 1, requested type "simple"
 13146                           ; Number of cases is 1, Range of values is 0 to 0
 13147                           ; switch strategies available:
 13148                           ; Name         Instructions Cycles
 13149                           ; simple_byte            4     3 (average)
 13150                           ; direct_byte            8     6 (fixed)
 13151                           ; jumptable            260     6 (fixed)
 13152                           ;	Chosen strategy is simple_byte
 13153  0E62  0875               	movf	??_DATA_PROCESS+1,w
 13154  0E63  3A00               	xorlw	0	; case 0
 13155  0E64  1903               	skipnz
 13156  0E65  2E67               	goto	l6594
 13157  0E66  2E5C               	goto	l4890
 13158  0E67                     l6594:	
 13159                           
 13160                           ; Switch size 1, requested type "simple"
 13161                           ; Number of cases is 5, Range of values is 48 to 85
 13162                           ; switch strategies available:
 13163                           ; Name         Instructions Cycles
 13164                           ; simple_byte           16     9 (average)
 13165                           ; direct_byte           85     9 (fixed)
 13166                           ; jumptable            263     9 (fixed)
 13167                           ;	Chosen strategy is simple_byte
 13168  0E67  0874               	movf	??_DATA_PROCESS,w
 13169  0E68  3A30               	xorlw	48	; case 48
 13170  0E69  1903               	skipnz
 13171  0E6A  2E21               	goto	l4862
 13172  0E6B  3A01               	xorlw	1	; case 49
 13173  0E6C  1903               	skipnz
 13174  0E6D  2E2D               	goto	l4868
 13175  0E6E  3A03               	xorlw	3	; case 50
 13176  0E6F  1903               	skipnz
 13177  0E70  2E3B               	goto	l4874
 13178  0E71  3A01               	xorlw	1	; case 51
 13179  0E72  1903               	skipnz
 13180  0E73  2E49               	goto	l4880
 13181  0E74  3A66               	xorlw	102	; case 85
 13182  0E75  1903               	skipnz
 13183  0E76  2E57               	goto	l4886
 13184  0E77  2E5C               	goto	l4890
 13185  0E78  0008               	return
 13186  0E79                     __end_of_DATA_PROCESS:	
 13187                           
 13188                           	psect	text88
 13189  09E8                     __ptext88:	
 13190 ;; *************** function _RELAY_PROCESS *****************
 13191 ;; Defined at:
 13192 ;;		line 5 in file "relay.c"
 13193 ;; Parameters:    Size  Location     Type
 13194 ;;  x               1    wreg     unsigned char 
 13195 ;; Auto vars:     Size  Location     Type
 13196 ;;  x               1    3[COMMON] unsigned char 
 13197 ;; Return value:  Size  Location     Type
 13198 ;;                  1    wreg      void 
 13199 ;; Registers used:
 13200 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13201 ;; Tracked objects:
 13202 ;;		On entry : 0/0
 13203 ;;		On exit  : 0/0
 13204 ;;		Unchanged: 0/0
 13205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13206 ;;      Params:         0       0       0       0       0       0       0       0
 13207 ;;      Locals:         1       0       0       0       0       0       0       0
 13208 ;;      Temps:          2       0       0       0       0       0       0       0
 13209 ;;      Totals:         3       0       0       0       0       0       0       0
 13210 ;;Total ram usage:        3 bytes
 13211 ;; Hardware stack levels used:    1
 13212 ;; Hardware stack levels required when called:    4
 13213 ;; This function calls:
 13214 ;;		Nothing
 13215 ;; This function is called by:
 13216 ;;		_main
 13217 ;;		_myButtonPressedCallback
 13218 ;;		_DATA_PROCESS
 13219 ;; This function uses a non-reentrant model
 13220 ;;
 13221                           
 13222                           
 13223                           ;psect for function _RELAY_PROCESS
 13224  09E8                     _RELAY_PROCESS:	
 13225                           
 13226                           ;incstack = 0
 13227                           ; Regs used in _RELAY_PROCESS: [wreg-fsr0h+status,2+status,0]
 13228                           ;RELAY_PROCESS@x stored from wreg
 13229  09E8  00F3               	movwf	RELAY_PROCESS@x
 13230                           
 13231                           ;relay.c: 5: void RELAY_PROCESS(uint8_t x);relay.c: 6: {;relay.c: 7:     switch(x)
 13232  09E9  29FA               	goto	l4060
 13233  09EA                     l1127:	
 13234                           ;relay.c: 10:         {;relay.c: 11:             do { LATAbits.LATA5 = 1; } while(0);do 
      +                          { LATAbits.LATA4 = 1; } while(0);
 13235                           
 13236  09EA  0022               	movlb	2	; select bank2
 13237  09EB  168C               	bsf	12,5	;volatile
 13238  09EC  160C               	bsf	12,4	;volatile
 13239  09ED  0008               	return
 13240  09EE                     l1133:	
 13241                           ;relay.c: 15:         {;relay.c: 16:             do { LATAbits.LATA5 = 1; } while(0);do 
      +                          { LATAbits.LATA4 = 0; } while(0);
 13242                           
 13243  09EE  0022               	movlb	2	; select bank2
 13244  09EF  168C               	bsf	12,5	;volatile
 13245  09F0  120C               	bcf	12,4	;volatile
 13246  09F1  0008               	return
 13247  09F2                     l1138:	
 13248                           ;relay.c: 20:         {;relay.c: 21:             do { LATAbits.LATA5 = 0; } while(0);do 
      +                          { LATAbits.LATA4 = 1; } while(0);
 13249                           
 13250  09F2  0022               	movlb	2	; select bank2
 13251  09F3  128C               	bcf	12,5	;volatile
 13252  09F4  160C               	bsf	12,4	;volatile
 13253  09F5  0008               	return
 13254  09F6                     l1143:	
 13255                           ;relay.c: 25:         {;relay.c: 26:             do { LATAbits.LATA5 = 0; } while(0);do 
      +                          { LATAbits.LATA4 = 0; } while(0);
 13256                           
 13257  09F6  0022               	movlb	2	; select bank2
 13258  09F7  128C               	bcf	12,5	;volatile
 13259  09F8  120C               	bcf	12,4	;volatile
 13260  09F9  0008               	return
 13261  09FA                     l4060:	
 13262  09FA  0873               	movf	RELAY_PROCESS@x,w
 13263  09FB  00F1               	movwf	??_RELAY_PROCESS
 13264  09FC  01F2               	clrf	??_RELAY_PROCESS+1
 13265                           
 13266                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13267                           ; Switch size 1, requested type "simple"
 13268                           ; Number of cases is 1, Range of values is 0 to 0
 13269                           ; switch strategies available:
 13270                           ; Name         Instructions Cycles
 13271                           ; simple_byte            4     3 (average)
 13272                           ; direct_byte            8     6 (fixed)
 13273                           ; jumptable            260     6 (fixed)
 13274                           ;	Chosen strategy is simple_byte
 13275  09FD  0872               	movf	??_RELAY_PROCESS+1,w
 13276  09FE  3A00               	xorlw	0	; case 0
 13277  09FF  1903               	skipnz
 13278  0A00  2A02               	goto	l6596
 13279  0A01  2A10               	goto	l1147
 13280  0A02                     l6596:	
 13281                           
 13282                           ; Switch size 1, requested type "simple"
 13283                           ; Number of cases is 4, Range of values is 0 to 3
 13284                           ; switch strategies available:
 13285                           ; Name         Instructions Cycles
 13286                           ; simple_byte           13     7 (average)
 13287                           ; direct_byte           14     6 (fixed)
 13288                           ; jumptable            260     6 (fixed)
 13289                           ;	Chosen strategy is simple_byte
 13290  0A02  0871               	movf	??_RELAY_PROCESS,w
 13291  0A03  3A00               	xorlw	0	; case 0
 13292  0A04  1903               	skipnz
 13293  0A05  29EA               	goto	l1127
 13294  0A06  3A01               	xorlw	1	; case 1
 13295  0A07  1903               	skipnz
 13296  0A08  29EE               	goto	l1133
 13297  0A09  3A03               	xorlw	3	; case 2
 13298  0A0A  1903               	skipnz
 13299  0A0B  29F2               	goto	l1138
 13300  0A0C  3A01               	xorlw	1	; case 3
 13301  0A0D  1903               	skipnz
 13302  0A0E  29F6               	goto	l1143
 13303  0A0F  2A10               	goto	l1147
 13304  0A10                     l1147:	
 13305  0A10  0008               	return
 13306  0A11                     __end_of_RELAY_PROCESS:	
 13307                           
 13308                           	psect	text89
 13309  0AEE                     __ptext89:	
 13310 ;; *************** function _LED_PROCESS *****************
 13311 ;; Defined at:
 13312 ;;		line 34 in file "led.c"
 13313 ;; Parameters:    Size  Location     Type
 13314 ;;  x               1    wreg     unsigned char 
 13315 ;; Auto vars:     Size  Location     Type
 13316 ;;  x               1    3[COMMON] unsigned char 
 13317 ;; Return value:  Size  Location     Type
 13318 ;;                  1    wreg      void 
 13319 ;; Registers used:
 13320 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13321 ;; Tracked objects:
 13322 ;;		On entry : 0/0
 13323 ;;		On exit  : 0/0
 13324 ;;		Unchanged: 0/0
 13325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13326 ;;      Params:         0       0       0       0       0       0       0       0
 13327 ;;      Locals:         1       0       0       0       0       0       0       0
 13328 ;;      Temps:          2       0       0       0       0       0       0       0
 13329 ;;      Totals:         3       0       0       0       0       0       0       0
 13330 ;;Total ram usage:        3 bytes
 13331 ;; Hardware stack levels used:    1
 13332 ;; Hardware stack levels required when called:    5
 13333 ;; This function calls:
 13334 ;;		_LED_0_SetHigh
 13335 ;;		_LED_0_SetLow
 13336 ;;		_LED_1_SetHigh
 13337 ;;		_LED_1_SetLow
 13338 ;; This function is called by:
 13339 ;;		_main
 13340 ;;		_myButtonPressedCallback
 13341 ;;		_DATA_PROCESS
 13342 ;; This function uses a non-reentrant model
 13343 ;;
 13344                           
 13345                           
 13346                           ;psect for function _LED_PROCESS
 13347  0AEE                     _LED_PROCESS:	
 13348                           
 13349                           ;incstack = 0
 13350                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13351                           ;LED_PROCESS@x stored from wreg
 13352  0AEE  00F3               	movwf	LED_PROCESS@x
 13353                           
 13354                           ;led.c: 34: void LED_PROCESS(uint8_t x);led.c: 35: {;led.c: 36:     switch(x)
 13355  0AEF  2B08               	goto	l4050
 13356  0AF0                     l4040:	
 13357                           
 13358                           ;led.c: 39:         {;led.c: 40:             LED_1_SetHigh();LED_0_SetHigh();
 13359  0AF0  3195  25D8  318A   	fcall	_LED_1_SetHigh
 13360  0AF3  3195  25D0         	fcall	_LED_0_SetHigh
 13361                           
 13362                           ;led.c: 41:             break;
 13363  0AF5  0008               	return
 13364  0AF6                     l4042:	
 13365                           
 13366                           ;led.c: 44:         {;led.c: 45:             LED_1_SetHigh();LED_0_SetLow();
 13367  0AF6  3195  25D8  318A   	fcall	_LED_1_SetHigh
 13368  0AF9  3195  25D4         	fcall	_LED_0_SetLow
 13369                           
 13370                           ;led.c: 46:             break;
 13371  0AFB  0008               	return
 13372  0AFC                     l4044:	
 13373                           
 13374                           ;led.c: 49:         {;led.c: 50:             LED_1_SetLow();LED_0_SetHigh();
 13375  0AFC  3195  25DC  318A   	fcall	_LED_1_SetLow
 13376  0AFF  3195  25D0         	fcall	_LED_0_SetHigh
 13377                           
 13378                           ;led.c: 51:             break;
 13379  0B01  0008               	return
 13380  0B02                     l4046:	
 13381                           
 13382                           ;led.c: 54:         {;led.c: 55:             LED_1_SetLow();LED_0_SetLow();
 13383  0B02  3195  25DC  318A   	fcall	_LED_1_SetLow
 13384  0B05  3195  25D4         	fcall	_LED_0_SetLow
 13385                           
 13386                           ;led.c: 56:             break;
 13387  0B07  0008               	return
 13388  0B08                     l4050:	
 13389  0B08  0873               	movf	LED_PROCESS@x,w
 13390  0B09  00F1               	movwf	??_LED_PROCESS
 13391  0B0A  01F2               	clrf	??_LED_PROCESS+1
 13392                           
 13393                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13394                           ; Switch size 1, requested type "simple"
 13395                           ; Number of cases is 1, Range of values is 0 to 0
 13396                           ; switch strategies available:
 13397                           ; Name         Instructions Cycles
 13398                           ; simple_byte            4     3 (average)
 13399                           ; direct_byte            8     6 (fixed)
 13400                           ; jumptable            260     6 (fixed)
 13401                           ;	Chosen strategy is simple_byte
 13402  0B0B  0872               	movf	??_LED_PROCESS+1,w
 13403  0B0C  3A00               	xorlw	0	; case 0
 13404  0B0D  1903               	skipnz
 13405  0B0E  2B10               	goto	l6598
 13406  0B0F  2B1E               	goto	l1120
 13407  0B10                     l6598:	
 13408                           
 13409                           ; Switch size 1, requested type "simple"
 13410                           ; Number of cases is 4, Range of values is 0 to 3
 13411                           ; switch strategies available:
 13412                           ; Name         Instructions Cycles
 13413                           ; simple_byte           13     7 (average)
 13414                           ; direct_byte           14     6 (fixed)
 13415                           ; jumptable            260     6 (fixed)
 13416                           ;	Chosen strategy is simple_byte
 13417  0B10  0871               	movf	??_LED_PROCESS,w
 13418  0B11  3A00               	xorlw	0	; case 0
 13419  0B12  1903               	skipnz
 13420  0B13  2AF0               	goto	l4040
 13421  0B14  3A01               	xorlw	1	; case 1
 13422  0B15  1903               	skipnz
 13423  0B16  2AF6               	goto	l4042
 13424  0B17  3A03               	xorlw	3	; case 2
 13425  0B18  1903               	skipnz
 13426  0B19  2AFC               	goto	l4044
 13427  0B1A  3A01               	xorlw	1	; case 3
 13428  0B1B  1903               	skipnz
 13429  0B1C  2B02               	goto	l4046
 13430  0B1D  2B1E               	goto	l1120
 13431  0B1E                     l1120:	
 13432  0B1E  0008               	return
 13433  0B1F                     __end_of_LED_PROCESS:	
 13434                           
 13435                           	psect	text90
 13436  15DC                     __ptext90:	
 13437 ;; *************** function _LED_1_SetLow *****************
 13438 ;; Defined at:
 13439 ;;		line 17 in file "led.c"
 13440 ;; Parameters:    Size  Location     Type
 13441 ;;		None
 13442 ;; Auto vars:     Size  Location     Type
 13443 ;;		None
 13444 ;; Return value:  Size  Location     Type
 13445 ;;                  1    wreg      void 
 13446 ;; Registers used:
 13447 ;;		None
 13448 ;; Tracked objects:
 13449 ;;		On entry : 0/0
 13450 ;;		On exit  : 0/0
 13451 ;;		Unchanged: 0/0
 13452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13453 ;;      Params:         0       0       0       0       0       0       0       0
 13454 ;;      Locals:         0       0       0       0       0       0       0       0
 13455 ;;      Temps:          0       0       0       0       0       0       0       0
 13456 ;;      Totals:         0       0       0       0       0       0       0       0
 13457 ;;Total ram usage:        0 bytes
 13458 ;; Hardware stack levels used:    1
 13459 ;; Hardware stack levels required when called:    4
 13460 ;; This function calls:
 13461 ;;		Nothing
 13462 ;; This function is called by:
 13463 ;;		_LED_PROCESS
 13464 ;; This function uses a non-reentrant model
 13465 ;;
 13466                           
 13467                           
 13468                           ;psect for function _LED_1_SetLow
 13469  15DC                     _LED_1_SetLow:	
 13470                           
 13471                           ;incstack = 0
 13472                           ; Regs used in _LED_1_SetLow: []
 13473                           ;led.c: 19:     do { LATCbits.LATC3 = 1; } while(0);
 13474  15DC  0022               	movlb	2	; select bank2
 13475  15DD  158E               	bsf	14,3	;volatile
 13476                           
 13477                           ;led.c: 20:     do { LATCbits.LATC2 = 0; } while(0);
 13478  15DE  110E               	bcf	14,2	;volatile
 13479  15DF  0008               	return
 13480  15E0                     __end_of_LED_1_SetLow:	
 13481                           
 13482                           	psect	text91
 13483  15D8                     __ptext91:	
 13484 ;; *************** function _LED_1_SetHigh *****************
 13485 ;; Defined at:
 13486 ;;		line 12 in file "led.c"
 13487 ;; Parameters:    Size  Location     Type
 13488 ;;		None
 13489 ;; Auto vars:     Size  Location     Type
 13490 ;;		None
 13491 ;; Return value:  Size  Location     Type
 13492 ;;                  1    wreg      void 
 13493 ;; Registers used:
 13494 ;;		None
 13495 ;; Tracked objects:
 13496 ;;		On entry : 0/0
 13497 ;;		On exit  : 0/0
 13498 ;;		Unchanged: 0/0
 13499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13500 ;;      Params:         0       0       0       0       0       0       0       0
 13501 ;;      Locals:         0       0       0       0       0       0       0       0
 13502 ;;      Temps:          0       0       0       0       0       0       0       0
 13503 ;;      Totals:         0       0       0       0       0       0       0       0
 13504 ;;Total ram usage:        0 bytes
 13505 ;; Hardware stack levels used:    1
 13506 ;; Hardware stack levels required when called:    4
 13507 ;; This function calls:
 13508 ;;		Nothing
 13509 ;; This function is called by:
 13510 ;;		_LED_PROCESS
 13511 ;; This function uses a non-reentrant model
 13512 ;;
 13513                           
 13514                           
 13515                           ;psect for function _LED_1_SetHigh
 13516  15D8                     _LED_1_SetHigh:	
 13517                           
 13518                           ;incstack = 0
 13519                           ; Regs used in _LED_1_SetHigh: []
 13520                           ;led.c: 14:     do { LATCbits.LATC2 = 1; } while(0);
 13521  15D8  0022               	movlb	2	; select bank2
 13522  15D9  150E               	bsf	14,2	;volatile
 13523                           
 13524                           ;led.c: 15:     do { LATCbits.LATC3 = 0; } while(0);
 13525  15DA  118E               	bcf	14,3	;volatile
 13526  15DB  0008               	return
 13527  15DC                     __end_of_LED_1_SetHigh:	
 13528                           
 13529                           	psect	text92
 13530  15D4                     __ptext92:	
 13531 ;; *************** function _LED_0_SetLow *****************
 13532 ;; Defined at:
 13533 ;;		line 28 in file "led.c"
 13534 ;; Parameters:    Size  Location     Type
 13535 ;;		None
 13536 ;; Auto vars:     Size  Location     Type
 13537 ;;		None
 13538 ;; Return value:  Size  Location     Type
 13539 ;;                  1    wreg      void 
 13540 ;; Registers used:
 13541 ;;		None
 13542 ;; Tracked objects:
 13543 ;;		On entry : 0/0
 13544 ;;		On exit  : 0/0
 13545 ;;		Unchanged: 0/0
 13546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13547 ;;      Params:         0       0       0       0       0       0       0       0
 13548 ;;      Locals:         0       0       0       0       0       0       0       0
 13549 ;;      Temps:          0       0       0       0       0       0       0       0
 13550 ;;      Totals:         0       0       0       0       0       0       0       0
 13551 ;;Total ram usage:        0 bytes
 13552 ;; Hardware stack levels used:    1
 13553 ;; Hardware stack levels required when called:    4
 13554 ;; This function calls:
 13555 ;;		Nothing
 13556 ;; This function is called by:
 13557 ;;		_LED_PROCESS
 13558 ;; This function uses a non-reentrant model
 13559 ;;
 13560                           
 13561                           
 13562                           ;psect for function _LED_0_SetLow
 13563  15D4                     _LED_0_SetLow:	
 13564                           
 13565                           ;incstack = 0
 13566                           ; Regs used in _LED_0_SetLow: []
 13567                           ;led.c: 30:     do { LATAbits.LATA1 = 1; } while(0);
 13568  15D4  0022               	movlb	2	; select bank2
 13569  15D5  148C               	bsf	12,1	;volatile
 13570                           
 13571                           ;led.c: 31:     do { LATAbits.LATA0 = 0; } while(0);
 13572  15D6  100C               	bcf	12,0	;volatile
 13573  15D7  0008               	return
 13574  15D8                     __end_of_LED_0_SetLow:	
 13575                           
 13576                           	psect	text93
 13577  15D0                     __ptext93:	
 13578 ;; *************** function _LED_0_SetHigh *****************
 13579 ;; Defined at:
 13580 ;;		line 23 in file "led.c"
 13581 ;; Parameters:    Size  Location     Type
 13582 ;;		None
 13583 ;; Auto vars:     Size  Location     Type
 13584 ;;		None
 13585 ;; Return value:  Size  Location     Type
 13586 ;;                  1    wreg      void 
 13587 ;; Registers used:
 13588 ;;		None
 13589 ;; Tracked objects:
 13590 ;;		On entry : 0/0
 13591 ;;		On exit  : 0/0
 13592 ;;		Unchanged: 0/0
 13593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13594 ;;      Params:         0       0       0       0       0       0       0       0
 13595 ;;      Locals:         0       0       0       0       0       0       0       0
 13596 ;;      Temps:          0       0       0       0       0       0       0       0
 13597 ;;      Totals:         0       0       0       0       0       0       0       0
 13598 ;;Total ram usage:        0 bytes
 13599 ;; Hardware stack levels used:    1
 13600 ;; Hardware stack levels required when called:    4
 13601 ;; This function calls:
 13602 ;;		Nothing
 13603 ;; This function is called by:
 13604 ;;		_LED_PROCESS
 13605 ;; This function uses a non-reentrant model
 13606 ;;
 13607                           
 13608                           
 13609                           ;psect for function _LED_0_SetHigh
 13610  15D0                     _LED_0_SetHigh:	
 13611                           
 13612                           ;incstack = 0
 13613                           ; Regs used in _LED_0_SetHigh: []
 13614                           ;led.c: 25:     do { LATAbits.LATA0 = 1; } while(0);
 13615  15D0  0022               	movlb	2	; select bank2
 13616  15D1  140C               	bsf	12,0	;volatile
 13617                           
 13618                           ;led.c: 26:     do { LATAbits.LATA1 = 0; } while(0);
 13619  15D2  108C               	bcf	12,1	;volatile
 13620  15D3  0008               	return
 13621  15D4                     __end_of_LED_0_SetHigh:	
 13622                           
 13623                           	psect	intentry
 13624  0004                     __pintentry:	
 13625 ;; *************** function _INTERRUPT_InterruptManager *****************
 13626 ;; Defined at:
 13627 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13628 ;; Parameters:    Size  Location     Type
 13629 ;;		None
 13630 ;; Auto vars:     Size  Location     Type
 13631 ;;		None
 13632 ;; Return value:  Size  Location     Type
 13633 ;;                  1    wreg      void 
 13634 ;; Registers used:
 13635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13636 ;; Tracked objects:
 13637 ;;		On entry : 0/0
 13638 ;;		On exit  : 0/0
 13639 ;;		Unchanged: 0/0
 13640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13641 ;;      Params:         0       0       0       0       0       0       0       0
 13642 ;;      Locals:         0       0       0       0       0       0       0       0
 13643 ;;      Temps:          0       0       0       0       0       0       0       0
 13644 ;;      Totals:         0       0       0       0       0       0       0       0
 13645 ;;Total ram usage:        0 bytes
 13646 ;; Hardware stack levels used:    1
 13647 ;; Hardware stack levels required when called:    3
 13648 ;; This function calls:
 13649 ;;		Absolute function
 13650 ;;		_EUSART_Receive_ISR
 13651 ;;		_EUSART_Transmit_ISR
 13652 ;; This function is called by:
 13653 ;;		Interrupt level 1
 13654 ;; This function uses a non-reentrant model
 13655 ;;
 13656                           
 13657  0004                     _INTERRUPT_InterruptManager:	
 13658                           
 13659                           ;incstack = 0
 13660  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13661                           
 13662                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13663  0005  3180               	pagesel	$
 13664                           
 13665                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 13666  0006  1F0B               	btfss	11,6	;volatile
 13667  0007  2821               	goto	i1l845
 13668                           
 13669                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 13670  0008  0021               	movlb	1	; select bank1
 13671  0009  1E11               	btfss	17,4	;volatile
 13672  000A  2815               	goto	i1l840
 13673  000B  0020               	movlb	0	; select bank0
 13674  000C  1E11               	btfss	17,4	;volatile
 13675  000D  2815               	goto	i1l840
 13676                           
 13677                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
 13678  000E  0021               	movlb	1	; select bank1
 13679  000F  0869               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 13680  0010  008A               	movwf	10
 13681  0011  0868               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 13682  0012  000A               	callw
 13683  0013  3180               	pagesel	$
 13684                           
 13685                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 13686  0014  2821               	goto	i1l845
 13687  0015                     i1l840:	
 13688                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 13689                           
 13690  0015  0021               	movlb	1	; select bank1
 13691  0016  1E91               	btfss	17,5	;volatile
 13692  0017  2821               	goto	i1l845
 13693  0018  0020               	movlb	0	; select bank0
 13694  0019  1E91               	btfss	17,5	;volatile
 13695  001A  2821               	goto	i1l845
 13696                           
 13697                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
 13698  001B  0021               	movlb	1	; select bank1
 13699  001C  0867               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 13700  001D  008A               	movwf	10
 13701  001E  0866               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 13702  001F  000A               	callw
 13703  0020  3180               	pagesel	$
 13704  0021                     i1l845:	
 13705                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 13706                           
 13707                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 13708                           
 13709  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13710  0022  0009               	retfie
 13711  0023                     __end_of_INTERRUPT_InterruptManager:	
 13712                           
 13713                           	psect	text95
 13714  08A4                     __ptext95:	
 13715 ;; *************** function _EUSART_Transmit_ISR *****************
 13716 ;; Defined at:
 13717 ;;		line 203 in file "mcc_generated_files/eusart.c"
 13718 ;; Parameters:    Size  Location     Type
 13719 ;;		None
 13720 ;; Auto vars:     Size  Location     Type
 13721 ;;		None
 13722 ;; Return value:  Size  Location     Type
 13723 ;;                  1    wreg      void 
 13724 ;; Registers used:
 13725 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13726 ;; Tracked objects:
 13727 ;;		On entry : 0/0
 13728 ;;		On exit  : 0/0
 13729 ;;		Unchanged: 0/0
 13730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13731 ;;      Params:         0       0       0       0       0       0       0       0
 13732 ;;      Locals:         0       0       0       0       0       0       0       0
 13733 ;;      Temps:          1       0       0       0       0       0       0       0
 13734 ;;      Totals:         1       0       0       0       0       0       0       0
 13735 ;;Total ram usage:        1 bytes
 13736 ;; Hardware stack levels used:    1
 13737 ;; This function calls:
 13738 ;;		Nothing
 13739 ;; This function is called by:
 13740 ;;		_EUSART_Initialize
 13741 ;;		_INTERRUPT_InterruptManager
 13742 ;; This function uses a non-reentrant model
 13743 ;;
 13744                           
 13745                           
 13746                           ;psect for function _EUSART_Transmit_ISR
 13747  08A4                     _EUSART_Transmit_ISR:	
 13748                           
 13749                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 13750                           
 13751                           ;incstack = 0
 13752                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13753  08A4  3008               	movlw	8
 13754  08A5  0021               	movlb	1	; select bank1
 13755  08A6  026A               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 13756  08A7  1803               	skipnc
 13757  08A8  28C0               	goto	i1l754
 13758                           
 13759                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 13760  08A9  0020               	movlb	0	; select bank0
 13761  08AA  0867               	movf	_eusartTxTail,w
 13762  08AB  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 13763  08AC  0086               	movwf	6
 13764  08AD  0187               	clrf	7
 13765  08AE  0801               	movf	1,w
 13766  08AF  0023               	movlb	3	; select bank3
 13767  08B0  009A               	movwf	26	;volatile
 13768  08B1  3001               	movlw	1
 13769  08B2  00F0               	movwf	??_EUSART_Transmit_ISR
 13770  08B3  0870               	movf	??_EUSART_Transmit_ISR,w
 13771  08B4  0020               	movlb	0	; select bank0
 13772  08B5  07E7               	addwf	_eusartTxTail,f	;volatile
 13773                           
 13774                           ;mcc_generated_files/eusart.c: 210:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 13775  08B6  3008               	movlw	8
 13776  08B7  0267               	subwf	_eusartTxTail,w	;volatile
 13777  08B8  1803               	btfsc	3,0
 13778                           
 13779                           ;mcc_generated_files/eusart.c: 211:         {;mcc_generated_files/eusart.c: 212:        
      +                               eusartTxTail = 0;
 13780  08B9  01E7               	clrf	_eusartTxTail	;volatile
 13781                           
 13782                           ;mcc_generated_files/eusart.c: 214:         eusartTxBufferRemaining++;
 13783  08BA  3001               	movlw	1
 13784  08BB  00F0               	movwf	??_EUSART_Transmit_ISR
 13785  08BC  0870               	movf	??_EUSART_Transmit_ISR,w
 13786  08BD  0021               	movlb	1	; select bank1
 13787  08BE  07EA               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 13788                           
 13789                           ;mcc_generated_files/eusart.c: 215:     }
 13790  08BF  0008               	return
 13791  08C0                     i1l754:	
 13792                           ;mcc_generated_files/eusart.c: 216:     else
 13793                           
 13794                           
 13795                           ;mcc_generated_files/eusart.c: 217:     {;mcc_generated_files/eusart.c: 218:         PIE
      +                          1bits.TXIE = 0;
 13796  08C0  1211               	bcf	17,4	;volatile
 13797  08C1  0008               	return
 13798  08C2                     __end_of_EUSART_Transmit_ISR:	
 13799                           
 13800                           	psect	text96
 13801  0B1F                     __ptext96:	
 13802 ;; *************** function _EUSART_Receive_ISR *****************
 13803 ;; Defined at:
 13804 ;;		line 222 in file "mcc_generated_files/eusart.c"
 13805 ;; Parameters:    Size  Location     Type
 13806 ;;		None
 13807 ;; Auto vars:     Size  Location     Type
 13808 ;;		None
 13809 ;; Return value:  Size  Location     Type
 13810 ;;                  1    wreg      void 
 13811 ;; Registers used:
 13812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13813 ;; Tracked objects:
 13814 ;;		On entry : 0/0
 13815 ;;		On exit  : 0/0
 13816 ;;		Unchanged: 0/0
 13817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13818 ;;      Params:         0       0       0       0       0       0       0       0
 13819 ;;      Locals:         0       0       0       0       0       0       0       0
 13820 ;;      Temps:          0       0       0       0       0       0       0       0
 13821 ;;      Totals:         0       0       0       0       0       0       0       0
 13822 ;;Total ram usage:        0 bytes
 13823 ;; Hardware stack levels used:    1
 13824 ;; Hardware stack levels required when called:    2
 13825 ;; This function calls:
 13826 ;;		Absolute function
 13827 ;;		_EUSART_DefaultErrorHandler
 13828 ;;		_EUSART_DefaultFramingErrorHandler
 13829 ;;		_EUSART_DefaultOverrunErrorHandler
 13830 ;;		_EUSART_RxDataHandler
 13831 ;; This function is called by:
 13832 ;;		_EUSART_Initialize
 13833 ;;		_INTERRUPT_InterruptManager
 13834 ;; This function uses a non-reentrant model
 13835 ;;
 13836                           
 13837                           
 13838                           ;psect for function _EUSART_Receive_ISR
 13839  0B1F                     _EUSART_Receive_ISR:	
 13840                           
 13841                           ;mcc_generated_files/eusart.c: 225:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 13842                           
 13843                           ;incstack = 0
 13844                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13845  0B1F  087C               	movf	_eusartRxHead,w	;volatile
 13846  0B20  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13847  0B21  0086               	movwf	6
 13848  0B22  0187               	clrf	7
 13849  0B23  0181               	clrf	1
 13850                           
 13851                           ;mcc_generated_files/eusart.c: 227:     if(RCSTAbits.FERR){
 13852  0B24  0023               	movlb	3	; select bank3
 13853  0B25  1D1D               	btfss	29,2	;volatile
 13854  0B26  2B32               	goto	i1l4764
 13855                           
 13856                           ;mcc_generated_files/eusart.c: 228:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 13857  0B27  087C               	movf	_eusartRxHead,w	;volatile
 13858  0B28  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13859  0B29  0086               	movwf	6
 13860  0B2A  0187               	clrf	7
 13861  0B2B  1481               	bsf	1,1
 13862                           
 13863                           ;mcc_generated_files/eusart.c: 229:         EUSART_FramingErrorHandler();
 13864  0B2C  0021               	movlb	1	; select bank1
 13865  0B2D  0865               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 13866  0B2E  008A               	movwf	10
 13867  0B2F  0864               	movf	_EUSART_FramingErrorHandler^(0+128),w
 13868  0B30  000A               	callw
 13869  0B31  318B               	pagesel	$
 13870  0B32                     i1l4764:	
 13871                           
 13872                           ;mcc_generated_files/eusart.c: 232:     if(RCSTAbits.OERR){
 13873  0B32  0023               	movlb	3	; select bank3
 13874  0B33  1C9D               	btfss	29,1	;volatile
 13875  0B34  2B40               	goto	i1l4770
 13876                           
 13877                           ;mcc_generated_files/eusart.c: 233:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 13878  0B35  087C               	movf	_eusartRxHead,w	;volatile
 13879  0B36  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13880  0B37  0086               	movwf	6
 13881  0B38  0187               	clrf	7
 13882  0B39  1501               	bsf	1,2
 13883                           
 13884                           ;mcc_generated_files/eusart.c: 234:         EUSART_OverrunErrorHandler();
 13885  0B3A  0021               	movlb	1	; select bank1
 13886  0B3B  0863               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 13887  0B3C  008A               	movwf	10
 13888  0B3D  0862               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 13889  0B3E  000A               	callw
 13890  0B3F  318B               	pagesel	$
 13891  0B40                     i1l4770:	
 13892                           
 13893                           ;mcc_generated_files/eusart.c: 237:     if(eusartRxStatusBuffer[eusartRxHead].status){
 13894  0B40  087C               	movf	_eusartRxHead,w	;volatile
 13895  0B41  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13896  0B42  0086               	movwf	6
 13897  0B43  0187               	clrf	7
 13898  0B44  0801               	movf	1,w
 13899  0B45  1903               	btfsc	3,2
 13900  0B46  2B4E               	goto	i1l4774
 13901                           
 13902                           ;mcc_generated_files/eusart.c: 238:         EUSART_ErrorHandler();
 13903  0B47  0021               	movlb	1	; select bank1
 13904  0B48  0861               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 13905  0B49  008A               	movwf	10
 13906  0B4A  0860               	movf	_EUSART_ErrorHandler^(0+128),w
 13907  0B4B  000A               	callw
 13908  0B4C  318B               	pagesel	$
 13909                           
 13910                           ;mcc_generated_files/eusart.c: 239:     } else {
 13911  0B4D  0008               	return
 13912  0B4E                     i1l4774:	
 13913                           
 13914                           ;mcc_generated_files/eusart.c: 240:         EUSART_RxDataHandler();
 13915  0B4E  3197  27A2         	fcall	_EUSART_RxDataHandler
 13916  0B50  0008               	return
 13917  0B51                     __end_of_EUSART_Receive_ISR:	
 13918                           
 13919                           	psect	text97
 13920  15CC                     __ptext97:	
 13921 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 13922 ;; Defined at:
 13923 ;;		line 258 in file "mcc_generated_files/eusart.c"
 13924 ;; Parameters:    Size  Location     Type
 13925 ;;		None
 13926 ;; Auto vars:     Size  Location     Type
 13927 ;;		None
 13928 ;; Return value:  Size  Location     Type
 13929 ;;                  1    wreg      void 
 13930 ;; Registers used:
 13931 ;;		None
 13932 ;; Tracked objects:
 13933 ;;		On entry : 0/0
 13934 ;;		On exit  : 0/0
 13935 ;;		Unchanged: 0/0
 13936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13937 ;;      Params:         0       0       0       0       0       0       0       0
 13938 ;;      Locals:         0       0       0       0       0       0       0       0
 13939 ;;      Temps:          0       0       0       0       0       0       0       0
 13940 ;;      Totals:         0       0       0       0       0       0       0       0
 13941 ;;Total ram usage:        0 bytes
 13942 ;; Hardware stack levels used:    1
 13943 ;; This function calls:
 13944 ;;		Nothing
 13945 ;; This function is called by:
 13946 ;;		_EUSART_Initialize
 13947 ;;		_EUSART_Receive_ISR
 13948 ;; This function uses a non-reentrant model
 13949 ;;
 13950                           
 13951                           
 13952                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 13953  15CC                     _EUSART_DefaultOverrunErrorHandler:	
 13954                           
 13955                           ;mcc_generated_files/eusart.c: 261:     RCSTAbits.CREN = 0;
 13956                           
 13957                           ;incstack = 0
 13958                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 13959  15CC  0023               	movlb	3	; select bank3
 13960  15CD  121D               	bcf	29,4	;volatile
 13961                           
 13962                           ;mcc_generated_files/eusart.c: 262:     RCSTAbits.CREN = 1;
 13963  15CE  161D               	bsf	29,4	;volatile
 13964  15CF  0008               	return
 13965  15D0                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 13966                           
 13967                           	psect	text98
 13968  15B7                     __ptext98:	
 13969 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 13970 ;; Defined at:
 13971 ;;		line 256 in file "mcc_generated_files/eusart.c"
 13972 ;; Parameters:    Size  Location     Type
 13973 ;;		None
 13974 ;; Auto vars:     Size  Location     Type
 13975 ;;		None
 13976 ;; Return value:  Size  Location     Type
 13977 ;;                  1    wreg      void 
 13978 ;; Registers used:
 13979 ;;		None
 13980 ;; Tracked objects:
 13981 ;;		On entry : 0/0
 13982 ;;		On exit  : 0/0
 13983 ;;		Unchanged: 0/0
 13984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13985 ;;      Params:         0       0       0       0       0       0       0       0
 13986 ;;      Locals:         0       0       0       0       0       0       0       0
 13987 ;;      Temps:          0       0       0       0       0       0       0       0
 13988 ;;      Totals:         0       0       0       0       0       0       0       0
 13989 ;;Total ram usage:        0 bytes
 13990 ;; Hardware stack levels used:    1
 13991 ;; This function calls:
 13992 ;;		Nothing
 13993 ;; This function is called by:
 13994 ;;		_EUSART_Initialize
 13995 ;;		_EUSART_Receive_ISR
 13996 ;; This function uses a non-reentrant model
 13997 ;;
 13998                           
 13999                           
 14000                           ;psect for function _EUSART_DefaultFramingErrorHandler
 14001  15B7                     _EUSART_DefaultFramingErrorHandler:	
 14002                           
 14003                           ;incstack = 0
 14004                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 14005  15B7  0008               	return
 14006  15B8                     __end_of_EUSART_DefaultFramingErrorHandler:	
 14007                           
 14008                           	psect	text99
 14009  15BA                     __ptext99:	
 14010 ;; *************** function _EUSART_DefaultErrorHandler *****************
 14011 ;; Defined at:
 14012 ;;		line 266 in file "mcc_generated_files/eusart.c"
 14013 ;; Parameters:    Size  Location     Type
 14014 ;;		None
 14015 ;; Auto vars:     Size  Location     Type
 14016 ;;		None
 14017 ;; Return value:  Size  Location     Type
 14018 ;;                  1    wreg      void 
 14019 ;; Registers used:
 14020 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14021 ;; Tracked objects:
 14022 ;;		On entry : 0/0
 14023 ;;		On exit  : 0/0
 14024 ;;		Unchanged: 0/0
 14025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14026 ;;      Params:         0       0       0       0       0       0       0       0
 14027 ;;      Locals:         0       0       0       0       0       0       0       0
 14028 ;;      Temps:          0       0       0       0       0       0       0       0
 14029 ;;      Totals:         0       0       0       0       0       0       0       0
 14030 ;;Total ram usage:        0 bytes
 14031 ;; Hardware stack levels used:    1
 14032 ;; Hardware stack levels required when called:    1
 14033 ;; This function calls:
 14034 ;;		_EUSART_RxDataHandler
 14035 ;; This function is called by:
 14036 ;;		_EUSART_Initialize
 14037 ;;		_EUSART_Receive_ISR
 14038 ;; This function uses a non-reentrant model
 14039 ;;
 14040                           
 14041                           
 14042                           ;psect for function _EUSART_DefaultErrorHandler
 14043  15BA                     _EUSART_DefaultErrorHandler:	
 14044                           
 14045                           ;mcc_generated_files/eusart.c: 267:     EUSART_RxDataHandler();
 14046                           
 14047                           ;incstack = 0
 14048                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14049  15BA  3197  27A2         	fcall	_EUSART_RxDataHandler
 14050  15BC  0008               	return
 14051  15BD                     __end_of_EUSART_DefaultErrorHandler:	
 14052                           
 14053                           	psect	text100
 14054  17A2                     __ptext100:	
 14055 ;; *************** function _EUSART_RxDataHandler *****************
 14056 ;; Defined at:
 14057 ;;		line 246 in file "mcc_generated_files/eusart.c"
 14058 ;; Parameters:    Size  Location     Type
 14059 ;;		None
 14060 ;; Auto vars:     Size  Location     Type
 14061 ;;		None
 14062 ;; Return value:  Size  Location     Type
 14063 ;;                  1    wreg      void 
 14064 ;; Registers used:
 14065 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14066 ;; Tracked objects:
 14067 ;;		On entry : 0/0
 14068 ;;		On exit  : 0/0
 14069 ;;		Unchanged: 0/0
 14070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14071 ;;      Params:         0       0       0       0       0       0       0       0
 14072 ;;      Locals:         0       0       0       0       0       0       0       0
 14073 ;;      Temps:          1       0       0       0       0       0       0       0
 14074 ;;      Totals:         1       0       0       0       0       0       0       0
 14075 ;;Total ram usage:        1 bytes
 14076 ;; Hardware stack levels used:    1
 14077 ;; This function calls:
 14078 ;;		Nothing
 14079 ;; This function is called by:
 14080 ;;		_EUSART_Receive_ISR
 14081 ;;		_EUSART_DefaultErrorHandler
 14082 ;; This function uses a non-reentrant model
 14083 ;;
 14084                           
 14085                           
 14086                           ;psect for function _EUSART_RxDataHandler
 14087  17A2                     _EUSART_RxDataHandler:	
 14088                           
 14089                           ;mcc_generated_files/eusart.c: 248:     eusartRxBuffer[eusartRxHead++] = RCREG;
 14090                           
 14091                           ;incstack = 0
 14092                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 14093  17A2  0023               	movlb	3	; select bank3
 14094  17A3  0819               	movf	25,w	;volatile
 14095  17A4  00F0               	movwf	??_EUSART_RxDataHandler
 14096  17A5  087C               	movf	_eusartRxHead,w
 14097  17A6  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14098  17A7  0086               	movwf	6
 14099  17A8  0187               	clrf	7
 14100  17A9  0870               	movf	??_EUSART_RxDataHandler,w
 14101  17AA  0081               	movwf	1
 14102  17AB  3001               	movlw	1
 14103  17AC  00F0               	movwf	??_EUSART_RxDataHandler
 14104  17AD  0870               	movf	??_EUSART_RxDataHandler,w
 14105  17AE  07FC               	addwf	_eusartRxHead,f	;volatile
 14106                           
 14107                           ;mcc_generated_files/eusart.c: 249:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 14108  17AF  3008               	movlw	8
 14109  17B0  027C               	subwf	_eusartRxHead,w	;volatile
 14110  17B1  1803               	btfsc	3,0
 14111                           
 14112                           ;mcc_generated_files/eusart.c: 250:     {;mcc_generated_files/eusart.c: 251:         eus
      +                          artRxHead = 0;
 14113  17B2  01FC               	clrf	_eusartRxHead	;volatile
 14114                           
 14115                           ;mcc_generated_files/eusart.c: 253:     eusartRxCount++;
 14116  17B3  3001               	movlw	1
 14117  17B4  00F0               	movwf	??_EUSART_RxDataHandler
 14118  17B5  0870               	movf	??_EUSART_RxDataHandler,w
 14119  17B6  0020               	movlb	0	; select bank0
 14120  17B7  07E5               	addwf	_eusartRxCount,f	;volatile
 14121  17B8  0008               	return
 14122  17B9                     __end_of_EUSART_RxDataHandler:	
 14123  007E                     btemp	set	126	;btemp
 14124  007E                     int$flags	set	126
 14125  007E                     wtemp0	set	126


Data Sizes:
    Strings     38
    Constant    39
    Data        31
    BSS         126
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     51      79
    BANK1            80      2      77
    BANK2            80      0      64
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2567$0	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    Button_Service$2567	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_7(CODE[3]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2249_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    memcpy@s1	PTR const void  size(2) Largest target is 32
		 -> mtouch_button_init(CODE[32]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 32
		 -> mtouch_button_init(CODE[32]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_7(CODE[3]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_7(CODE[3]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3068,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3068,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    Button_Service@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    sp__memcpy	PTR void  size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK2[32]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3068,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3068,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    S111$sensor_adc2	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    S111$sensor_adc1	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _vfpfcnvrt->_fputc
    _pad->_fputc
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _Button_State_Pressed->_MTOUCH_Button_Initialize
    _Button_State_NotPressed->_MTOUCH_Button_Initialize
    _myButtonPressedCallback->_LED_PROCESS
    _myButtonPressedCallback->_RELAY_PROCESS
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _DATA_PROCESS->_LED_PROCESS
    _DATA_PROCESS->_RELAY_PROCESS

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_check_message
    _update_state->_printf
    _check_message->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _ctoa->_pad
    _pad->_fputs
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   45499
                                              0 BANK1      2     2      0
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                        _LED_PROCESS
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                      _RELAY_PROCESS
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         0     0      0    5667
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0    5729
                                             48 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     4      4    5667
                                             40 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     5      3    4956
                                             32 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    38      2    4521
                                             23 BANK0      9     7      2
                               _ctoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _ctoa                                                 8     6      2    3015
                                             17 BANK0      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  9     6      3    2771
                                              8 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     123
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                8     7      1    1226
                                              0 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     834
                                              4 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      66
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4468
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              3 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23572
                                             40 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   14526
                                             38 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   14427
                                             31 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   13171
                                             27 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1297
                                              5 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5745
                                             14 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5202
                                             11 COMMON     1     0      1
                                              0 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1482
                                              5 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    8678
                                             13 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    8579
                                              9 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1437
                                              4 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1     150
                                              4 COMMON     1     0      1
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_isPressed                              2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1809
                                              4 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     141
                                              4 COMMON     1     0      1
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                              4 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                              4 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0      66
                                              4 COMMON     3     3      0
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (1) _RELAY_PROCESS                                        3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          3     3      0      22
                                              1 COMMON     3     3      0
                      _LED_0_SetHigh
                       _LED_0_SetLow
                      _LED_1_SetHigh
                       _LED_1_SetLow
 ---------------------------------------------------------------------------------
 (7) _LED_1_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_1_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_0_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_0_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATA_PROCESS
     _LED_PROCESS
       _LED_0_SetHigh
       _LED_0_SetLow
       _LED_1_SetHigh
       _LED_1_SetLow
     _RELAY_PROCESS
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_PROCESS
     _LED_0_SetHigh
     _LED_0_SetLow
     _LED_1_SetHigh
     _LED_1_SetLow
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
               _LED_0_SetHigh
               _LED_0_SetLow
               _LED_1_SetHigh
               _LED_1_SetLow
             _RELAY_PROCESS
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _MTOUCH_Button_isPressed
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _RELAY_PROCESS
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write
   _update_state
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      E9       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     33      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      2      4D       8       96.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      E9      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Aug 23 12:51:43 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                          _update_state 0B51  
                                      ___bmul@product 0073                                          ?_LED_PROCESS 0070  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 1638                             _Sensor_setCalibratAcqTime 1670  
                                         __CFG_LVP$ON 0000                                                   l303 041C  
                                                 l305 0433                                                   l257 0488  
                                                 l522 064E                                                   l293 037C  
                                                 l286 0379                                                   l288 0375  
                                                 l742 08EB                                                   _GIE 005F  
                                                 _PR2 001B                                                   _abs 17D0  
                              ??_EUSART_RxDataHandler 0070                                                   _pad 0CB3  
                      ?_EUSART_SetFramingErrorHandler 0071                               ?_Sensor_loadADCSettings 0072  
                                     _TMR2_Initialize 1647                                          __CFG_BORV$LO 0000  
                                       DATA_PROCESS@x 0076                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0072                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0015                        Sensor_getScanGroupIndex@sensor 0073  
                   __size_of_MTOUCH_Sensor_Initialize 0015                             ?_MTOUCH_Sensor_Initialize 0070  
                                        ?_EUSART_Read 0070                                                  l1120 0B1E  
                                                l1027 0B82                                                  ?_abs 0071  
                                                l1133 09EE                                                  l1143 09F6  
                                                l1127 09EA                                                  l1240 0CF7  
                                                l1138 09F2                                                  l1147 0A10  
                                                l1236 0CCB                                                  l1239 0CEB  
                                                l4100 0C16                                                  l4040 0AF0  
                                                l4104 0C21                                                  l4042 0AF6  
                                                l4050 0B08                                                  l4044 0AFC  
                                                l4060 09FA                                                  l4046 0B02  
                                                l4332 0F6C                                                  l3620 0900  
                                                l4326 0F50                                                  l4174 074E  
                                                l3630 0A67                                                  l3606 08E1  
                                                l6006 0AC8                                                  l6110 0B60  
                                                l4328 0F58                                                  l4192 08D0  
                                                l3632 0A76                                                  l3720 0484  
                                                l4280 0941                                                  l6032 176D  
                                                l6008 0AE5                                                  l6112 0B67  
                                                l3642 0A89                                                  l4098 0C14  
                                                l6026 1764                                                  l6106 0B52  
                                                l5420 16EC                                                  l3812 0831  
                                                l4196 08D7                                                  l6044 16B6  
                                                l3636 0A78                                                  l3708 1683  
                                                l3740 0504                                                  l5412 0978  
                                                l6124 09C4                                                  l6108 0B59  
                                                l6116 0B6E                                                  l3734 04DF  
                                                l3670 0B8C                                                  l6134 09D7  
                                                l6310 018B                                                  ?_pad 0028  
                                                l5416 16E6                                                  l3760 0FB5  
                                                l4800 0950                                                  l6128 09C6  
                                                l3738 04F2                                                  l5602 043F  
                                                l4466 178D                                                  l6066 083E  
                                                l3674 0BAF                                                  l6306 0183  
                                                l6314 0190                                                  l4724 0903  
                                                l5612 045B                                                  l5508 0344  
                                                l5700 0EAD                                                  l6244 008C  
                                                l3766 0FE4                                                  l3758 0FB1  
                                                l5606 0447                                                  l5542 037F  
                                                l5534 0370                                                  l5518 0356  
                                                l5454 02F3                                                  l5446 02DF  
                                                l5702 0EC0                                                  l6238 0084  
                                                l5456 02F9                                                  l5464 02FB  
                                                l3784 0805                                                  l6328 01B7  
                                                l6256 00B0                                                  l5642 17CD  
                                                l3698 16E2                                                  l5618 046D  
                                                l5570 0413                                                  l5554 03C4  
                                                l5458 030D                                                  l5706 0ED9  
                                                l4834 0954                                                  l3786 0811  
                                                l5650 0CC1                                                  l6370 0263  
                                                l6282 011A                                                  l5492 0319  
                                                l5476 0301                                                  l4828 0952  
                                                l5660 0CCD                                                  l6380 028A  
                                                l4862 0E21                                                  l5806 1760  
                                                l5566 03F9                                                  l5558 03DF  
                                                l5654 0CC9                                                  l5742 0A1C  
                                                l5902 0599                                                  l4880 0E49  
                                                l5736 0CA2                                                  l5840 0DCA  
                                                l5488 030F                                                  l5824 0A43  
                                                l5744 0A22                                                  l5912 05AA  
                                                l6376 027B                                                  l6368 025F  
                                                l4890 0E5C                                                  l4874 0E3B  
                                                l5834 1694                                                  l5842 0DCE  
                                                l5906 059F                                                  l4868 0E2D  
                                                l5692 0EA9                                                  l5684 0E96  
                                                l5772 0D6E                                                  l5940 085D  
                                                l6388 029B                                                  l4886 0E57  
                                                l4894 0E5F                                                  l5862 0645  
                                                l5598 0437                                                  l5790 0DA9  
                                                l5782 0D89                                                  l5766 0D66  
                                                l6590 06EB                                                  l5950 069E  
                                                l5926 16A7                                                  l6398 02B0  
                                                l5872 07BB                                                  l5856 060C  
                                                l6592 06F0                                                  l5960 06BD  
                                                l6584 0B74                                                  l6594 0E67  
                                                l5794 0DB2                                                  l5786 0D99  
                                                l5778 0D81                                                  l6586 09DF  
                                                l6596 0A02                                                  l5956 06AD  
                                                l5972 06DE                                                  l6588 095C  
                                                l6598 0B10                                                  l5966 06CD  
                                                l5974 0701                                                  l5896 0578  
                                                l5998 0D44                                                  STR_1 1800  
                                                STR_2 1809                                                  STR_3 1814  
                                                STR_4 1819                                                  STR_5 181E  
                                                STR_6 1823                                                  STR_7 1828  
                       ?_Button_Reading_Update_Helper 0070                                                  u2205 0BAD  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u2400 082F  
                                                u2305 0F9F                                                  u2165 17D9  
                                                u2325 0FD6                                                  u2275 0518  
                                                u3405 1790                                                  u3190 0F37  
                                                u2295 0F95                                                  u3185 0EFF  
                                                u3195 0F33                                                  u2395 0820  
                                                u5035 0D08                                                  u4605 0CD7  
                                                u2945 0716                                                  u2955 075C  
                                                u5507 00CE                                                  u5517 00DB  
                                                u5607 016A                                                  u5527 00E8  
                                                u4905 0622                                                  u4665 0EC7  
                                                u5617 01E1                                                  u5537 00F5  
                                                u5627 01EE                                                  u5547 0102  
                                                u4685 0BBC                                                  u5637 01FB  
                                                u5557 0129                                                  u4695 0AB4  
                                                u5647 0208                                                  u5567 0136  
                                                u5657 0215                                                  u5577 0143  
                                                u5497 00C1                                                  u4875 0DF7  
                                                u5667 0222                                                  u5587 0150  
                                      ??_LED_0_SetLow 0071                                                  u5677 022F  
                                                u5597 015D                                                  u5687 023C  
                          Button_State_Pressed@button 0024                                                  _TMR2 001A  
                               __end_of_check_message 09E8                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 01BE  
                                      ??_LED_1_SetLow 0071                              _Sensor_getScanGroupIndex 0A65  
                           ?_Sensor_Acq_ExecutePacket 007B                                          __CFG_WRT$OFF 0000  
                                  _MTOUCH_needReburst 0002                                                  abs@a 0071  
                                                _dbuf 0120                                                  _ctoa 0A11  
                                                _main 0059                  __size_of_MTOUCH_Button_InitializeAll 001C  
                                                _prec 00BE                                                  _nout 00BC  
                                                pad@i 002C                                                  pad@p 0029  
                                                fsr0h 0005                                                  fsr1h 0007  
                                                indf0 0000                                                  fsr0l 0004  
                                                indf1 0001                                                  fsr1l 0006  
                                                pad@w 002E                  __size_of_MTOUCH_Sensor_InitializeAll 000E  
                                                btemp 007E                                                  start 0023  
                                   ___bmul@multiplier 0074                                         __CFG_MCLRE$ON 0000  
                                 ?_MTOUCH_needReburst 0070                        __end_of_Sensor_autoCalibration 1000  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1814          Sensor_Scanfrequency_Evaluation@frequency_hop 180F  
                                       __CFG_LPBOR$ON 0000                              _myButtonReleasedCallback 17E7  
                            ?_MTOUCH_Service_Mainloop 0070                      __size_of_MTOUCH_Button_isPressed 001B  
                       __size_of_Button_State_Pressed 0066                                                 ??_abs 0073  
                                               ??_pad 002B                           ?_Button_Baseline_Initialize 0070  
               Sensor_postAcquisitionProcess@adcIndex 0078                         ??_MTOUCH_Sensor_RawSample_Get 0077  
                       Sensor_RawSample_Update@sensor 0077                         myButtonPressedCallback@button 0074  
                           __size_of_Sensor_isEnabled 0010                                         ?_EUSART_Write 0070  
                      __size_of_OSCILLATOR_Initialize 0006                         __end_of_OSCILLATOR_Initialize 161E  
   Sensor_Scanfrequency_Evaluation@best_packet_sample 0036                   __end_of_Sensor_isCalibratingAcqTime 1647  
                         _Sensor_isCalibratingAcqTime 163F                                                 ?_ctoa 0031  
                                               ?_main 0070                                         __CFG_WDTE$OFF 0000  
                      __end_of_Sensor_loadADCSettings 0525                                                 _T2CON 001C  
                             __size_of_Button_Service 0055                                       ??_LED_0_SetHigh 0071  
                                               i1l840 0015                                                 i1l754 08C0  
                                               i1l845 0021                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 0037  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                       ??_LED_1_SetHigh 0071  
                                               _TXREG 019A                                                 _TXSTA 019E  
                     __size_of_Button_DefaultCallback 0001                                  ??_MTOUCH_needReburst 0071  
                     __size_of_Sensor_DefaultCallback 0001                                                 _blink 005F  
                                               _flags 00C0                               __size_of_Sensor_Service 0093  
               __end_of_MTOUCH_Sensor_Scan_Initialize 16D4                __size_of_MTOUCH_Sensor_Scan_Initialize 0010  
                       _MTOUCH_Sensor_Scan_Initialize 16C4                                        _WDT_Initialize 15E0  
                             Sensor_setSampled@sensor 0071                                                 _fputc 0B83  
                                               _fputs 0974                                          LED_PROCESS@x 0073  
                                               pad@fp 0030                                                 _width 0057  
                                               ctoa@c 0031                                                 _putch 15E9  
                                               ctoa@w 0034                      __size_of_Button_State_NotPressed 00A4  
                                               pclath 000A                                  _Sensor_Sampled_Reset 07F9  
                                               status 0003                                                 wtemp0 007E  
                                     _TMR2_StartTimer 15C0                      __size_of_TMR2_LoadPeriodRegister 0005  
                           __size_of_Sensor_setActive 0007                                Sensor_isEnabled@sensor 0072  
                                     __initialization 0025                                          __end_of_ctoa 0A3A  
                                        __end_of_main 02BC                                  _Sensor_setCalibrated 1658  
                               __size_of_DATA_PROCESS 0063                                        ??_EUSART_Write 0071  
                             __end_of_TMR2_Initialize 164F                           ?_INTERRUPT_InterruptManager 0070  
                      ??_EUSART_SetRxInterruptHandler 0073                      __end_of_MTOUCH_Button_Initialize 0BEE  
                                              ??_ctoa 0033                                                ??_main 00EB  
                             _MTOUCH_Sensor_Calibrate 16F5                             Sensor_Service@sensor_adc1 0044  
                           Sensor_Service@sensor_adc2 0045                               ??_Button_Reading_Update 007C  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0073                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 15E4                                          ?_MTOUCH_Tick 0070  
                        Button_Baseline_Update@button 0077             __end_of_EUSART_DefaultFramingErrorHandler 15B8  
          __size_of_EUSART_DefaultFramingErrorHandler 0001                   ??_EUSART_DefaultFramingErrorHandler 0070  
                  ?_EUSART_DefaultFramingErrorHandler 0070                     _EUSART_DefaultFramingErrorHandler 15B7  
                          _EUSART_OverrunErrorHandler 00E2                  __size_of_MTOUCH_Sensor_RawSample_Get 0017  
                                              ?_fputc 0074                                                ?_fputs 0020  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              ?_putch 0070                                                _ANSELB 018D  
                                              _ANSELC 018E                            __end_of_EUSART_is_rx_ready 15C0  
                                              _BORCON 0116                                                i1l4770 0B40  
                                              i1l4764 0B32                                                i1l4774 0B4E  
                               ?_Sensor_Sampled_Reset 0070                                                _OSCCON 0099  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              _WDTCON 0097                     MTOUCH_Button_InitializeAll@button 0020  
                                        _DATA_PROCESS 0E16                        ??_Button_Reading_Update_Helper 0079  
                              _Button_DefaultCallback 15B8                       __end_of_MTOUCH_Service_Mainloop 084F  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 164F  
                              _Sensor_DefaultCallback 15B9                                          vfprintf@cfmt 0046  
                                       _packet_sample 0053                                                ___bmul 16E4  
                               ?_Sensor_setCalibrated 0070                          Sensor_DefaultCallback@sensor 0071  
                                      __CFG_STVREN$ON 0000                      __size_of_myButtonPressedCallback 001E  
                                 _EUSART_Transmit_ISR 08A4                                                _memcpy 0A3A  
                                              _rxData 0063                                  __end_of_LED_0_SetLow 15D8  
                    __end_of_MTOUCH_Button_ServiceAll 16C4                                  __end_of_LED_1_SetLow 15E0  
                                              _printf 1717                                                pad@buf 0028  
                                __size_of_LED_PROCESS 0031                                                ctoa@fp 0036  
                        Sensor_autoCalibration@sensor 007A                                                _strlen 0800  
                                              fputc@c 0074                                                fputs@c 0024  
                                              fputs@i 0025                                                fputs@s 0027  
                             _MTOUCH_Sensor_SampleAll 1762                          Button_DefaultCallback@button 0074  
                                ?_Sensor_isCalibrated 0070                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 0DB4  
                              __size_of_RELAY_PROCESS 0029                               ?_Button_Baseline_Update 0070  
                                    __end_of_vfprintf 0AEE                   Sensor_postAcquisitionProcess@sensor 0079  
                             __end_of_TMR2_StartTimer 15C3                    __size_of_Sensor_setCalibratAcqTime 000D  
            __end_of_MTOUCH_Button_SetPressedCallback 15FA             __size_of_MTOUCH_Button_SetPressedCallback 0006  
                  ??_MTOUCH_Button_SetPressedCallback 0073                     ?_MTOUCH_Button_SetPressedCallback 0071  
                    _MTOUCH_Button_SetPressedCallback 15F4                              __size_of_Sensor_isActive 000D  
                                ?_EUSART_Transmit_ISR 0070                       MTOUCH_Sensor_RawSample_Get@name 0078  
                 Sensor_getScanGroupIndex@sensorGroup 0074                                  __size_of_EUSART_Read 0025  
                                   _SYSTEM_Initialize 1728                               __end_of__initialization 0055  
                 __size_of_Button_Baseline_Initialize 002E                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0075                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 00C4                            __end_of_Button_Tick_helper 09C1  
                                   _update_state_flag 005D                         MTOUCH_Sensor_Calibrate@sensor 0076  
                __end_of_EUSART_SetTxInterruptHandler 1618                 __size_of_EUSART_SetTxInterruptHandler 0006  
                        _EUSART_SetTxInterruptHandler 1612           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0024  
                                 ___bmul@multiplicand 0071                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 0818                                          __pidataBANK0 15C9  
                                        __pidataBANK1 086B           __end_of_MTOUCH_Button_SetNotPressedCallback 15F4  
        __size_of_MTOUCH_Button_SetNotPressedCallback 0006                 ??_MTOUCH_Button_SetNotPressedCallback 0073  
                ?_MTOUCH_Button_SetNotPressedCallback 0071                   _MTOUCH_Button_SetNotPressedCallback 15EE  
                                 ??_SYSTEM_Initialize 007C                            __end_of_MTOUCH_Button_Tick 17A2  
                                       __end_of_fputc 0BB8                                         __end_of_fputs 099A  
                    __end_of_MTOUCH_Sensor_Initialize 178C                                         __end_of_putch 15EE  
                           ??_MTOUCH_Sensor_Calibrate 0075                                      _Sensor_isEnabled 16D4  
                                    ?_TMR2_Initialize 0070                       __end_of_Button_Deviation_Update 0F76  
                            Sensor_setInactive@sensor 0071                                        _Button_Service 0D03  
                    __end_of_Sensor_Acq_ExecutePacket 047A                            ?_Button_State_Initializing 0024  
                                Button_Service@button 002C                                        _OPTION_REGbits 0095  
                               ??_Sensor_isCalibrated 0071                            ??_Sensor_getScanGroupIndex 0071  
                                _eusartRxStatusBuffer 00A0                        __end_of_Button_Baseline_Update 0793  
                 Sensor_Acq_ExecutePacket@sensor_adc1 002D                   Sensor_Acq_ExecutePacket@sensor_adc2 007B  
                            _MTOUCH_Button_Initialize 0BB8                       ??_EUSART_SetOverrunErrorHandler 0073  
                                      _Sensor_Service 0671                               _Button_State_NotPressed 05CD  
                       __size_of_MTOUCH_Sensor_Enable 0011                                    _Sensor_setInactive 1631  
                                   _sensor_scan_group 182B                                               ??_fputc 0077  
                           __end_of_SYSTEM_Initialize 173A                                     _lowpowerActivated 006A  
                                             ??_fputs 0021                                 ??_EUSART_Transmit_ISR 0070  
                    MTOUCH_Sensor_isCalibrated@sensor 0076                                ??_Sensor_Sampled_Reset 0071  
                                             ??_putch 0073                                            __pbssBANK0 0053  
                                          __pbssBANK1 00A0                                            __pbssBANK2 0120  
                                          _check_data 094E                                  __end_of_EUSART_Write 0903  
                             _TMR2_LoadPeriodRegister 15E4                            ??_myButtonReleasedCallback 0075  
                        Sensor_loadADCSettings@sensor 0079                                   ?_Sensor_setInactive 0070  
                                    _Sensor_setActive 162A                           __size_of_EUSART_Receive_ISR 0032  
                          __end_of_mtouch_button_init 1020                                     _last_touch_status 0059  
         Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0025                                ??_Sensor_setCalibrated 0071  
                                          __pmaintext 0059                                         _RELAY_PROCESS 09E8  
                                             ?___bmul 0071                         ?_EUSART_SetTxInterruptHandler 0071  
                    _EUSART_TxDefaultInterruptHandler 00E8                                               _AD1CON0 0711  
                                             _AD1CON2 0713                                               _AD1CON3 0714  
                                             _AD2CON0 0791                                               _AD2CON2 0793  
                                             _AD2CON3 0794                                               _AAD1CAP 0719  
                                             _AAD1GRD 0718                                               _AAD2GRD 0798  
                      MTOUCH_Sensor_wasSampled@sensor 0076                                            __pintentry 0004  
                              __end_of_Button_Service 0D58                                               ?_memcpy 0071  
                                             _BAUDCON 019F                                             _AD1ACQCON 0717  
                 __end_of_MTOUCH_Button_InitializeAll 086B                           _MTOUCH_Button_InitializeAll 084F  
                                           _AD2ACQCON 0797                          ??_EUSART_DefaultErrorHandler 0071  
                 __end_of_MTOUCH_Sensor_InitializeAll 16B4                           _MTOUCH_Sensor_InitializeAll 16A6  
                           ??_MTOUCH_Sensor_SampleAll 0046                                               ?_printf 0048  
                     __end_of_Sensor_RawSample_Update 094E                                  ??_Sensor_setInactive 0071  
                                             ?_strlen 0071                     __size_of_MTOUCH_Sensor_wasSampled 000E  
                           ?_MTOUCH_Sensor_wasSampled 0070                                         _eusartRxCount 0065  
                                           _AD1PRECON 0716                             Sensor_isCalibrated@sensor 0071  
                                           _AD2PRECON 0796                     __end_of_Button_State_Initializing 0E16  
                              __end_of_Sensor_Service 0704                               Sensor_Service@scanGroup 0042  
                            _MTOUCH_Button_ServiceAll 16B4                             __end_of_sensor_scan_group 182D  
                                  __size_of_vfpfcnvrt 00A8                         __size_of_EUSART_RxDataHandler 0017  
                    __size_of_MTOUCH_Service_Mainloop 001C                          __end_of_Button_State_Pressed 07F9  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0073  
                                    ?_TMR2_StartTimer 0070                      Button_Baseline_Initialize@button 0079  
                     Sensor_setCalibratAcqTime@sensor 0071                                  __size_of_MTOUCH_Tick 0003  
                 Sensor_loadADCSettings@addressOffset 0078                  __size_of_Sensor_isCalibratingAcqTime 0008  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 0021                             ??_MTOUCH_Button_isPressed 0071  
                                          _count_conf 00C2                                     ??_Sensor_isActive 0071  
                 __size_of_EUSART_DefaultErrorHandler 0003                                        ?_RELAY_PROCESS 0070  
               __end_of_Sensor_postAcquisitionProcess 0C25                __size_of_Sensor_postAcquisitionProcess 0037  
                       _Sensor_postAcquisitionProcess 0BEE                                 __size_of_LED_0_SetLow 0004  
                               __size_of_LED_1_SetLow 0004                               _myButtonPressedCallback 08C2  
                             Sensor_Acquisition@retry 003D                                       __size_of___bmul 0011  
                                         _AD1CON0bits 0711                        MTOUCH_Button_Initialize@button 007A  
                                         _AD2CON0bits 0791                                             ?_vfprintf 0040  
                                     ?_Button_Service 0070            Sensor_Scanfrequency_Evaluation@sensor_adc1 0031  
          Sensor_Scanfrequency_Evaluation@sensor_adc2 002E                                       __size_of_memcpy 002B  
                                             __ptext1 0B51                                               __ptext2 09C1  
                                             __ptext3 1717                                               __ptext4 0ABF  
                                             __ptext5 0525                                               __ptext6 0A11  
                                             __ptext7 0CB3                                               __ptext8 0800  
                                             __ptext9 0974                                __size_of_check_message 0027  
                                     __size_of_printf 0011                           Button_Reading_Update@button 0020  
                                     __size_of_strlen 0018                              _MTOUCH_Sensor_Initialize 1777  
                               _OSCILLATOR_Initialize 1618                                             _T2CONbits 001C  
                                        __size_of_abs 0017                                          __size_of_pad 0050  
                           ??_Button_State_NotPressed 0025                                               _prcData 0062  
                                     ?_Sensor_Service 0070                                 __end_of_LED_0_SetHigh 15D4  
                            ??_PIN_MANAGER_Initialize 0071                        __size_of_Button_Reading_Update 000E  
                         __size_of_MTOUCH_needReburst 0002                                 __end_of_LED_1_SetHigh 15DC  
                       __end_of_Button_Reading_Update 1698                     MTOUCH_Sensor_InitializeAll@sensor 007A  
                            _Sensor_Acq_ExecutePacket 02BC                                      _callback_sampled 00CC  
                           ??_TMR2_LoadPeriodRegister 0071                       Sensor_RawSample_Update@adcIndex 0076  
                          __size_of_SYSTEM_Initialize 0012                                               clrloop0 161F  
                                    _callback_pressed 00CA                        MTOUCH_Sensor_Initialize@sensor 0078  
                                end_of_initialization 0055                                           ?_check_data 0070  
                             ?_Button_DefaultCallback 0074                 __end_of_EUSART_SetOverrunErrorHandler 160C  
              __size_of_EUSART_SetOverrunErrorHandler 0006                         _EUSART_SetOverrunErrorHandler 1606  
                                             memcpy@d 007A                                               memcpy@n 0073  
                                             memcpy@s 0077                                               fputc@fp 0076  
                                        _LED_0_SetLow 15D4                                               init_ram 1624  
                                             fputs@fp 0020                                          _LED_1_SetLow 15DC  
                                             initloop 1625                               ?_Sensor_DefaultCallback 0071  
                       Sensor_Acquisition@sensor_adc1 003E                         Sensor_Acquisition@sensor_adc2 003B  
                    __size_of_Button_Deviation_Update 0087                                     _EUSART_Initialize 0C25  
                        ??_MTOUCH_Sensor_isCalibrated 0075                                    ?_EUSART_Initialize 0070  
                                   __end_of_vfpfcnvrt 05CD                   __end_of_MTOUCH_Sensor_RawSample_Get 17D0  
                         _MTOUCH_Sensor_RawSample_Get 17B9                                             _RCSTAbits 019D  
                                  _EUSART_is_rx_ready 15BD                                            ??_vfprintf 0043  
                                             strlen@a 0074                                               strlen@s 0075  
                                 ??_EUSART_Initialize 0073                                      ??_WDT_Initialize 0071  
                      ??_EUSART_SetTxInterruptHandler 0073                                   ?_EUSART_is_rx_ready 0070  
                              Sensor_setActive@sensor 0071                                      __CFG_FOSC$INTOSC 0000  
   Sensor_Scanfrequency_Evaluation@best_sample_period 0034                         Button_Deviation_Update@button 0020  
                Sensor_Acq_ExecutePacket@AD1CON2_temp 0022                                 __size_of_EUSART_Write 0023  
            MTOUCH_Button_SetPressedCallback@callback 0071                            MTOUCH_Sensor_Enable@sensor 0076  
                Sensor_Acq_ExecutePacket@AD2CON2_temp 0023                                   _callback_notPressed 006C  
                 __size_of_MTOUCH_Sensor_isCalibrated 0015                        __end_of_Button_DefaultCallback 15B9  
                     __size_of_EUSART_SetErrorHandler 0006       Sensor_Scanfrequency_Evaluation@packet_noise_Max 0032  
                                  _sensor_globalFlags 0069                              __end_of_Sensor_isEnabled 16E4  
                          Sensor_setCalibrated@sensor 0071                        __end_of_Sensor_DefaultCallback 15BA  
                    __end_of_myButtonReleasedCallback 1800                             __end_of_EUSART_Initialize 0C66  
                                ??_EUSART_is_rx_ready 0071                                         _check_message 09C1  
                          _Sensor_loadADCSettings$560 0076                              ??_Sensor_autoCalibration 0075  
                                           _TXSTAbits 019E                                         _check_request 0060  
                                     ??_RELAY_PROCESS 0071                             ??_myButtonPressedCallback 0075  
                    __size_of_Sensor_RawSample_Update 0026                                    _Sensor_Acquisition 0D58  
                            ??_Sensor_loadADCSettings 0073                                         ?_update_state 0070  
                                       ??_LED_PROCESS 0071                                  _Button_State_Pressed 0793  
                                      __end_of___bmul 16F5                    __end_of_EUSART_DefaultErrorHandler 15BD  
                          _EUSART_DefaultErrorHandler 15BA                                   ?_Sensor_Acquisition 003B  
                                         vfpfcnvrt@ap 0038                                           vfpfcnvrt@fp 003F  
                          ??_MTOUCH_Button_Initialize 0077           MTOUCH_Button_SetNotPressedCallback@callback 0071  
                     ??_MTOUCH_Sensor_Scan_Initialize 0071                        ?_Sensor_postAcquisitionProcess 0070  
                                        _EUSART_Write 08E0                                   __size_of_check_data 0026  
                                  _Button_Tick_helper 099A                                        __end_of_memcpy 0A65  
                              ?_OSCILLATOR_Initialize 0070                                   MTOUCH_Button_Tick@i 0075  
                            __end_of_Sensor_setActive 1631                      TMR2_LoadPeriodRegister@periodVal 0071  
                                      __end_of_printf 1728                           ??_Button_State_Initializing 0025  
                                      __end_of_strlen 0818                                   start_initialization 0025  
                             _MTOUCH_Service_Mainloop 0833                       __size_of_PIN_MANAGER_Initialize 001D  
                                  _MTOUCH_Button_Tick 178C                                   ?_Button_Tick_helper 0070  
                                         __end_of_abs 17E7                                           __end_of_pad 0D03  
                                      _TMR2_StopTimer 15C3                                         ??_EUSART_Read 0071  
        EUSART_SetRxInterruptHandler@interruptHandler 0071          EUSART_SetTxInterruptHandler@interruptHandler 0071  
                                         putch@txData 0073                                  ??_Sensor_Acquisition 003C  
                                      ?_check_message 0070                                   ?_MTOUCH_Button_Tick 0070  
                     Button_State_Initializing@button 0024                        Sensor_autoCalibration@adcIndex 0079  
                      ?_EUSART_SetOverrunErrorHandler 0071                      __end_of_MTOUCH_Sensor_wasSampled 16A6  
                                ??_Button_Tick_helper 0071                          __end_of_MTOUCH_Sensor_Enable 1717  
                                         vfprintf@fmt 0040                                          _packet_noise 005B  
                                      ??_update_state 007C                            _EUSART_FramingErrorHandler 00E4  
                                            ??___bmul 0072                                 ?_Button_State_Pressed 0024  
                              _EUSART_SetErrorHandler 15FA                            ??_MTOUCH_Button_ServiceAll 002D  
                                         __pdataBANK0 006C                                           __pdataBANK1 00C4  
                                      check_message@x 0052                                              ??_memcpy 0075  
                         __end_of_Sensor_isCalibrated 1658                          ??_Button_Baseline_Initialize 0020  
                                       _sample_period 006E                                  ??_MTOUCH_Button_Tick 0074  
                                  _mtouch_button_init 1000                            Sensor_Sampled_Reset@sensor 0071  
                                            ??_printf 004C                                              ??_strlen 0073  
                        ?_Sensor_isCalibratingAcqTime 0070                       __end_of_myButtonPressedCallback 08E0  
                                 __end_of_LED_PROCESS 0B1F                           __end_of_EUSART_Transmit_ISR 08C2  
                              __end_of_TMR2_StopTimer 15C6                                           __pbssCOMMON 007C  
                                           ___latbits 0002                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00EB                              __size_of_TMR2_Initialize 0008  
                                     _Sensor_isActive 167D                        MTOUCH_Button_ServiceAll@button 002E  
                                 Sensor_Service@error 0043                            __end_of_EUSART_Receive_ISR 0B51  
                       __size_of_Sensor_Sampled_Reset 0007                            __size_of_EUSART_Initialize 0041  
                             _Button_Deviation_Update 0EEF                            ?_Sensor_setCalibratAcqTime 0070  
                    _EUSART_RxDefaultInterruptHandler 00E6                                   __end_of_EUSART_Read 0928  
                           _Button_State_Initializing 0DB4                    __end_of_MTOUCH_Sensor_isCalibrated 1762  
                          _MTOUCH_Sensor_isCalibrated 174D                                             __pnvBANK1 00E0  
                     __size_of_Sensor_autoCalibration 008A                     __size_of_Sensor_getScanGroupIndex 002C  
                                   _Sensor_setSampled 1638                             ?_Sensor_getScanGroupIndex 0070  
                        __end_of_EUSART_RxDataHandler 17B9                                _PIN_MANAGER_Initialize 0887  
                                    ??_Button_Service 0029                              ?_MTOUCH_Sensor_Calibrate 0070  
                                EUSART_Read@readValue 0072                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 007B                            ??_MTOUCH_Sensor_Initialize 0077  
                       __size_of_Sensor_setCalibrated 000C                                             __ptext100 17A2  
                     __size_of_Sensor_loadADCSettings 00AB                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                          _eusartRxHead 007C  
                                            _AAD2RES0 079A                                          _eusartTxHead 0068  
                                        _eusartRxTail 0066                                          _eusartTxTail 0067  
                                    ??_Sensor_Service 003F                            ??_Sensor_Acq_ExecutePacket 0020  
                        ??_INTERRUPT_InterruptManager 0071                                   ??_Sensor_setSampled 0071  
                   __size_of_myButtonReleasedCallback 0019                                           _blink_count 005E  
                           ?_myButtonReleasedCallback 0074                             ??_MTOUCH_Service_Mainloop 0048  
                                   __size_of_vfprintf 002F                                              _ADCOMCON 0712  
                             _eusartTxBufferRemaining 00EA                           __size_of_Sensor_setInactive 0007  
                      Sensor_Acq_ExecutePacket@last_a 0028                        Sensor_Acq_ExecutePacket@last_b 002A  
                                     ?_TMR2_StopTimer 0070                         ??_Sensor_isCalibratingAcqTime 0071  
                                       ??_MTOUCH_Tick 0076                                       ??_check_message 0050  
                                      __size_of_fputc 0035                                        __size_of_fputs 0026  
                                      __size_of_putch 0005                                          ??_check_data 0071  
                                      _eusartRxBuffer 00A8                                        _eusartTxBuffer 00B0  
                           __end_of_Sensor_setSampled 163F                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 0071                                              _LATCbits 010E  
                                       ?_DATA_PROCESS 0070                               _Sensor_RawSample_Update 0928  
                   __end_of_Sensor_setCalibratAcqTime 167D                                             clear_ram0 161E  
                                            _PIE1bits 0091                                     _eusartRxLastError 0064  
                            __size_of_TMR2_StartTimer 0003                   __size_of_INTERRUPT_InterruptManager 001F  
                                            _PIR1bits 0011                       ??_EUSART_SetFramingErrorHandler 0073  
              Sensor_Acq_ExecutePacket@packet_counter 002C                                              _PIR2bits 0012  
                              ??_Button_State_Pressed 0025                __end_of_MTOUCH_Sensor_Sampled_ResetAll 174D  
             __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013                        _MTOUCH_Sensor_Sampled_ResetAll 173A  
                            ?_MTOUCH_Sensor_SampleAll 0070             __end_of_EUSART_DefaultOverrunErrorHandler 15D0  
          __size_of_EUSART_DefaultOverrunErrorHandler 0004                   ??_EUSART_DefaultOverrunErrorHandler 0070  
                  ?_EUSART_DefaultOverrunErrorHandler 0070                     _EUSART_DefaultOverrunErrorHandler 15CC  
                  Sensor_Acq_ExecutePacket@ADxIF_flag 0026                                           _LED_PROCESS 0AEE  
                            _MTOUCH_Sensor_wasSampled 1698                                    _mtouch_time_toScan 006B  
                                           _vfpfcnvrt 0525                              ??_Button_Baseline_Update 0071  
                                  __end_of_check_data 0974                               __end_of_Sensor_isActive 168A  
                              _Sensor_autoCalibration 0F76                            __end_of_MTOUCH_needReburst 0004  
                      myButtonReleasedCallback@button 0074                                _Sensor_loadADCSettings 047A  
                                _MTOUCH_Sensor_Enable 1706                                           _EUSART_Read 0903  
                                __end_of_update_state 0B83                                            vfpfcnvrt@c 003E  
                            Button_Tick_helper@button 0073                             ??_Button_Deviation_Update 0071  
                               _Button_Reading_Update 168A                              ?_MTOUCH_Button_isPressed 0070  
                                   ?_Sensor_isEnabled 0070                                        ??_DATA_PROCESS 0074  
                                   ??_TMR2_Initialize 0071                                   __end_of_MTOUCH_Tick 15C9  
                                   _MTOUCH_Initialize 1664                       __end_of_MTOUCH_Sensor_Calibrate 1706  
                                  ??_Sensor_isEnabled 0071                                    ?_MTOUCH_Initialize 0070  
              Sensor_postAcquisitionProcess@deviation 0076                                             memcpy@tmp 0076  
                                          vfprintf@ap 0042                                            vfprintf@fp 0045  
                              __size_of_LED_0_SetHigh 0004                                            _APFCONbits 011D  
                              __size_of_LED_1_SetHigh 0004                               ??_OSCILLATOR_Initialize 0071  
                  __end_of_Button_Baseline_Initialize 0ABF                            _Button_Baseline_Initialize 0A91  
                                 _EUSART_ErrorHandler 00E0                                   ??_MTOUCH_Initialize 007C  
                         ?_EUSART_DefaultErrorHandler 0070                                            ?_vfpfcnvrt 0037  
                            ?_Button_State_NotPressed 0024                                           check_data@x 0073  
                                  Button_Service@name 002B                                     ?_Sensor_setActive 0070  
                            ?_TMR2_LoadPeriodRegister 0070                                 Sensor_isActive@sensor 0071  
                Sensor_Scanfrequency_Evaluation@retry 0035                                    ??_Sensor_setActive 0071  
                                _EUSART_RxDataHandler 17A2                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 0B83                                              __ptext11 15E9  
                                            __ptext20 16A6                                              __ptext12 08E0  
                                            __ptext21 1777                                              __ptext13 094E  
                                            __ptext30 15FA                                              __ptext22 1706  
                                            __ptext14 1728                                              __ptext31 0833  
                                            __ptext23 084F                                              __ptext15 15E0  
                                            __ptext40 1638                                              __ptext32 0002  
                                            __ptext24 0A3A                                              __ptext16 1647  
                                            __ptext41 0928                                              __ptext33 15C6  
                                            __ptext25 0C25                                              __ptext17 0887  
                                            __ptext50 15C0                                              __ptext42 15B9  
                                            __ptext34 178C                                              __ptext26 1612  
                                            __ptext18 1618                                              __ptext51 15E4  
                                            __ptext43 0D58                                              __ptext35 099A  
                                            __ptext27 160C                                              __ptext19 1664  
                                            __ptext60 163F                                              __ptext52 047A  
                                            __ptext44 0BEE                                              __ptext36 173A  
                                            __ptext28 1606                                              __ptext61 0A65  
                                            __ptext53 164F                                              __ptext45 1631  
                                            __ptext37 07F9                                              __ptext29 1600  
                                            __ptext70 08C2                                              __ptext62 16C4  
                                            __ptext54 16D4                                              __ptext46 162A  
                                            __ptext38 1762                                              __ptext71 15B8  
                                            __ptext63 16B4                                              __ptext55 167D  
                                            __ptext47 0E79                                              __ptext39 0671  
                                            __ptext80 17B9                                              __ptext72 17E7  
                                            __ptext64 0D03                                              __ptext56 0F76  
                                            __ptext48 02BC                                              __ptext81 16E4  
                                            __ptext73 0818                                              __ptext65 1698  
                                            __ptext57 17D0                                              __ptext49 15C3  
                                            __ptext90 15DC                                              __ptext82 0EEF  
                                            __ptext74 0BB8                                              __ptext66 174D  
                                            __ptext58 1658                                              __ptext91 15D8  
                                            __ptext83 15F4                                              __ptext75 16F5  
                                            __ptext67 05CD                                              __ptext59 1670  
                                            __ptext92 15D4                                              __ptext84 15EE  
                                            __ptext76 0704                                              __ptext68 0DB4  
                                            __ptext93 15D0                                              __ptext85 15BD  
                                            __ptext77 0A91                                              __ptext69 0793  
                                            __ptext86 0903                                              __ptext78 168A  
                                            __ptext95 08A4                                              __ptext87 0E16  
                                            __ptext79 0C66                                              __ptext96 0B1F  
                                            __ptext88 09E8                                              __ptext97 15CC  
                                            __ptext89 0AEE                                              __ptext98 15B7  
                                            __ptext99 15BA                             __end_of_MTOUCH_Initialize 1670  
                           ??_Sensor_RawSample_Update 0075                            __size_of_Sensor_setSampled 0007  
                         __size_of_EUSART_is_rx_ready 0003                                         __size_of_ctoa 0029  
                                       __size_of_main 0263                       __end_of_MTOUCH_Sensor_SampleAll 1777  
                    Sensor_Scanfrequency_Evaluation@i 003A                               ?_EUSART_SetErrorHandler 0071  
                               __end_of_RELAY_PROCESS 0A11         EUSART_SetOverrunErrorHandler@interruptHandler 0071  
                                            int$flags 007E                                              _vfprintf 0ABF  
                  __size_of_Button_State_Initializing 0062                                     ??_TMR2_StartTimer 0071  
                  __end_of_INTERRUPT_InterruptManager 0023                            _INTERRUPT_InterruptManager 0004  
                                           printf@fmt 0048                 __end_of_EUSART_SetFramingErrorHandler 1606  
              __size_of_EUSART_SetFramingErrorHandler 0006                         _EUSART_SetFramingErrorHandler 1600  
                                      RELAY_PROCESS@x 0073                       __size_of_Button_Baseline_Update 008F  
                        ?_MTOUCH_Button_InitializeAll 0070                          MTOUCH_Sensor_SampleAll@group 0047  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ?_Sensor_isActive 0070  
                                       _mtouch_button 0140                                            _INTCONbits 000B  
                               ?_EUSART_RxDataHandler 0070                                         _mtouch_sensor 00CE  
                                            memcpy@d1 0079                                              memcpy@s1 0071  
                     __end_of_MTOUCH_Button_isPressed 0833                                         _LED_0_SetHigh 15D0  
                    __end_of_Sensor_getScanGroupIndex 0A91                                     __CFG_BOREN$NSLEEP 0000  
                                      __pstringtext10 1828                                        __pstringtext11 0000  
                                         _MTOUCH_Tick 15C6                                ?_Button_Reading_Update 0070  
                                       _LED_1_SetHigh 15D8                      Button_Deviation_Update@deviation 0021  
                             __size_of_WDT_Initialize 0004                          MTOUCH_Button_Initialize@name 0079  
                   __size_of_MTOUCH_Button_Initialize 0036                                              intlevel1 0000  
                           ?_MTOUCH_Button_Initialize 0070                           __size_of_Sensor_Acquisition 005C  
                            ?_myButtonPressedCallback 0074               __end_of_Sensor_Scanfrequency_Evaluation 0EEF  
            __size_of_Sensor_Scanfrequency_Evaluation 0076                     ??_Sensor_Scanfrequency_Evaluation 002F  
                    ?_Sensor_Scanfrequency_Evaluation 002E                       _Sensor_Scanfrequency_Evaluation 0E79  
                             ?_PIN_MANAGER_Initialize 0070                                         _timeout_count 00B8  
                         ??_Sensor_setCalibratAcqTime 0071                        __end_of_EUSART_SetErrorHandler 1600  
                                   __CFG_CLKOUTEN$OFF 0000                           ?_MTOUCH_Sensor_isCalibrated 0070  
                __end_of_EUSART_SetRxInterruptHandler 1612                 __size_of_EUSART_SetRxInterruptHandler 0006  
                        _EUSART_SetRxInterruptHandler 160C                                         _config_status 0061  
                         __size_of_Button_Tick_helper 0027                       __end_of_Button_State_NotPressed 0671  
                                            printf@ap 004F                                    _EUSART_Receive_ISR 0B1F  
       EUSART_SetFramingErrorHandler@interruptHandler 0071                          __end_of_Sensor_Sampled_Reset 0800  
                                         ??_vfpfcnvrt 0039                                      ??_TMR2_StopTimer 0071  
                     __end_of_TMR2_LoadPeriodRegister 15E9                           __size_of_MTOUCH_Button_Tick 0016  
                                       __pstringtext1 180F                                         __pstringtext2 182B  
                                       __pstringtext3 1000                                         __pstringtext4 1800  
                                       __pstringtext5 1809                                         __pstringtext6 1814  
                                       __pstringtext7 1819                                         __pstringtext8 181E  
                                       __pstringtext9 1823                                  __end_of_DATA_PROCESS 0E79  
                                 ?_EUSART_Receive_ISR 0070                                 __size_of_update_state 0032  
                       ??_MTOUCH_Button_InitializeAll 007B                              ??_Button_DefaultCallback 0075  
                       ??_MTOUCH_Sensor_InitializeAll 0079                  Sensor_Acq_ExecutePacket@activeSensor 0027  
                    __size_of_MTOUCH_Sensor_Calibrate 0011                                ??_MTOUCH_Sensor_Enable 0075  
                                      ?_LED_0_SetHigh 0070                     Sensor_isCalibratingAcqTime@sensor 0071  
                        __size_of_Sensor_isCalibrated 0009                              ??_Sensor_DefaultCallback 0072  
                        __end_of_Sensor_setCalibrated 1664                                        ?_LED_1_SetHigh 0070  
                __end_of_Button_Reading_Update_Helper 0CB3                 __size_of_Button_Reading_Update_Helper 004D  
                        _Button_Reading_Update_Helper 0C66                     __size_of_MTOUCH_Button_ServiceAll 0010  
                           ?_MTOUCH_Button_ServiceAll 0070                         Button_State_NotPressed@button 0024  
                                  EUSART_Write@txData 0072                          __size_of_EUSART_Transmit_ISR 001E  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 08A4  
                              _Button_Baseline_Update 0704                                         ?_LED_0_SetLow 0070  
                                       ?_LED_1_SetLow 0070                           MTOUCH_Button_isPressed@name 0072  
                                ??_EUSART_Receive_ISR 0071                            ??_MTOUCH_Sensor_wasSampled 0075  
